<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KSCommon</name>
    </assembly>
    <members>
        <member name="T:KS.Reactor.BitStreamConstants">
            <summary>Bit stream constants. Must match MaticalLib/BitStream.h on the server.</summary>
        </member>
        <member name="F:KS.Reactor.BitStreamConstants.INT32">
            Identifiers for how many bits we use to encode ints.
        </member>
        <member name="F:KS.Reactor.BitStreamConstants.LONG64">
            Identifiers for how many bits we use to encode longs.
        </member>
        <member name="F:KS.Reactor.BitStreamConstants.INT6_MIN">
            Min and max values for integer types
        </member>
        <member name="T:KS.Reactor.FixedDataParser">
            <summary>A class that parses byte array to uint or struct.</summary>
        </member>
        <member name="M:KS.Reactor.FixedDataParser.ParseEncodedUInt(System.Byte[],System.Int32@)">
            <summary>
            Read out an encoded uint from a byte array.
            The lowest bit positions of the encoded value signal the number of bytes to read.
            If the first bit is 0, then the value is in bits 1 to 7.
            If the first two bits are 01, then value is in bits 2 to 15.
            If the first two bits are 11, then value is in bits 2 to 31.
            </summary>
            <param name="data">Input byte array.</param>
            <param name="offset">Offset to begin reading from.</param>
            <returns>The uint read out.</returns>
        </member>
        <member name="M:KS.Reactor.FixedDataParser.ParseFromBytes``1(System.Byte[],System.Int32)">
            <summary>Read a struct from a byte array</summary>
            <typeparam name="T">Type of the struct to read out.</typeparam>
            <param name="inputdata">Input byte array.</param>
            <param name="offset">Offset to begin reading from.</param>
            <returns>Output struct</returns>
        </member>
        <member name="M:KS.Reactor.FixedDataParser.ParseFromUInt``1(System.UInt32)">
            <summary>Convert the bytes of a uint into another struct.</summary>
            <typeparam name="T">Type of the struct to convert to.</typeparam>
            <param name="inputData">Input uint data.</param>
            <returns>Output struct.</returns>
        </member>
        <member name="T:KS.Reactor.FixedDataWriter">
            <summary>A class that writes uint or struct to a byte array.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.FixedDataWriter.WriteEncodedUInt(System.Byte[],System.Int32,System.Int32,System.UInt32)" -->
        <member name="M:KS.Reactor.FixedDataWriter.WriteData``1(System.Byte[],System.Int32,System.Int32,``0)">
            <summary>Write data to a byte array.</summary>
            <typeparam name="T">Type of data to write.</typeparam>
            <param name="output">Output byte array.</param>
            <param name="spaceAvailable">Amount of space available for writing.</param>
            <param name="offset">Offset to begin writing at.</param>
            <param name="data">Data to write.</param>
            <returns>Number of bytes written, or -1 on an error.</returns>
        </member>
        <member name="T:KS.Reactor.JSONParser">
            <summary>JSON parser.</summary>
        </member>
        <member name="P:KS.Reactor.JSONParser.Instance">
            <summary>Singleton instance.</summary>
        </member>
        <member name="M:KS.Reactor.JSONParser.#ctor">
            <summary>Singleton constructor.</summary>
        </member>
        <member name="M:KS.Reactor.JSONParser.Parse(System.String)">
            <summary>Parses a JSON string. Throws an exception if the JSON string is invalid.</summary>
            <param name="str">String to parse.</param>
            <returns>The ksJSON constructed from parsing JSON string.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.Parse(System.String,System.Int32@)">
            <summary>Parses a JSON string at an index.</summary>
            <param name="str">String to parse.</param>
            <param name="index">Index to parse at. Will be set to index parsing finishes at plus one.</param>
            <returns>The ksJSON constructed from parsing JSON string.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.ParseObject(System.String,System.Int32@)">
            <summary>Parses a JSON object from a JSON string.</summary>
            <param name="str">String to parse.</param>
            <param name="index">Index to parse at. Will be set to index parsing finishes at plus one.</param>
            <returns>The parsed ksJSON of object type.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.ParseArray(System.String,System.Int32@)">
            <summary>Parses a JSON array from a JSON string.</summary>
            <param name="str">String to parse.</param>
            <param name="index">Index to parse at. Will be set to index parsing finishes at plus one.</param>
            <returns>The parsed ksJSON of array type.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.ParseValue(System.String,System.Int32@)">
            <summary>Parses a JSON value from a JSON string.</summary>
            <param name="str">String to parse.</param>
            <param name="index">Index to parse at. Will be set to index parsing finishes at plus one.</param>
            <returns>The parsed ksJSON of value type.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.ParseString(System.String,System.Int32@)">
            <summary>Parses a JSON string from a JSON string.</summary>
            <param name="str">String to parse.</param>
            <param name="index">Index to parse at. Will be set to index parsing finishes at plus one.</param>
            <returns>The parsed ksJSON of string type.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.GetToken(System.String,System.Int32@)">
            <summary>
            Scans a string until a white space or delimiter character or the end of the string is encountered, and
            returns the substring between the start (inclusive) and end (exclusive) points of the scan.
            </summary>
            <param name="str">String to get token from.</param>
            <param name="index">Index to look for token at. Will be set to the index after the end of the token.</param>
            <returns>Token.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.Consume(System.Char,System.String,System.Int32@)">
            <summary>
            Advances the position in a string until a non-white space character is encountered and checks if that
            character is the expected character.
            </summary>
            <param name="character">Character to check for.</param>
            <param name="str">String to parse.</param>
            <param name="index">
            Index to begin parsing at. Will be set to the index after expected character if found, or the index of the
            first non-white space character.
            </param>
            <returns>If the first non-white space encountered was the expected character.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.ConsumeWhiteSpace(System.String,System.Int32@)">
            <summary>Advances the position in a string until a non-white space character is encountered.</summary>
            <param name="str">String to parse.</param>
            <param name="index">
            Index to begin consuming white-space at. Will be set to the index of the first non-white space character.
            </param>
        </member>
        <member name="M:KS.Reactor.JSONParser.IsWhiteSpace(System.Char)">
            <summary>Checks if a character is a white space character.</summary>
            <param name="character">Character to check.</param>
            <returns>True if the character is a white space character.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.IsDelimiter(System.Char)">
            <summary>Checks if a character is a delimiter characer.</summary>
            <param name="character">Character to check.</param>
            <returns>True if the character is a delimiter character.</returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.ThrowUnexpectedSymbol(System.String,System.Int32,System.String)">
            <summary>Thows an unexpected symbol exception.</summary>
            <param name="str">String with the unexpected symbol.</param>
            <param name="index">Index of unexpected symbol.</param>
            <param name="expected">Expected symbol (optional).</param>
        </member>
        <member name="M:KS.Reactor.JSONParser.PrintLineAndColumn(System.String,System.Int32)">
            <summary>
            Gets a string with the line and column number of a position in a string, in the format:
            "on line [line] at column [column]"
            </summary>
            <param name="str">String that contains the line and column number.</param>
            <param name="index">Index to get line and column number at.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.JSONParser.GetLineNumber(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>Gets the line and column number at a position in a string.</summary>
            <param name="str">String that contains the line and column number.</param>
            <param name="index">Index to get line and column number at.</param>
            <param name="lineNumber">Line number to output.</param>
            <param name="column">Colume number to output.</param>
        </member>
        <member name="T:KS.Reactor.JSONPrinter">
            <summary>JSON serializer.</summary>
        </member>
        <member name="P:KS.Reactor.JSONPrinter.Instance">
            <summary>Singleton instance.</summary>
        </member>
        <member name="M:KS.Reactor.JSONPrinter.#ctor">
            <summary>Singleton constructor</summary>
        </member>
        <member name="M:KS.Reactor.JSONPrinter.Print(KS.Reactor.ksJSON,System.Boolean,System.Boolean)">
            <summary>Serializes JSON to a string.</summary>
            <param name="json">JSON to serialize.</param>
            <param name="pretty">If true, will print with indentation and multiple lines.</param>
            <param name="allowNaN">
            If true, will serialize NaN, infinity, and negative infinity to non-string literals that aren't part of the
            JSON standard. Otherwise these values are serialized as null.
            </param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.JSONPrinter.Print(KS.Reactor.ksJSON,System.Text.StringBuilder,System.Collections.Generic.HashSet{KS.Reactor.ksJSON},System.Int32,System.Boolean,System.Boolean)">
            <summary>Serializes JSON to a string.</summary>
            <param name="json">JSON to serialize.</param>
            <param name="builder">Builder to append serialized JSON to.</param>
            <param name="parents">Parents of this JSON. Used for circular reference detection.</param>
            <param name="depth"></param>
            <param name="pretty">If true, will print with indentation and multiple lines.</param>
            <param name="allowNaN">
            If true, will serialize NaN, infinity, and negative infinity to non-string literals that aren't part of the
            JSON standard. Otherwise these values are serialized as null.
            </param>
        </member>
        <member name="M:KS.Reactor.JSONPrinter.PrintObject(KS.Reactor.ksJSON,System.Text.StringBuilder,System.Collections.Generic.HashSet{KS.Reactor.ksJSON},System.Int32,System.Boolean,System.Boolean)">
            <summary>Serializes a JSON object.</summary>
            <param name="json">JSON to serialize.</param>
            <param name="builder">Builder to append serialized JSON to.</param>
            <param name="parents">Parents of this JSON. Used for circular reference detection.</param>
            <param name="depth"></param>
            <param name="pretty">If true, will print with indentation and multiple lines.</param>
            <param name="allowNaN">
            If true, will serialize NaN, infinity, and negative infinity to non-string literals that aren't part of the
            JSON standard. Otherwise these values are serialized as null.
            </param>
        </member>
        <member name="M:KS.Reactor.JSONPrinter.PrintArray(KS.Reactor.ksJSON,System.Text.StringBuilder,System.Collections.Generic.HashSet{KS.Reactor.ksJSON},System.Int32,System.Boolean,System.Boolean)">
            <summary>Serializes a JSON array.</summary>
            <param name="json">JSON to serialize.</param>
            <param name="builder">Builder to append serialized JSON to.</param>
            <param name="parents">Parents of this JSON. Used for circular reference detection.</param>
            <param name="depth"></param>
            <param name="pretty">If true, will print with indentation and multiple lines.</param>
            <param name="allowNaN">
            If true, will serialize NaN, infinity, and negative infinity to non-string literals that aren't part of the
            JSON standard. Otherwise these values are serialized as null.
            </param>
        </member>
        <member name="M:KS.Reactor.JSONPrinter.PrintFloat(System.Single,System.Text.StringBuilder,System.Boolean)">
            <summary>Serializes a float value.</summary>
            <param name="value">Value to serialize.</param>
            <param name="builder">Builder to append serialized JSON to.</param>
            <param name="allowNaN">
            If true, will serialize NaN, infinity, and negative infinity to non-string literals that aren't part of the
            JSON standard. Otherwise these values are serialized as null.
            </param>
        </member>
        <member name="M:KS.Reactor.JSONPrinter.PrintString(System.String,System.Text.StringBuilder)">
            <summary>Serializes a string value.</summary>
            <param name="str">String to serialize.</param>
            <param name="builder">Builder to append serialized JSON to.</param>
        </member>
        <member name="M:KS.Reactor.JSONPrinter.PrintLine(System.Text.StringBuilder,System.Int32,System.Boolean)">
            <summary>Appends a line to the serialized JSON if pretty is true.</summary>
            <param name="builder">Builder to append serialized JSON to.</param>
            <param name="depth">Determines indentation level.</param>
            <param name="pretty">If false, no line is printed.</param>
        </member>
        <member name="M:KS.Reactor.JSONPrinter.CheckCircularReference(KS.Reactor.ksJSON,System.Text.StringBuilder,System.Collections.Generic.HashSet{KS.Reactor.ksJSON})">
            <summary>
            Checks if a json container is in a hash set. If it is, serializes it as a error message string and logs a
            warning. Otherwise adds it to the set.
            </summary>
            <param name="json">JSON to check if we've already serialized.</param>
            <param name="builder">Builder to append serialized JSON to.</param>
            <param name="parents">Parents we've serialized. The json we're checking will be added to this set.</param>
            <returns>If we've already serialized the json container.</returns>
        </member>
        <member name="T:KS.Reactor.ksAsyncResultHandler">
            <summary>Delegate for cluster requests that return no results.</summary>
            <param name="asyncResult">Async result object.</param>
        </member>
        <member name="T:KS.Reactor.ksAsyncResultHandler`1">
            <summary>Delegate for cluster requests that return object results.</summary>
            <typeparam name="T"></typeparam>
            <param name="asyncResult">Async result object with result of type T.</param>
        </member>
        <member name="T:KS.Reactor.ksAsyncResult">
            <summary>Handles the tracking and response handling for asynchronous cluster requests.</summary>
        </member>
        <member name="P:KS.Reactor.ksAsyncResult.Id">
            <summary>Request token.</summary>
        </member>
        <member name="P:KS.Reactor.ksAsyncResult.AsyncState">
            <summary>User state object.</summary>
        </member>
        <member name="P:KS.Reactor.ksAsyncResult.AsyncWaitHandle">
            <summary>Wait Handle.</summary>
        </member>
        <member name="P:KS.Reactor.ksAsyncResult.CompletedSynchronously">
            <summary>Was the request completed immediately.</summary>
        </member>
        <member name="P:KS.Reactor.ksAsyncResult.IsCompleted">
            <summary>Is the request complete.</summary>
        </member>
        <member name="P:KS.Reactor.ksAsyncResult.Error">
            <summary>Error message.</summary>
        </member>
        <member name="P:KS.Reactor.ksAsyncResult.OnComplete">
            <summary>Callback to call when the task completes.</summary>
        </member>
        <member name="M:KS.Reactor.ksAsyncResult.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksAsyncResult.#ctor(KS.Reactor.ksAsyncResultHandler,System.Object)">
            <summary>Constructor.</summary>
            <param name="onComplete">Completion handler.</param>
            <param name="asyncState">User state object.</param>
        </member>
        <member name="M:KS.Reactor.ksAsyncResult.Complete(System.String,System.Boolean)">
            <summary>Complete the request and call result handlers.</summary>
            <param name="error">Error message.</param>
            <param name="completedSynchronously">Completed synchronously (Default false)</param>
        </member>
        <member name="T:KS.Reactor.ksAsyncResult`1">
            <summary>
            Handles the tracking and response handling for asynchronous cluster requests that return results.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksAsyncResult`1.OnComplete">
            <summary>Callback to call when the task completes.</summary>
        </member>
        <member name="P:KS.Reactor.ksAsyncResult`1.Result">
            <summary>Results.</summary>
        </member>
        <member name="M:KS.Reactor.ksAsyncResult`1.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksAsyncResult`1.#ctor(KS.Reactor.ksAsyncResultHandler{`0},System.Object)">
            <summary>Constructor.</summary>
            <param name="onComplete">Completion handler.</param>
            <param name="asyncState">User state object.</param>
        </member>
        <member name="M:KS.Reactor.ksAsyncResult`1.Complete(System.String,System.Boolean)">
            <summary>Complete the request with no result and call result handlers.</summary>
            <param name="error">Error message.</param>
            <param name="completedSynchronously">Completed synchronously (Default false).</param>
        </member>
        <member name="M:KS.Reactor.ksAsyncResult`1.Complete(`0,System.String,System.Boolean)">
            <summary>Complete the request and call result handlers.</summary>
            <param name="result">Result object.</param>
            <param name="error">Error message.</param>
            <param name="completedSynchronously">Completed synchronously (Default false).</param>
        </member>
        <member name="T:KS.Reactor.ksAtomic`1">
            <summary>Provides atomic access to a generic type.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:KS.Reactor.ksAtomic`1.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksAtomic`1.#ctor(`0)">
            <summary>Constructor</summary>
            <param name="value">Value to intialize with.</param>
        </member>
        <member name="P:KS.Reactor.ksAtomic`1.Value">
            <summary>Atomic getter/setter.</summary>
        </member>
        <member name="T:KS.Reactor.ksAtomicDictionary`2">
            <summary>Wraps a Dictionary to make all read/write operations thread safe.</summary>
            <typeparam name="Key"></typeparam>
            <typeparam name="Value"></typeparam>
        </member>
        <member name="T:KS.Reactor.ksAtomicDictionary`2.ForEachCallback">
            <summary>For each callback.</summary>
            <param name="pair">Pair being iterated</param>
            <returns>True to remove the pair from the dictionary.</returns>
        </member>
        <member name="P:KS.Reactor.ksAtomicDictionary`2.Item(`0)">
            <summary>Gets/Sets the value for a key.</summary>
            <param name="k">Key.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.Get(`0,`1)">
            <summary>Gets the value for a key.</summary>
            <param name="k">Key to get value for.</param>
            <param name="defaultValue">Default value to return if the key is not in the dictionary.</param>
            <returns>Value for the key.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.TryGetValue(`0,`1@)">
            <summary>Tries to get the value for a key.</summary>
            <param name="k">Key to get value for.</param>
            <param name="outValue">Out value.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.TryAdd(`0,`1)">
            <summary>Tries to add the specified key and value to the dictionary.</summary>
            <param name="k">Key to add.</param>
            <param name="value">Value to add.</param>
            <returns>
            True if the key/value pair was added to the dictionary successfully;false if the key already exists.
            </returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.Clear">
            <summary>Removes everything from the dictionary.</summary>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.Remove(`0)">
            <summary>Removes a key/value pair from the dictionary.</summary>
            <param name="k">Key to remove.</param>
            <returns>True if they key was found and removed from the dictionary.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.Remove(`0,`1)">
            <summary>Removes a key/value pair from the dictionary if the value for the key matches the given value.</summary>
            <param name="k">Key to remove.</param>
            <param name="v">The key/value pair will only be removed if the value for the key matches this.</param>
            <returns>True if the key/value pair was removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.TryRemove(`0,`1@)">
            <summary>Tries to remove and return the value that has the specified key from the dictionary.</summary>
            <param name="k">Key to get value for.</param>
            <param name="outValue">
            The object removed from the dictionary, or the default value of the TValue type if key does not exist.
            </param>
            <returns>True if the object was removed successfully; otherwise, false.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.ContainsKey(`0)">
            <summary>Checks if a key is in the dictionary.</summary>
            <param name="k">Key to check.</param>
            <returns>True if the key is in the dictionary.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.ForEach(KS.Reactor.ksAtomicDictionary{`0,`1}.ForEachCallback)">
            <summary>Call a delegate function on each pair in the dictionary.</summary>
            <param name="callback"></param>
        </member>
        <member name="P:KS.Reactor.ksAtomicDictionary`2.Keys">
            <summary>Gets a collection of all keys.</summary>
        </member>
        <member name="P:KS.Reactor.ksAtomicDictionary`2.Values">
            <summary>Gets a collection of all values.</summary>
        </member>
        <member name="M:KS.Reactor.ksAtomicDictionary`2.ForEachThenClear(KS.Reactor.ksAtomicDictionary{`0,`1}.ForEachCallback)">
            <summary>
            Call a delegate function on each pair in the dictionary and then remove the pair if the callback returns
            true.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:KS.Reactor.ksAtomicHashSet`1">
            <summary>Wraps a HashSet to make all read/write operations thread safe.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksAtomicHashSet`1.Count">
            <summary>Number of values in the hash set.</summary>
        </member>
        <member name="M:KS.Reactor.ksAtomicHashSet`1.Add(`0)">
            <summary>Adds a value to the set.</summary>
            <param name="value">Value to add.</param>
            <returns>True if the value was not already in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicHashSet`1.Remove(`0)">
            <summary>Removes a value from the set.</summary>
            <param name="value">Value to remove.</param>
            <returns>True if the value was in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicHashSet`1.Contains(`0)">
            <summary>Checks if a value is in the set.</summary>
            <param name="value">Value to check for.</param>
            <returns>True if the value is in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicHashSet`1.Clear">
            <summary>Removes all values from the set.</summary>
        </member>
        <member name="M:KS.Reactor.ksAtomicHashSet`1.ForEach(KS.Reactor.ksAtomicHashSet{`0}.ForEachCallback)">
            <summary>
            Iterate the hash set invoking the callback for each element. If any callback returns false, then iteration
            stops. A read lock is placed on the hashset while iteration is taking place.
            </summary>
            <param name="callback">Callback to invoke for each set element.</param>
            <returns>True if all callbacks were invoked and returned true.</returns>
        </member>
        <member name="T:KS.Reactor.ksAtomicList`1">
            <summary>Wraps a list to make all read/write operations thread safe.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:KS.Reactor.ksAtomicList`1.ForEachCallback">
            <summary>Iteration callback.</summary>
            <param name="element">Element being iterated.</param>
            <returns>False to stop iteration.</returns>
        </member>
        <member name="P:KS.Reactor.ksAtomicList`1.Count">
            <summary>Number of values in the list.</summary>
        </member>
        <member name="P:KS.Reactor.ksAtomicList`1.Item(System.Int32)">
            <summary>Gets/Sets the value at an index.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.ksAtomicList`1.Get(System.Int32,`0)" -->
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.ksAtomicList`1.Set(System.Int32,`0)" -->
        <member name="M:KS.Reactor.ksAtomicList`1.Add(`0)">
            <summary>Adds a value to the end of the list.</summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.Remove(`0)">
            <summary>Removes a value from the list.</summary>
            <param name="value">Value to remove.</param>
            <returns>True if the value was found and removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.RemoveAt(System.Int32)">
            <summary>Removes the value at an index.</summary>
            <param name="index">Index to remove value at.</param>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>Removes a range of values from the list.</summary>
            <param name="index">Index to remove from.</param>
            <param name="count">Number of values to remove.</param>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.Clear">
            <summary>Clears the list.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.ksAtomicList`1.Iterate" -->
        <member name="M:KS.Reactor.ksAtomicList`1.ForEach(KS.Reactor.ksAtomicList{`0}.ForEachCallback)">
            <summary>
            Iterates the list invoking the callback for each element. If any callback returns false, then iteration
            stops. A read lock is placed on the list while iteration is taking place.
            </summary>
            <param name="callback">Callback to invoke for each list element.</param>
            <returns>True if all callbacks were invoked and returned true.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.ToArray">
            <summary>Returns an array that contains all elements in the list.</summary>
            <returns>Array that contains all elements in the list.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.RemoveIndex(System.Int32)">
            <summary>Removes the value at an index, and updates the index of all effected active iterators.</summary>
            <param name="index">Index to remove value at.</param>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.Next(KS.Reactor.ksAtomicList{`0}.Iterator)">
            <summary>
            Returns the next value in the list. Can be used to safely iterate while other threads are iterating and/or
            modifying the list.
            </summary>
            <param name="iter">Iterator that tracks where we are in the list.</param>
            <returns>False if we reached the end of the list.</returns>
        </member>
        <member name="T:KS.Reactor.ksAtomicList`1.Iterator">
            <summary>Holds index and value data used when iterating an atomic list.</summary>
        </member>
        <member name="F:KS.Reactor.ksAtomicList`1.Iterator.Index">
            <summary>The index being iterated.</summary>
        </member>
        <member name="F:KS.Reactor.ksAtomicList`1.Iterator.Value">
            <summary>The value at the current index.</summary>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.Iterator.#ctor(KS.Reactor.ksAtomicList{`0})">
            <summary>Constructor</summary>
            <param name="list"></param>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.Iterator.Next">
            <summary>
            Advances to the next value in the list. Can be used to safely iterate while other threads are iterating
            and/or modifying the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.Iterator.GetEnumerator">
            <summary>
            Iterates the list from the beginning. Can be used to safely iterate while other threads are iterating
            and/or modifying the list.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicList`1.Iterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Iterates the list from the beginning. Can be used to safely iterate while other threads are iterating
            and/or modifying the list.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:KS.Reactor.ksAtomicQueue`1">
            <summary>Wraps a Queue to make all read/write operations thread safe.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksAtomicQueue`1.Count">
            <summary>Number of values in the queue.</summary>
        </member>
        <member name="M:KS.Reactor.ksAtomicQueue`1.Enqueue(`0)">
            <summary>Adds a value to the end of the queue.</summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:KS.Reactor.ksAtomicQueue`1.Dequeue">
            <summary>Removes the first value in the queue.</summary>
            <returns>Value removed from the queue.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicQueue`1.TryDequeue(`0@)">
            <summary>Tries to remove and return the object at the beginning of the queue.</summary>
            <param name="outValue">
            If the operation was successful, outValue contains the object removed.
            If no object was available to be removed, the value is the default T value.
            </param>
            <returns>True if an element was removed and returned from the beginning of the queue.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicQueue`1.Peek">
            <summary>Returns the first value without removing it from the queue.</summary>
            <returns>First value in queue.</returns>
        </member>
        <member name="M:KS.Reactor.ksAtomicQueue`1.Clear">
            <summary>Removes everything from the queue.</summary>
        </member>
        <member name="M:KS.Reactor.ksAtomicQueue`1.ToArray">
            <summary>Converts the queueto an array.</summary>
            <returns>An array of all the data in the queue.</returns>
        </member>
        <member name="T:KS.Reactor.ksBaseAssetLoader">
            <summary>Abstract base class for asset loaders that load and cache <see cref="T:KS.Reactor.ksScriptAsset"/>s.</summary>
        </member>
        <member name="F:KS.Reactor.ksBaseAssetLoader.m_cache">
            <summary>Cache of loaded assets. Keys are asset ids.</summary>
        </member>
        <member name="F:KS.Reactor.ksBaseAssetLoader.m_paths">
            <summary>
            Map of asset ids to asset paths. It is the responsibility of the derived class to fill this map before
            assets can be loaded.
            </summary>
        </member>
        <member name="F:KS.Reactor.ksBaseAssetLoader.m_pathToIdMap">
            <summary>
            Map of asset paths to asset ids. It is the responsibility of the derived class to fill this map before
            assets can be loaded.
            </summary>
        </member>
        <member name="F:KS.Reactor.ksBaseAssetLoader.m_nameToIdMap">
            <summary>
            Maps asset names to a list of all asset ids with that name. It is the responsibility of the derived class
            to fill this map before assets can be loaded.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.Load``1(System.UInt32,System.Boolean)">
            <summary>Loads an asset.</summary>
            <typeparam name="T">Type of asset to load.</typeparam>
            <param name="assetId">Id of the asset to load.</param>
            <param name="silent">If true, don't log warnings if the asset isn't found or is the wrong type.</param>
            <returns>The loaded asset, or null if the asset could not be loaded or was the wrong type.</returns>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.Get``1(System.UInt32,System.Boolean)">
            <summary>Gets an asset from the cache, or loads it if it is not in the cache.</summary>
            <typeparam name="T">Type of asset to get.</typeparam>
            <param name="assetId">Id of the asset to get.</param>
            <param name="silent">If true, don't log warnings if the asset isn't found or is the wrong type.</param>
            <returns>The loaded asset, or null if the asset could not be loaded or was the wrong type.</returns>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.Get``1(System.String)">
            <summary>
            Gets an asset by path or name. Loads the asset if it is not already loaded. If there are multiple assets
            with the same name, returns the first one that matches the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of asset to get.</typeparam>
            <param name="pathOrName">Asset path or asset name.</param>
            <returns>The loaded asset, or null if the asset could not be loaded or was the wrong type.</returns>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.CreateInstance``1(System.UInt32,System.Boolean)">
            <summary>Creates a new instance of an asset.</summary>
            <typeparam name="T">Type of asset</typeparam>
            <param name="assetId">Asset id</param>
            <param name="silent">If true, don't log warnings if the asset isn't found or is the wrong type.</param>
            <returns>Asset instance, or null if the asset could not be loaded or was the wrong type.</returns>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.CreateInstance``1(System.String)">
            <summary>
            Creates a new instance of an asset. If there are multiple assets with the same name, creates a new instance
            of the first one that matches the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of asset</typeparam>
            <param name="pathOrName">Asset path or asset name.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.Unload(KS.Reactor.ksScriptAsset)">
            <summary>
            Removes an asset from the cache, allowing it to be garbage collected when there are no more references to
            it. Subsequent calls to <see cref="M:KS.Reactor.ksBaseAssetLoader.Get``1(System.UInt32,System.Boolean)"/> will return a different instance of the asset.
            </summary>
            <param name="asset">Asset to remove from the cache.</param>
            <returns>True if the asset was removed from the cache. False if the asset was not in the cache.</returns>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.GetId(System.String,System.Boolean)">
            <summary>
            Gets an asset id from an asset path or name. If there is more than one asset with the same name, logs a
            warning and returns zero.
            </summary>
            <param name="pathOrName">Asset path or asset name.</param>
            <param name="fullPathOnly">If true, will only try to get the asset id by asset path.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.GetPath(System.UInt32)">
            <summary>Gets an asset path from an asset id.</summary>
            <param name="assetId">Asset id</param>
            <returns>Asset path, or null if there is no asset with that id.</returns>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.MapNameToId(System.String,System.UInt32)">
            <summary>Adds a mapping between an asset name and an asset id.</summary>
            <param name="name">Asset name</param>
            <param name="id">Asset id</param>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.GetCached(System.UInt32)">
            <summary>Gets an asset from the cache.</summary>
            <param name="assetId">Asset id</param>
            <returns>The asset, or null if it was not in the cache.</returns>
        </member>
        <member name="M:KS.Reactor.ksBaseAssetLoader.CacheAsset(System.UInt32,KS.Reactor.ksScriptAsset)">
            <summary>Adds an asset to the cache and sets its id and path.</summary>
            <param name="assetId">Asset id. There must be an associated asset path in <see cref="F:KS.Reactor.ksBaseAssetLoader.m_paths"/>.</param>
            <param name="asset">Asset to cache.</param>
        </member>
        <member name="T:KS.Reactor.ksBitIStream">
            <summary>Bit stream writer</summary>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.#ctor(System.Collections.Generic.IList{System.Byte})">
            <summary>Constructor</summary>
            <param name="data">data to read from.</param>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadBits(System.Int32)">
            <summary>Reads up to 32 bits from the buffer.</summary>
            <param name="bits">Number of bits to read.</param>
            <returns>Value</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadBits64(System.Int32)">
            <summary>Reads up to 64 bits from the buffer.</summary>
            <param name="bits">Number of bits to read.</param>
            <returns>Value</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadBits(System.UInt32@,System.Int32)">
            <summary>Reads up to 32 bits from the buffer.</summary>
            <param name="output">Output to write value to.</param>
            <param name="bits">Number of bits to read.</param>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadBits64(System.UInt64@,System.Int32)">
            <summary>Reads up to 64 bits from the buffer.</summary>
            <param name="output">Output to write value to.</param>
            <param name="bits">Number of bits to read.</param>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadEncodedUInt">
            <summary>Reads a uint.</summary>
            <returns>Value.</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadEncodedInt">
            <summary>Reads an int converted from a uint.</summary>
            <returns>Value.</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadEncodedULong">
            <summary>Reads a ulong.V</summary>
            <returns>Value.</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadEncodedLong">
            <summary>Reads a long converted from a ulong.</summary>
            <returns>Value.</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadEncodedString">
            <summary>Reads a string.</summary>
            <returns>Value.</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.ReadMultiType">
            <summary>Reads a multi type.</summary>
            <returns>Value.</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.Align">
            <summary>Advances the position to the next byte if the position is not at a byte boundary.</summary>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.SeekOffset(System.Int32)">
            <summary>Adds an offset to the current position.</summary>
            <param name="offset">Offset to add in bytes.</param>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.Seek(System.Int32)">
            <summary>Seeks to a byte position.</summary>
            <param name="position">Position to seek to.</param>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.SeekBit(System.Int32)">
            <summary>Seeks to a bit position.</summary>
            <param name="bit">Bit to seek to.</param>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.GetPosition">
            <summary>Gets tje current byte position.</summary>
            <returns>Current byte position.</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.GetBitPosition">
            <summary>Gets the current bit position.</summary>
            <returns>Current bit position.</returns>
        </member>
        <member name="M:KS.Reactor.ksBitIStream.GetRemaining">
            <summary>Gets the number of bytes in the buffer after the current position.</summary>
            <returns>Number of bytes in the buffer after the current position.</returns>
        </member>
        <member name="T:KS.Reactor.ksBitOStream">
            Bit stream reader
        </member>
        <member name="M:KS.Reactor.ksBitOStream.#ctor(System.Collections.Generic.List{System.Byte})">
            Constructor
            
            @param   buffer to write to.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.WriteBits(System.UInt32,System.Int32)">
            Writes up to 32 bits into the buffer.
            
            @param   uint input to write bits from.
            @param   int bits - number of bits from input to write.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.WriteBits64(System.UInt64,System.Int32)">
            Writes up to 64 bits into the buffer.
            
            @param   ulong input to write bits from.
            @param   int bits - number of bits from input to write.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.WriteEncodedValue(System.UInt32)">
            Writes a uint.
            
            @param   uint input to write.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.WriteEncodedValue(System.Int32)">
            Writes an int converted to a uint.
            
            @param   int input to write.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.WriteEncodedValue(System.UInt64)">
            Writes a ulong.
            
            @param   ulong input to write.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.WriteEncodedValue(System.Int64)">
            Writes a long converted to a ulong.
            
            @param   long input to write.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.WriteEncodedValue(System.String)">
            Writes a string. Serializes null as empty string.
            
            @param   string input to write.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.WriteMultiType(KS.Reactor.ksMultiType)">
            Writes a multitype.
            
            @param   ksMultiType input to write.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.Align">
            Advances the position to the next byte if the position is not at a byte boundary.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.SeekOffset(System.Int32)">
            Adds an offset to the current position.
            
            @param   offset to add in bytes.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.Seek(System.Int32)">
            Seeks to a byte position.
             
            @param   position to seek to.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.SeekBit(System.Int32)">
            Seeks to a bit position.
            
            @param   bit to seek to.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.GetPosition">
            @return  current byte position.
        </member>
        <member name="M:KS.Reactor.ksBitOStream.GetBitPosition">
            @return  current bit position.
        </member>
        <member name="T:KS.Reactor.ksBounds">
            <summary>A struct that defines an axis aligned bounding box (AABB).</summary>
            <summary>A struct that defines an axis aligned bounding box (AABB).</summary>
        </member>
        <member name="M:KS.Reactor.ksBounds.#ctor(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Constructor.</summary>
            <param name="min">Min value.</param>
            <param name="max">Max value.</param>
        </member>
        <member name="P:KS.Reactor.ksBounds.Min">
            <summary>
            Get/Set the minimum coordinates contained by the bounds.
            The max value of the bounds will extend to accomodate the new min value when it
            contains larger values than the current max values.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksBounds.Max">
            <summary>
            Get the maxmimum coordinates contained by the bounds.
            The min value of the bounds will extend to accomodate the new max value when it is
            contains smaller values than the current min values.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksBounds.Size">
            <summary>
            Get/Set the size of the bounds.
            The new size will recalculate the min and max values from the existing bounds center.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksBounds.Center">
            <summary>
            Get/Set the center of the bounds
            </summary>
        </member>
        <member name="P:KS.Reactor.ksBounds.IsEmpty">
            <summary>
            The bounds are empty if any of the size dimensions are less than or equal to 0.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksBounds.Contains(KS.Reactor.ksVector3)">
            <summary>
            Check if a point is contained by the bounds.
            </summary>
            <param name="point">Point to test.</param>
            <returns>True if the point is contained or on the edge of the bounds.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.Contains(KS.Reactor.ksBounds)">
            <summary>
            Check if another set of bounds is contained by the bounds.
            </summary>
            <param name="bounds">Bounds to test.</param>
            <returns>True if the other bounds are contained.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.Intersects(KS.Reactor.ksBounds)">
            <summary>
            Check if another bounds intersects this bounds.
            </summary>
            <param name="bounds">Bounds to test against.</param>
            <returns>True if the bounds overlap.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.Encapsulate(KS.Reactor.ksVector3)">
            <summary>
            Expand the volume to include a point.
            </summary>
            <param name="point">Point to encapsulate.</param>
        </member>
        <member name="M:KS.Reactor.ksBounds.Encapsulate(KS.Reactor.ksBounds)">
            <summary>
            Expand the volume to include another set of bounds.
            </summary>
            <param name="bounds">Bounds to encapsulate.</param>
        </member>
        <member name="M:KS.Reactor.ksBounds.op_Equality(KS.Reactor.ksBounds,KS.Reactor.ksBounds)">
            <summary>Check if two bounds are equal</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the bounds have the same min and max values.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.op_Inequality(KS.Reactor.ksBounds,KS.Reactor.ksBounds)">
            <summary>Check if two bounds are not equal</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the bounds have different min or max values.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.Equals(KS.Reactor.ksBounds)">
            <summary>Check if this bounds is equal to another bounds.</summary>
            <param name="other">Other bounds to compare with this bounds.</param>
            <returns>True if the bounds have the same min and max values.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.Equals(System.Object)">
            <summary>Check if this bounds is equal to an object.</summary>
            <param name="other">Object to compare with this bounds.</param>
            <returns>True if the object is a <see cref="T:KS.Reactor.ksBounds"/> and they have the same min and max values.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.GetHashCode">
            <summary>Get the hash code for the bounds.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.ToString">
            <summary>Construct a string the describes the bounds.</summary>
            <returns>String describing the min and max coordinates of the bounds.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.op_Implicit(KS.Reactor.ksBounds)~UnityEngine.Bounds">
            <summary>
            Implicit conversion from ksBounds to Unity Bounds.
            </summary>
            <param name="value">Reactor bounds to convert to Unity bounds.</param>
        </member>
        <member name="M:KS.Reactor.ksBounds.op_Implicit(UnityEngine.Bounds)~KS.Reactor.ksBounds">
            <summary>
            Implicit conversion from Unity Bounds to ksBounds.
            </summary>
            <param name="value">Unity bounds to convert to Reactor bounds</param>
        </member>
        <member name="M:KS.Reactor.ksBounds.op_Equality(KS.Reactor.ksBounds,UnityEngine.Bounds)">
            <summary>
            Equality comparison between Reactor bounds and Unity bounds.
            </summary>
            <param name="lhs">Reactor bounds</param>
            <param name="rhs">Unity bounds</param>
            <returns>True if the bounds are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.op_Equality(UnityEngine.Bounds,KS.Reactor.ksBounds)">
            <summary>
            Equality comparison between Unity bounds and Reactor bounds.
            </summary>
            <param name="lhs">Unity bounds</param>
            <param name="rhs">Reactor bounds</param>
            <returns>True if the bounds are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.op_Inequality(KS.Reactor.ksBounds,UnityEngine.Bounds)">
            <summary>
            Inequality comparison between Reactor bounds and Unity bounds.
            </summary>
            <param name="lhs">Reactor bounds</param>
            <param name="rhs">Unity bounds</param>
            <returns>True if the bounds are not equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksBounds.op_Inequality(UnityEngine.Bounds,KS.Reactor.ksBounds)">
            <summary>
            Inequality comparison between Unity bounds and Reactor bounds.
            </summary>
            <param name="lhs">Unity bounds</param>
            <param name="rhs">Reactor bounds</param>
            <returns>True if the bounds are not equal.</returns>
        </member>
        <member name="T:KS.Reactor.ksIBufferable">
            <summary>
            Interface required by objects that should be written to, and read from, the ksOutputBuffers and ksInputBufers.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksInputBuffer">
            <summary>This input buffer reads data written to a byte array by a ksOutputBuffer.</summary>
        </member>
        <member name="P:KS.Reactor.ksInputBuffer.EndOfData">
            <summary>Check if the internal position has reached the end of the buffer.</summary>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.#ctor(System.Byte[])">
            <summary>Construct an input buffer from a byte array.</summary>
            <param name="data">Data source.</param>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.Reset">
            <summary>Reset the internal position to the beginning of the array.</summary>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetBytes(System.Int32)">
            <summary>Gets bytes from the buffer.</summary>
            <param name="length">Length of byte array to get.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.Get``1">
            <summary>Gets a struct of type T from the buffer.</summary>
            <typeparam name="T"></typeparam>
            <returns>Struct value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetBool">
            <summary>Gets a bool from the buffer.</summary>
            <returns>Bool value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetByte">
            <summary>Gets a byte from the buffer.</summary>
            <returns>Byte value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetChar">
            <summary>Gets a char from the buffer.</summary>
            <returns>Char value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetShort">
            <summary>Gets a short from the buffer.</summary>
            <returns>Short value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetUShort">
            <summary>Gets a ushort from the buffer.</summary>
            <returns>Ushort value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetInt">
            <summary>Gets an int from the buffer.</summary>
            <returns>Int value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetUInt">
            <summary>Gets a uint from the buffer.</summary>
            <returns>Uint value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetLong">
            <summary>Gets a long from the buffer.</summary>
            <returns>Long value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetULong">
            <summary>Gets a ulong from the buffer.</summary>
            <returns>Ulong value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetFloat">
            <summary>Gets a float from the buffer.</summary>
            <returns>Float value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetDouble">
            <summary>Gets a double from the buffer.</summary>
            <returns>Double value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetString">
            <summary>Gets a string from the buffer.</summary>
            <returns>String value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetBoolArray">
            <summary>Get an array of bools from the buffer.</summary>
            <returns>Bool array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetByteArray">
            <summary>Get an array of bytes from the buffer.</summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetCharArray">
            <summary>Get an array of chars from the buffer.</summary>
            <returns>Char array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetShortArray">
            <summary>Get an array of shorts from the buffer.</summary>
            <returns>Short array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetUShortArray">
            <summary>Get an array of ushorts from the buffer.</summary>
            <returns>Ushort array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetIntArray">
            <summary>Get an array of ints from the buffer.</summary>
            <returns>Int array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetUIntArray">
            <summary>Get an array of uints from the buffer.</summary>
            <returns>Uint array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetLongArray">
            <summary>Get an array of longs from the buffer.</summary>
            <returns>Long array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetULongArray">
            <summary>Get an array of ulongs from the buffer.</summary>
            <returns>Ulong array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetFloatArray">
            <summary>Get an array of floats from the buffer.</summary>
            <returns>Float array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetDoubleArray">
            <summary>Get an array of doubles from the buffer.</summary>
            <returns>Double array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetStringArray">
            <summary>Get an array of strings from the buffer.</summary>
            <returns>String array.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetBufferable``1">
            <summary>Get a ksIBufferable object from the buffer.</summary>
            <returns>ksIBufferable object.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetMultiType">
            <summary>Get a ksMultitype from the buffer.</summary>
            <returns>ksMultitype value.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputBuffer.GetArray``1(System.Int32)">
            <summary>Get an array of primitive types from the buffer.</summary>
            <typeparam name="T"></typeparam>
            <param name="sizeOf">Size of type.</param>
            <returns>Array.</returns>
        </member>
        <member name="T:KS.Reactor.ksOutputBuffer">
            <summary>
            This output buffer converts each written element into one or two byte arrays and adds them to a list.
            When the output is requested, by calls to GetBytes() or Flush(), the list of byte arrays is copied to
            a single byte array. This approach is significatly faster for large amounts of data when compared to using
            memory streams or resizing an array for each write operation.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksOutputBuffer.Subbuffers">
            <summary>Gets the list of subbuffers(byte[]) that make up the buffer.</summary>
        </member>
        <member name="P:KS.Reactor.ksOutputBuffer.Length">
            <summary>Gets the current byte length of the buffer.</summary>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.WriteBytes(System.Byte[])">
            <summary>Writes bytes to the buffer.</summary>
            <param name="bytes">Bytes to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Boolean)">
            <summary>Writes a bool to the buffer.</summary>
            <param name="value">Bool to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write``1(``0)">
            <summary>Writes a struct of type T to the buffer.</summary>
            <typeparam name="T"></typeparam>
            <param name="value">Struct to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Byte)">
            <summary>Writes a byte to the buffer.</summary>
            <param name="value">Byte to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Char)">
            <summary>Writes a char to the buffer.</summary>
            <param name="value">Char to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Int16)">
            <summary>Writes a short to the buffer.</summary>
            <param name="value">Short to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.UInt16)">
            <summary>Writes a ushort to the buffer.</summary>
            <param name="value">Ushort to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Int32)">
            <summary>Writes a int to the buffer.</summary>
            <param name="value">Int to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.UInt32)">
            <summary>Writes a uint to the buffer.</summary>
            <param name="value">Uint to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Int64)">
            <summary>Writes a long to the buffer.</summary>
            <param name="value">Long to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.UInt64)">
            <summary>Writes a ulong to the buffer.</summary>
            <param name="value">Ulong to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Single)">
            <summary>Writes a float to the buffer.</summary>
            <param name="value">Float to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Double)">
            <summary>Writes a double to the buffer.</summary>
            <param name="value">Double to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.String)">
            <summary>Writes a string to the buffer.</summary>
            <param name="value">String to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Boolean[])">
            <summary>
            Writes an array of bools to the buffer. Values are first converted to a bit array before writing.
            If the array is null, then a length of -1 is written.
            </summary>
            <param name="value">Bool array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the buffer.
            </summary>
            <param name="value">Byte array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Char[])">
            <summary>
            Writes an array of chars to the buffer.
            </summary>
            <param name="value">Char array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Int16[])">
            <summary>
            Writes an array of shorts to the buffer.
            </summary>
            <param name="value">Short array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.UInt16[])">
            <summary>
            Writes an array of ushort to the buffer.
            </summary>
            <param name="value">Ushort array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Int32[])">
            <summary>
            Writes an array of ints to the buffer.
            </summary>
            <param name="value">Int array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.UInt32[])">
            <summary>
            Writes an array of uints to the buffer.
            </summary>
            <param name="value">Uint array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Int64[])">
            <summary>
            Writes an array of longs to the buffer.
            </summary>
            <param name="value">Long array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.UInt64[])">
            <summary>
            Write an array of ulongs to the buffer.
            </summary>
            <param name="value">Ulong array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Single[])">
            <summary>
            Writes an array of floats to the buffer.
            </summary>
            <param name="value">Float array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Double[])">
            <summary>
            Writes an array of doubles to the buffer.
            </summary>
            <param name="value">Double array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.String[])">
            <summary>
            Writes an array of strings to the buffer. Writes the length of the array followed by each string.
            If the array is null, then a length of -1 is written.
            </summary>
            <param name="value">String array to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(KS.Reactor.ksOutputBuffer)">
            <summary>Appends the contents of another output buffer.</summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(KS.Reactor.ksIBufferable)">
            <summary>
            Writes the bytes of an object that implemented ksIBufferable.
            If the object is null write a length value of -1.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.ksOutputBuffer.Write(KS.Reactor.ksMultiType)" -->
        <member name="M:KS.Reactor.ksOutputBuffer.Clear">
            <summary>Clears the buffer.</summary>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.GetBytes">
            <summary>Copies and returns the contents of the buffer as a single byte array.</summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Flush">
            <summary>Gets the buffer bytes then clear the buffer.</summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:KS.Reactor.ksOutputBuffer.Write(System.Array,System.Int32)">
            <summary>
            Writes an array of primitives to the buffer. This writes the number of elements in the array followed by a
            single byte array from an block copy. If the array is null, then a length of -1 is written.
            </summary>
            <param name="value">Array object to write.</param>
            <param name="sizeOf">Size of data type in bytes</param>
        </member>
        <member name="T:KS.Reactor.ksCharacterControllerColliderHit">
            <summary>
            This class is used by <see cref="E:KS.Reactor.ksICharacterController.OnColliderHit"/> to give information about the
            collision.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksCharacterControllerColliderHit.Collider">
            <summary>The collider that was hit by the controller.</summary>
        </member>
        <member name="P:KS.Reactor.ksCharacterControllerColliderHit.Point">
            <summary>The impact point in world space.</summary>
        </member>
        <member name="P:KS.Reactor.ksCharacterControllerColliderHit.Normal">
            <summary>The normal of the surface the controller collided with in world space.</summary>
        </member>
        <member name="P:KS.Reactor.ksCharacterControllerColliderHit.MoveDirection">
            <summary>The direction the CharacterController was moving in when the collision occured.</summary>
        </member>
        <member name="P:KS.Reactor.ksCharacterControllerColliderHit.MoveLength">
            <summary>How far the character travelled until it hit the collider.</summary>
        </member>
        <member name="M:KS.Reactor.ksCharacterControllerColliderHit.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksCharacterControllerColliderHit.#ctor(KS.Reactor.ksICollider,KS.Reactor.ksVector3,KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="hitCollider">Collider hit by the character controller.</param>
            <param name="point">The impact point in world space.</param>
            <param name="normal">The normal of the surface the controller collided with in world space.</param>
            <param name="moveDirection">
            The direction the CharacterController was moving in when the collision occured.
            </param>
            <param name="moveLength">How far the character travelled until it hit the collider.</param>
        </member>
        <member name="T:KS.Reactor.ksCharacterControllerCollisionFlags">
            <summary>CollisionFlags is a bitmask returned by character controller's Move method.</summary>
        </member>
        <member name="T:KS.Reactor.ksCharacterControllerEvents">
            Contains event handler delegates for the character controller.
        </member>
        <member name="T:KS.Reactor.ksCharacterControllerEvents.ColliderHitHandler">
            Character controller collider hit event handler.
            
            @param   ksCharacterControllerColliderHit hit data for the collision.
        </member>
        <member name="T:KS.Reactor.ksCloneableAttribute">
            <summary>
            Tags non-editable fields and properties in server scripts to make them copy when the script is cloned.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksClusterProperty">
            <summary>
            A hierarchy of dictionary objects that store hierarchy-type and value-type cluster properties.
            Properties can be accessed from any level of the property hierarchy by providing a path (a list of keys
            joined by the path separator '.')
            </summary>
        </member>
        <member name="T:KS.Reactor.ksClusterProperty.ActionTypes">
            <summary>Types of actions to perform on cluster properties.  Used by the property event handlers.</summary>
        </member>
        <member name="T:KS.Reactor.ksClusterProperty.ReadCache">
            <summary>Read cache enum.</summary>
        </member>
        <member name="T:KS.Reactor.ksClusterProperty.WriteCache">
            <summary>Write cache enum.</summary>
        </member>
        <member name="T:KS.Reactor.ksClusterProperty.DeleteCache">
            <summary>Delete cache enum.</summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.Key">
            <summary>Get the property key.</summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.Expiry">
            <summary>Expiry.</summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.IsPersistent">
            <summary>Is this a persistent property?</summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.Path">
            <summary>Gets the property path.</summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.HasValue">
            <summary>Checks if a value has been assigned to this cluster property.</summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.Parent">
            <summary>Gets the parent property.</summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.Children">
            <summary>Gets the children of this property.</summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.Value">
            <summary>Gets the property value.</summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.Item(System.String)">
            <summary>
            Gets a cluster property. A null value is returned if a property does not exist at the end of the path.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksClusterProperty.ChildCount">
            <summary>Number children this property has.</summary>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.#ctor(System.String,KS.Reactor.ksMultiType)">
            <summary>Constructor.</summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.Update(KS.Reactor.ksClusterProperty)">
            <summary>
            Updates this property using the data from another property. After updating, increments the update count.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.GetProperty(System.String)">
            <summary>
            Fetch a property from the hierarchy below this property. Properties can be accessed from any level of the
            property hierarchy by providing a path (a list of keys joined by the path separator '/')
            </summary>
            <param name="path"></param>
            <returns>Property or null if no property found.</returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.GetProperty(System.String[],System.Int32)">
            <summary>Fetches a property from the hierarchy below this property.</summary>
            <param name="keys">List of keys.</param>
            <param name="depth">Iteration depth.</param>
            <returns>Property or null if no property found.</returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.SetProperty(KS.Reactor.ksClusterProperty)">
            <summary>
            Adds or updates a property in the hierarchy below this property. The provided property's key will be parsed
            as the path to the property to update.
            </summary>
            <param name="property">Property to set.</param>
            <returns>Set property or null if no property was removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.SetProperty(System.String,KS.Reactor.ksClusterProperty)">
            <summary>
            Adds or updates a property in the hierarchy below this property. Properties can be accessed from any level
            of the property hierarchy by providing a path (a list of keys joined by the path separator '/')
            </summary>
            <param name="path"></param>
            <param name="property">Property to set.</param>
            <returns>Set property or null if no property was removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.ParsePath(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Parses a property path into a list of strings and tracks the depth of the first object separator.
            </summary>
            <param name="path"></param>
            <param name="keys"></param>
            <returns>True if the path could be parsed.</returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.SetProperty(System.Collections.Generic.List{System.String},KS.Reactor.ksClusterProperty,System.Int32)">
            <summary>Adds or updates a property in the hierarchy below this property.</summary>
            <param name="keys">List of keys.</param>
            <param name="property">Property to set.</param>
            <param name="depth">Iteration depth.</param>
            <returns>Set property or null if no property was removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.RemoveProperty(System.String)">
            <summary>
            Removes a property from the hierarchy below this property. Properties can be accessed from any level of the
            property hierarchy by providing a path (a list of keys joined by the path separator '/')
            </summary>
            <param name="path"></param>
            <returns>Removed property or null if no property was removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.RemoveProperty(System.String[],System.Int32)">
            <summary>Removes a property from the hierarchy below this property.</summary>
            <param name="keys">List of keys.</param>
            <param name="depth">Iteration depths.</param>
            <returns>Removed property or null if no property was removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.Prune">
            <summary>Removes all branches that do not contain value children</summary>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.ForEachChild">
            <summary>Iterates each child of this property.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.ForEachDescendant">
            <summary>Iterates each descendant of this property.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksClusterProperty.ForEachAncestor">
            <summary>Iterates each ancestor of this property.</summary>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksClusterRPCAttribute">
            <summary>Attribute used to mark cluster RPC handlers on room and entity scripts.</summary>
        </member>
        <member name="M:KS.Reactor.ksClusterRPCAttribute.#ctor(System.UInt32,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="id">RPC ID</param>
            <param name="executeOnMainThread">When true, the RPC will be excuted on the main thread.</param>
        </member>
        <member name="T:KS.Reactor.ksCollisionFilter">
            <summary>
            The collsion filter uses 3 mask properties (Group, Notify, Collide) to determine interaction and notifications
            during the physics simulation. This class is immutable.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksCollisionFilter.Default">
            <summary>
            The default collision filter. Setting this to a new instance will not affect any existing colliders using
            the old default filter, but will change the filter used by new colliders that don't have a filter
            assigned.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksCollisionFilter.Group">
            <summary>Groups that this filter belongs to.</summary>
        </member>
        <member name="P:KS.Reactor.ksCollisionFilter.Notify">
            <summary>Groups that this filter reports collision and overlap events with.</summary>
        </member>
        <member name="P:KS.Reactor.ksCollisionFilter.Collide">
            <summary>Groups that this filter will simulate collisions with.</summary>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.#ctor">
            <summary>Constructor. Belongs to all groups, collides with all groups, and notifies with none.</summary>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>Constructor</summary>
            <param name="group">Groups that this filter belongs to.</param>
            <param name="notify">Groups that this filter reports collision and overlap events with.</param>
            <param name="collide">Groups that this filter will simulate collisions with.</param>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.WithGroup(System.UInt32)">
            <summary>Creates a copy of this filter with <see cref="P:KS.Reactor.ksCollisionFilter.Group"/> set to <paramref name="group"/>.</summary>
            <param name="group">Group to set on the copy.</param>
            <returns>Copied filter with a different <see cref="P:KS.Reactor.ksCollisionFilter.Group"/>.</returns>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.WithNotify(System.UInt32)">
            <summary>
            Creates a copy of this filter with <see cref="P:KS.Reactor.ksCollisionFilter.Notify"/> set to <paramref name="notify"/>.
            </summary>
            <param name="notify">Notify to set on the copy.</param>
            <returns>Copied filter with a different <see cref="P:KS.Reactor.ksCollisionFilter.Notify"/>.</returns>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.WithCollide(System.UInt32)">
            <summary>
            Creates a copy of this filter with <see cref="P:KS.Reactor.ksCollisionFilter.Collide"/> set to <paramref name="collide"/>.
            </summary>
            <param name="collide">Collide to set on the copy.</param>
            <returns>Copied filter with a different <see cref="P:KS.Reactor.ksCollisionFilter.Collide"/>.</returns>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.ToString">
            <summary>Converts the collision filter to a string.</summary>
            <returns>The filter converted to a string.</returns>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.op_Equality(KS.Reactor.ksCollisionFilter,KS.Reactor.ksCollisionFilter)">
            <summary>
            Checks if two collision filters are equal.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the collision filters are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.op_Inequality(KS.Reactor.ksCollisionFilter,KS.Reactor.ksCollisionFilter)">
            <summary>
            Checks if two collision filters are not equal.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the collision filters are not equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.Equals(System.Object)">
            <summary>
            Checks if this collision filter is equal to an object.
            </summary>
            <param name="obj"></param>
            <returns>True if this collision filter is equal to the object.</returns>
        </member>
        <member name="M:KS.Reactor.ksCollisionFilter.GetHashCode">
            <summary> Gets a hash code from this collision filter.</summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:KS.Reactor.ksColor">
            <summary>
            Partial ksColor struct. This part is the major part that contains members that does not depend on UnityEngine.
            </summary>
            Patial ksColor struct. This part contains methods that support operations between ksColor and UnityEngine.Color.
        </member>
        <member name="M:KS.Reactor.ksColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Constructor.</summary>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
            <param name="a">Alpha value.</param>
        </member>
        <member name="M:KS.Reactor.ksColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>Constructor that takes 3 floats and set a to 1.0f.</summary>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
        </member>
        <member name="M:KS.Reactor.ksColor.#ctor(KS.Reactor.ksVector3)">
            <summary>Constructor that takes a ksVector3 and set a to 1.0f.</summary>
            <param name="rgb">Red, green and blue values.</param>
        </member>
        <member name="M:KS.Reactor.ksColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Constructor.</summary>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
            <param name="a">Alpha value.</param>
        </member>
        <member name="M:KS.Reactor.ksColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>Constructor that takes 3 floats and set a to 1.0f.</summary>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
        </member>
        <member name="M:KS.Reactor.ksColor.#ctor(System.String)">
            <summary>
            Constructor with a string that contains a hex number.
            Its format must be one of "#RRGGBB", "RRGGBB", "#RRGGBBAA" or "RRGGBBAA".
            </summary>
            <param name="hex">Hex string.</param>
        </member>
        <member name="M:KS.Reactor.ksColor.#ctor(System.UInt32)">
            <summary>Constructor with a uint.</summary>
            <param name="color">
            First byte (most significant byte) represents r.
            Second byte represents g.
            Third byte represents b.
            Last byte represents a.
            </param>
        </member>
        <member name="P:KS.Reactor.ksColor.White">
            <summary>White (1f, 1f, 1f, 1f)</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.Black">
            <summary>Black (0f, 0f, 0f, 1f)</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.Zero">
            <summary>Zero (0f, 0f, 0f, 0f)</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.Red">
            <summary>Red (1f, 0f, 0f, 1f)</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.Green">
            <summary>Green (0f, 1f, 0f, 1f)</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.Blue">
            <summary>Blue (0f, 0f, 1f, 1f)</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.Yellow">
            <summary>Yellow (1f, 1f, 0f, 1f)</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.Cyan">
            <summary>Cyan (0f, 1f, 1f, 1f)</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.Magenta">
            <summary>Magenta (1f, 0f, 1f, 1f)</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.Gray">
            <summary>Gray (0.5f, 0.5f, 0.5f, 1f)</summary>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Implicit(KS.Reactor.ksColor)~System.Single[]">
            <summary>Implicit conversion from ksColor to float[4]. </summary>
            <param name="value">ksColor value.</param>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Implicit(System.Single[])~KS.Reactor.ksColor">
            <summary>Implicit conversion from float[] to ksColor.</summary>
            <param name="value">Float array value.</param>
        </member>
        <member name="P:KS.Reactor.ksColor.R">
            <summary>Red value.</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.G">
            <summary>Green value.</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.B">
            <summary>Blue value.</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.A">
            <summary>Alpha value.</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.RByte">
            <summary>Red byte value.</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.GByte">
            <summary>Green byte value.</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.BByte">
            <summary>Red byte value.</summary>
        </member>
        <member name="P:KS.Reactor.ksColor.AByte">
            <summary>Red byte value.</summary>
        </member>
        <member name="M:KS.Reactor.ksColor.Luma">
            <summary>Gets the luma value of this color.</summary>
            <returns>Luma value of this color.</returns>
        </member>
        <member name="P:KS.Reactor.ksColor.Item(System.Int32)">
            <summary>Indexer.</summary>
            <param name="index"></param>
            <returns>Value at the given index.</returns>
        </member>
        <member name="M:KS.Reactor.ksColor.FromHSV(System.Single,System.Single,System.Single)">
            <summary>Gets RGB color from HSV values.</summary>
            <param name="h">Hue value.</param>
            <param name="s">Saturation value.</param>
            <param name="v">Brightness value.</param>
            <returns>ksColor value.</returns>
        </member>
        <member name="M:KS.Reactor.ksColor.ToHexString(System.Boolean)">
            <summary>Gets the hex number string that represents this color.</summary>
            <param name="withAlpha">Includes alpha value if true.</param>
            <returns>Hex string.</returns>
        </member>
        <member name="M:KS.Reactor.ksColor.ToUInt">
            <summary>Returns a uint that represents this color.</summary>
            <returns>
            First byte (most significant byte) represents the red value.
            Second byte represents the green value.
            Third byte represents the blue value.
            Last byte represents the alpha value.
            </returns>
        </member>
        <member name="M:KS.Reactor.ksColor.Max(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            <summary>Returns a color with max RGBA values of lhs and rhs.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.Min(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            <summary>Returns a color with min RGBA values of lhs and rhs.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.Lerp(KS.Reactor.ksColor,KS.Reactor.ksColor,System.Single)">
            <summary>Linearly interpolates between colors lhs and rhs by t.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.MoveTowards(KS.Reactor.ksColor,KS.Reactor.ksColor,System.Single)">
            <summary>Moves a color towards a target color.</summary>
            <param name="start">Start color.</param>
            <param name="target">Target to move towards.</param>
            <param name="delta">
            Distance to move. It will not overshoot the target. Negative values will move away from the target.
            </param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.ksColor.Magnitude" -->
        <member name="M:KS.Reactor.ksColor.Clamp(System.Single,System.Single)">
            <summary>Clamps RGBA values to be between min and max.</summary>
            <param name="min">Min value.</param>
            <param name="max">Max value.</param>
        </member>
        <member name="M:KS.Reactor.ksColor.Clamped(System.Single,System.Single)">
            <summary>Returns clamped color.</summary>
            <param name="min">Min value.</param>
            <param name="max">Max value.</param>
            <returns>Clamped color.</returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Implicit(KS.Reactor.ksVector3)~KS.Reactor.ksColor">
            <summary>Implicitly converts ksVector3 to ksColor.</summary>
            <param name="vector"></param>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Implicit(KS.Reactor.ksColor)~KS.Reactor.ksVector3">
            <summary>Implicitly converts ksColor to ksVector3.</summary>
            <param name="color"></param>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Addition(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            <summary>Componentwise addition.</summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Subtraction(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            <summary>Componentwise subtraction.</summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Multiply(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            <summary>Componentwise multiplication.</summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Multiply(KS.Reactor.ksColor,System.Single)">
            <summary>Multiplies each component of color by scale.</summary>
            <param name="color"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Multiply(System.Single,KS.Reactor.ksColor)">
            <summary>Multiplies each component of color by scale.</summary>
            <param name="scale"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Division(KS.Reactor.ksColor,System.Single)">
            <summary>Divides each component of color by scale.</summary>
            <param name="color"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_UnaryNegation(KS.Reactor.ksColor)">
            <summary>Multipleis each component with -1f.</summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Equality(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            <summary>Equality comparison of color1 and color2.</summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Inequality(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            <summary>Inequality comparison of color1 and color2.</summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.ksColor.Equals(System.Object)" -->
        <member name="M:KS.Reactor.ksColor.Equals(KS.Reactor.ksColor)">
            <summary>Checks if this color is equal to another.</summary>
            <param name="other">Other color to compare with.</param>
            <returns>True if the colors are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksColor.ToString">
            <summary>Returns a string that represents the current ksColor.</summary>
            <returns>A string that represents the current ksColor.</returns>
        </member>
        <member name="M:KS.Reactor.ksColor.ToString(System.String)">
            <summary>Returns a string respresentation of the ksColor.</summary>
            <param name="format">Format.</param>
            <returns>String representation of the ksColor.</returns>
        </member>
        <member name="M:KS.Reactor.ksColor.ToString(System.IFormatProvider)">
            <summary>Returns a string respresentation of the ksColor.</summary>
            <param name="provider">Provider.</param>
            <returns>String representation of the ksColor.</returns>
        </member>
        <member name="M:KS.Reactor.ksColor.GetHashCode">
            <summary>Gets the hash code for this color.</summary>
            <returns>Hash code for this color.</returns>
        </member>
        <member name="M:KS.Reactor.ksColor.op_Implicit(KS.Reactor.ksColor)~UnityEngine.Color">
            Implicit conversion from ksColor to Unity Color.
            
            @param   ksColor value
        </member>
        <member name="M:KS.Reactor.ksColor.op_Implicit(UnityEngine.Color)~KS.Reactor.ksColor">
            Implicit conversion from Unity Color to ksColor.
             
            @param   Color value
        </member>
        <member name="M:KS.Reactor.ksColor.op_Addition(KS.Reactor.ksColor,UnityEngine.Color)">
            Color addition with ksColor and Unity Color.
            
            @param   ksColor lhs
            @param   Color rhs
            @return  ksColor lhs + rhs
        </member>
        <member name="M:KS.Reactor.ksColor.op_Addition(UnityEngine.Color,KS.Reactor.ksColor)">
            Color addition with Unity Color and ksColor.
            
            @param   Color lhs
            @param   ksColor rhs
            @return  Color lhs + rhs
        </member>
        <member name="M:KS.Reactor.ksColor.op_Subtraction(KS.Reactor.ksColor,UnityEngine.Color)">
            Color subtraction with ksColor and Unity Color.
            
            @param   ksColor lhs
            @param   Color rhs
            @return  ksColor lhs - rhs
        </member>
        <member name="M:KS.Reactor.ksColor.op_Subtraction(UnityEngine.Color,KS.Reactor.ksColor)">
            Color subtraction with Unity Color and ksColor.
            
            @param   Color lhs
            @param   ksColor rhs
            @return  Color lhs - rhs
        </member>
        <member name="M:KS.Reactor.ksColor.op_Multiply(KS.Reactor.ksColor,UnityEngine.Color)">
            Color multiplication with ksColor and Unity Color.
            
            @param   ksColor lhs
            @param   Color rhs
            @return  ksColor lhs * rhs
        </member>
        <member name="M:KS.Reactor.ksColor.op_Multiply(UnityEngine.Color,KS.Reactor.ksColor)">
            Color multiplication with Unity Color and ksColor.
            
            @param   Color lhs
            @param   ksColor rhs
            @return  Color lhs * rhs
        </member>
        <member name="M:KS.Reactor.ksColor.op_Equality(KS.Reactor.ksColor,UnityEngine.Color)">
            Equality comparison with with ksColor and Unity Color.
            
            @param   ksColor lhs
            @param   Color rhs
            @return  bool lhs == rhs
        </member>
        <member name="M:KS.Reactor.ksColor.op_Equality(UnityEngine.Color,KS.Reactor.ksColor)">
            Equality comparison with Unity Color and ksColor.
            
            @param   Color lhs
            @param   ksColor rhs
            @return  bool lhs == rhs
        </member>
        <member name="M:KS.Reactor.ksColor.op_Inequality(KS.Reactor.ksColor,UnityEngine.Color)">
            Inequality comparison with with ksColor and Unity Color.
            
            @param   ksColor lhs
            @param   Color rhs
            @return  bool lhs != rhs
        </member>
        <member name="M:KS.Reactor.ksColor.op_Inequality(UnityEngine.Color,KS.Reactor.ksColor)">
            Inequality comparison with Unity Color and ksColor.
            
            @param   Color lhs
            @param   ksColor rhs
            @return  bool lhs != rhs
        </member>
        <member name="T:KS.Reactor.ksCompressionConstants">
            <summary>Defines compression related constants.</summary>
        </member>
        <member name="T:KS.Reactor.ksConstList`1">
            <summary>Wraps an IList and provides read-only access to it.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:KS.Reactor.ksConstList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>Constructor.</summary>
            <param name="list"></param>
        </member>
        <member name="P:KS.Reactor.ksConstList`1.Count">
            <summary>Number of elements in the list.</summary>
        </member>
        <member name="P:KS.Reactor.ksConstList`1.Item(System.Int32)">
            <summary>Access the list by index.</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksConstList`1.IndexOf(`0)">
            <summary>Finds the index of the first occurence of a value.</summary>
            <param name="value">Value to search for.</param>
            <returns>Index of the value, or -1 if the value was not found.</returns>
        </member>
        <member name="M:KS.Reactor.ksConstList`1.Contains(`0)">
            <summary>Checks if a value is in the list.</summary>
            <param name="value">Value to check for.</param>
            <returns>True if the value is in the list.</returns>
        </member>
        <member name="M:KS.Reactor.ksConstList`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the contents of the list to an array.</summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Array index to start copying to.</param>
        </member>
        <member name="M:KS.Reactor.ksConstList`1.GetEnumerator">
            <summary>Gets the enumerator for the list.</summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="M:KS.Reactor.ksConstList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator for the list.</summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="T:KS.Reactor.ksConstMap`2">
            <summary>Wraps a dictionary and provides read-only access to it.</summary>
            <typeparam name="Key"></typeparam>
            <typeparam name="Value"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksConstMap`2.Count">
            <summary>Number of entries in the map.</summary>
        </member>
        <member name="M:KS.Reactor.ksConstMap`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>Constructor.</summary>
            <param name="map"></param>
        </member>
        <member name="P:KS.Reactor.ksConstMap`2.Item(`0)">
            <summary>Gets a value from the map.</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksConstMap`2.Contains(`0)">
            <summary>Checks if a key is in the map.</summary>
            <param name="key">Key to check.</param>
            <returns>True if the key is in the map.</returns>
        </member>
        <member name="M:KS.Reactor.ksConstMap`2.TryGetValue(`0,`1@)">
            <summary>Tries to get a value from the map.</summary>
            <param name="key">Key to get value for.</param>
            <param name="value">Value for the key.</param>
            <returns>True if the key was found.</returns>
        </member>
        <member name="M:KS.Reactor.ksConstMap`2.GetEnumerator">
            <summary>Gets the enumerator for the map.</summary>
            <returns>Enumerator for the map.</returns>
        </member>
        <member name="M:KS.Reactor.ksConstMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator for the map.</summary>
            <returns>Enumerator for the map.</returns>
        </member>
        <member name="T:KS.Reactor.ksCoroutine">
            <summary>
            Wrapper for an IEnumerator function.  Each update frame, KSCoroutines started on a script will advance to the
            next return yield statement.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksCoroutine.IsPaused">
            <summary>Returns the paused state of this coroutine.</summary>
        </member>
        <member name="P:KS.Reactor.ksCoroutine.IsComplete">
            <summary>Returns true if the coroutine is complete.</summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutine.#ctor(System.Collections.IEnumerator)">
            <summary>Constructor.</summary>
            <param name="func">Coroutine function.</param>
        </member>
        <member name="M:KS.Reactor.ksCoroutine.Pause">
            <summary>Pauses processing of the coroutine.</summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutine.Resume">
            <summary>Resumes processing of the coroutine.</summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutine.Kill">
            <summary>Stops and destroy this coroutine.</summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutine.RunToEnd">
            <summary>Repeatedly calls the coroutine until it is complete.</summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutine.Step">
            <summary>Checks the coroutine stack, and process the top element.</summary>
            <returns>True if there is more work to do next frame, otherwise false.</returns>
        </member>
        <member name="T:KS.Reactor.ksCoroutineManager">
            <summary>
            Store and manage advancement of coroutines.
            
            Predefined Coroutines
                Sleep
            </summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutineManager.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutineManager.Initialize(KS.Reactor.ksTime)">
            <summary>Sets the ksTime object used for predefined coroutines.</summary>
            <param name="time">Script time.</param>
        </member>
        <member name="M:KS.Reactor.ksCoroutineManager.UpdateCoroutines">
            <summary>Advances all managed coroutines.</summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutineManager.Start(System.Collections.IEnumerator)">
            <summary>Creates a new coroutine from an IEnumerator function.</summary>
            <param name="routine">Function that will be processed once per frame.</param>
            <returns>ksCoroutine</returns>
        </member>
        <member name="M:KS.Reactor.ksCoroutineManager.Pause">
            <summary>
            Stops all coroutines.
            Warning: This will override all existing coroutine pause states.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutineManager.Resume">
            <summary>
            Resumes all coroutines.
            Warning: This will override all existing coroutine pause states.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutineManager.Kill">
            <summary>Kills all of the coroutines.</summary>
        </member>
        <member name="M:KS.Reactor.ksCoroutineManager.ForEach(KS.Reactor.ksCoroutineManager.CoroutineCallback)">
            <summary>
            Makes a callback for each coroutine. If the callback returns false, removes the coroutine.
            </summary>
            <param name="coroutineCallback"></param>
        </member>
        <member name="M:KS.Reactor.ksCoroutineManager.Sleep(System.Single)">
            <summary>Waits for a period of time.</summary>
            <param name="time">Time in seconds.</param>
            <returns>IEnumerator</returns>
        </member>
        <member name="T:KS.Reactor.ksCurve">
            <summary>
            Describes a curve defined by keyframes. Each key frame contains information to create two points
            of a cubic Bezier curve. For a given segement between keyframe k0 and k1 the bezier points are defined to be
            0, k0.Value),
            (k0.OutWeight, k0.OutTangent * t * k0.OutWeight + k0.Value),
            (1 - k1.InWeight, -k1.InTangent * t * k1.InWeight + k0.Value),
            (1, k1.Value)
            where t is k1.time - k0.time
            </summary>
        </member>
        <member name="T:KS.Reactor.ksCurve.Keyframe">
            <summary>Key frame data use to determine Bezier points.</summary>
        </member>
        <member name="M:KS.Reactor.ksCurve.Keyframe.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Constructor.</summary>
            <param name="time">Time.</param>
            <param name="value">Value.</param>
            <param name="inTangent">Normalized slope of the line leading into the keyframe.</param>
            <param name="outTangent">Normalized slope of the line leading out of the keyframe.</param>
            <param name="inWeight">Weight to apply to the inbound tangent.</param>
            <param name="outWeight">Weight to apply to the outbound tangent.</param>
        </member>
        <member name="T:KS.Reactor.ksCurve.WrapModes">
            <summary>Affects how the curve is evaluated when the time falls outside the curve duration.</summary>
        </member>
        <member name="T:KS.Reactor.ksCurve.EvalModes">
            <summary>Affects how the keyframes are used when evaluating a curve.</summary>
        </member>
        <member name="P:KS.Reactor.ksCurve.PreWrapMode">
            <summary>Gets/Sets the wrap mode to use when evaluating times before the start of the curve.</summary>
        </member>
        <member name="P:KS.Reactor.ksCurve.PostWrapMode">
            <summary>Gets/Sets the wrap mode to use when evaluating times past the duration of the curve.</summary>
        </member>
        <member name="P:KS.Reactor.ksCurve.Duration">
            <summary>Returns the duration of the curve. Sum of all keyframe times.</summary>
        </member>
        <member name="P:KS.Reactor.ksCurve.StartTime">
            <summary>Gets the time this curve starts.</summary>
        </member>
        <member name="P:KS.Reactor.ksCurve.EndTime">
            <summary>Gets the time this curve ends.</summary>
        </member>
        <member name="P:KS.Reactor.ksCurve.KeyFrameCount">
            <summary>Returns the number of keyframes in the curve.</summary>
        </member>
        <member name="M:KS.Reactor.ksCurve.Clear">
            <summary>Removes all keyframes from the curve.</summary>
        </member>
        <member name="M:KS.Reactor.ksCurve.AddKeyframe(KS.Reactor.ksCurve.Keyframe)">
            <summary>
            Adds a keyframe to the curve.
            Places keyframe at correct position in the keyframe list based on time.
            </summary>
            <param name="keyframe">Keyframe.</param>
            <returns>Index.</returns>
        </member>
        <member name="M:KS.Reactor.ksCurve.RemoveKeyframe(System.Int32)">
            <summary>Removes a keyframe from the curve.</summary>
            <param name="index">Keyframe index.</param>
        </member>
        <member name="M:KS.Reactor.ksCurve.Evaluate(System.Single,KS.Reactor.ksCurve.EvalModes)">
            <summary>Gets the curve value at a specific time.</summary>
            <param name="time">Time.</param>
            <param name="evalMode">Evaluation mode (Default EvalModes.Curve).</param>
            <returns>Curve value.</returns>
        </member>
        <member name="M:KS.Reactor.ksCurve.ClampTime(System.Single)">
            <summary>
            Adjusts the time to return a value within the time range of the curve.
            If the time is between the StartTime and EndTime then time is returned unmodified.
            If the time is greater than EndTime, then the PostWrapMode is applied.
            If the time is less than StartTime, then the PreWrapMode is applied.
            </summary>
            <param name="time">Unclamped time.</param>
            <returns>Clamped time.</returns>
        </member>
        <member name="M:KS.Reactor.ksCurve.GetParametricTime(System.Single,System.Single,System.Single)">
            <summary>
            Solves for the parametric value t where the following equation resolves for x.
                x = w0(1-t)^3 + 3w1t(1-t)^2 + 3w2(1-t)t^2 + wt^3
                w0 = 0, w1 = in weight, w2 = out weight, w3 = 1
            </summary>
            <param name="x"></param>
            <param name="w1"></param>
            <param name="w2"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksCurve.FromJSON(KS.Reactor.ksJSON)">
            <summary>Creates an instance of a ksCurve using JSON data.</summary>
            <param name="json">JSON data.</param>
            <returns>ksCurve value.</returns>
        </member>
        <member name="T:KS.Reactor.ksEditableAttribute">
            <summary>
            Tags fields and properties in server scripts with this to expose them to the editor.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksEntityPhysics">
            <summary>Properties used by entities which have colliders in the physics system.</summary>
        </member>
        <member name="T:KS.Reactor.ksEntityPhysics.DirtyFlags">
            <summary>Flags used to indicate that a field has changed.</summary>
        </member>
        <member name="M:KS.Reactor.ksEntityPhysics.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksEntityPhysics.SetDirty(KS.Reactor.ksEntityPhysics.DirtyFlags)">
            <summary>Set a dirty flag bit.</summary>
            <param name="flag">Dirty flag to set.</param>
        </member>
        <member name="P:KS.Reactor.ksEntityPhysics.UpdateContacts">
            <summary>
            True if we need to generate contact data every frame this entity remains in contact with other entities.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksEvent`1">
            <summary>Wraps a C# event for the delegate T to allow event references.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksEvent`1.Execute">
            <summary>Gets a delegate that invokes all event handlers. Returns null if no handlers are register.</summary>
        </member>
        <member name="M:KS.Reactor.ksEvent`1.op_Addition(KS.Reactor.ksEvent{`0},`0)">
            <summary>Adds an event handler to the event.</summary>
            <param name="lhs">Event to add handler to.</param>
            <param name="rhs">handler to add.</param>
            <returns>lhs</returns>
        </member>
        <member name="M:KS.Reactor.ksEvent`1.op_Subtraction(KS.Reactor.ksEvent{`0},`0)">
            <summary>Adds an event handler to the event.</summary>
            <param name="lhs">Event to add handler to.</param>
            <param name="rhs">Handler to add.</param>
            <returns>lhs</returns>
        </member>
        <member name="T:KS.Reactor.ksEventMap`1">
            <summary>
            A dictionary of events.
            Example Usage:
            
             // Add an event handl
             map[key] += handler;
             
             // Remove an event ha
             map[key] -= handler; </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksEventMap`1.Item(System.UInt32)">
            Gets the event for a key.
        </member>
        <member name="M:KS.Reactor.ksEventMap`1.Clear">
            <summary>Unregisters all events.</summary>
        </member>
        <member name="M:KS.Reactor.ksEventMap`1.GetHandlers(System.UInt32)">
            <summary>Gets all handlers for a key.</summary>
            <param name="key">Key to get handlers for.</param>
            <returns>Handlers.</returns>
        </member>
        <member name="T:KS.Reactor.ksExceptionHandler">
            <summary>Exception handlers.</summary>
        </member>
        <member name="T:KS.Reactor.ksExceptionHandler.ExceptionHandler">
            <summary>Exception handler.</summary>
            <param name="message">Message.</param>
            <param name="ex">Exception.</param>
        </member>
        <member name="E:KS.Reactor.ksExceptionHandler.OnException">
            <summary>Invoked when a exception is caught in developer code.</summary>
        </member>
        <member name="M:KS.Reactor.ksExceptionHandler.Handle(System.String,System.Exception)">
            <summary>
            Handle an exception by invoking the OnException event. Logs the exception if no event handlers are
            registered. Marks the exception as handled by adding a KSReactor object to the exception data if rethrowing
            is enabled.
            </summary>
            <param name="message">Message.</param>
            <param name="ex">Exceptions.</param>
        </member>
        <member name="T:KS.Reactor.ksHashSet`1">
            <summary>A hash set with an event that fires when the hash set is modified.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:KS.Reactor.ksHashSet`1.ModifyHandler">
            <summary>Set that was modified.</summary>
            <param name="set"></param>
        </member>
        <member name="F:KS.Reactor.ksHashSet`1.OnModify">
            <summary>Invoked when the hash set is modified.</summary>
        </member>
        <member name="P:KS.Reactor.ksHashSet`1.Count">
            <summary>The number of elements in the set.</summary>
        </member>
        <member name="P:KS.Reactor.ksHashSet`1.IsReadOnly">
            <summary>Is this collection read-only? Always false.</summary>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructor.</summary>
            <param name="elements">Elements to initialize the set with.</param>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Add(`0)">
            <summary>Adds an element to the set if it is not already in the set.</summary>
            <param name="element">Element to add.</param>
            <returns>True if the element was added. False if it was already in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Add(`0[])">
            <summary>Adds elements to the set.</summary>
            <param name="elements">Elements to add.</param>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds elements to the set.</summary>
            <param name="elements">Elements to add.</param>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Remove(`0)">
            <summary>Removes an element from the set.</summary>
            <param name="element">Element to remove.</param>
            <returns>True if the element was removed. False if the element was not in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Remove(`0[])">
            <summary>Removes elements from the set.</summary>
            <param name="elements">Elements to remove.</param>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>Removes elements from the set.</summary>
            <param name="elements">Elements to remove.</param>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Set(`0[])">
            <summary>Clears the set and adds the given elements.</summary>
            <param name="elements"></param>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Set(System.Collections.Generic.IEnumerable{`0})">
            <summary>Clears the set and adds the given elements.</summary>
            <param name="elements"></param>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Clear">
            <summary>Clears the set.</summary>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.Contains(`0)">
            <summary>Checks if the set contains an element?</summary>
            <param name="element">Element to check for.</param>
            <returns>True if the element is in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.ContainsAll(`0[])">
            <summary>Checks if the set contains all of the given elements.</summary>
            <param name="elements">Elements to check for.</param>
            <returns>True if all of the elements are in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.ContainsAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if the set contains all of the given elements.</summary>
            <param name="elements">Elements to check for.</param>
            <returns>True if all of the elements are in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.ContainsAny(`0[])">
            <summary>Checks if the set contains any of the given elements.</summary>
            <param name="elements">Elements to check for.</param>
            <returns>True if any of the elements are in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.ContainsAny(System.Collections.Generic.IEnumerable{`0})">
            <summary>Checks if the set contains any of the given elements.</summary>
            <param name="elements">Elements to check for.</param>
            <returns>True if any of the elements are in the set.</returns>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the set elements into an array.</summary>
            <param name="array">Array to copy elements into.</param>
            <param name="arrayIndex">Array index to start copying to.</param>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.GetEnumerator">
            <summary>Gets the enumerator.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>Adds an element to the set.</summary>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Get the enumerator.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get the enumerator.</summary>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksHierarchyObject`1">
            <summary>
            Templated base class for hierarchy objects that have a parent and list of children of type T. There is also a
            non-templated variant of ksHierarchyObject.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:KS.Reactor.ksHierarchyObject`1.ForEachCallback">
            <summary>Callback for depth-first searches.</summary>
            <param name="obj">Object being iterated.</param>
            <returns>True to iterate the children of the object.</returns>
        </member>
        <member name="P:KS.Reactor.ksHierarchyObject`1.Parent">
            <summary>Parent.</summary>
        </member>
        <member name="P:KS.Reactor.ksHierarchyObject`1.Children">
            <summary>Children</summary>
        </member>
        <member name="P:KS.Reactor.ksHierarchyObject`1.Descendants">
            <summary>Iterator for descendants.</summary>
        </member>
        <member name="P:KS.Reactor.ksHierarchyObject`1.SelfAndDescendants">
            <summary>Iterator for this object and its descendants.</summary>
        </member>
        <member name="P:KS.Reactor.ksHierarchyObject`1.Ancestors">
            <summary>Iterator for ancestors.</summary>
        </member>
        <member name="P:KS.Reactor.ksHierarchyObject`1.SelfAndAncestors">
            <summary>Iterator for this object and its ancestors.</summary>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.AddChild(`0)">
            <summary>
            Adds a child to the object if that does not create a circular reference. If the child has another parent,
            removes it from its parent first. Throws ArgumentNullException if the child is null.
            </summary>
            <param name="child">Child to add.</param>
            <returns>
            True if the child was added. False if it could not be added, either because it was already added or adding
            it would create a circular reference.
            </returns>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.PerformAddChild(`0)">
            <summary>
            Protected implementation of AddChild. The public AddChild calls this one. Derived classes can override
            either to change public or internal behaviour.
            
            Adds a child to the object if that does not create a circular reference. If the child has another parent,
             removes it from its parent first. Throws ArgumentNullException if the child is null.
            </summary>
            <param name="child">Child to add.</param>
            <returns>
            True if the child was added. False if it could not be added, either because it was already added or adding
            it would create a circular reference.
            </returns>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.InsertChild(System.Int32,`0)">
            <summary>
            Inserts a child at an index if that does not create a circular reference. If the child has another parent,
            removes it from its parent first. Throws ArgumentNullException if the child is null.
            </summary>
            <param name="index">Index to insert at.</param>
            <param name="child">Child to insert.</param>
            <returns>
            True if the child was inserted. False if it could not be inserted, either because it was already added,
            adding it would create a circular reference, or the index was out of bounds.
            </returns>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.PerformInsertChild(System.Int32,`0)">
            <summary>
            Protected implementation of InsertChild. The public InsertChild calls this one. Derived classes can override
            either to change public or internal behaviour.
            
            Inserts a child at an index if that does not create a circular reference. If the child has another parent,
            removes it from its parent first. Throws ArgumentNullException if the child is null.
            </summary>
            <param name="index">Index to insert at.</param>
            <param name="child">Child to insert.</param>
            <returns>
            True if the child was inserted. False if it could not be inserted, either because it was already added,
            adding it would create a circular reference, or the index was out of bounds.
            </returns>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.RemoveChild(`0)">
            <summary>Removes a child from this object. Throws ArgumentNullException if child is null.</summary>
            <param name="child">Child to remove.</param>
            <returns>True if the child was found and removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.PerformRemoveChild(`0)">
            <summary>
            Protected implementation of RemoveChild. The public RemoveChild calls this one. Derived classes can
            override either to change public or internal behaviour.
            
            Removes a child from this object. Throws ArgumentNullException if child is null.
            </summary>
            <param name="child">Child to remove.</param>
            <returns>True if the child was found and removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.Detach">
            <summary>Removes the object from its parent. Does nothing if the object has no parent.</summary>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.PerformDetach">
            <summary>
            Protected implementation of Detach.
            
            Removes the object from its parent. Does nothing if the object has no parent.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.IsDescendantOf(`0)">
            <summary>Checks if an object is a descendant of this object.</summary>
            <param name="obj">Object to check.</param>
            <returns>True if obj is a descendant of this object.</returns>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.ForEachDescendant(KS.Reactor.ksHierarchyObject{`0}.ForEachCallback)">
            <summary>Iterates the descendants using depth-first search.</summary>
            <param name="callback">
            Callback to call on descendants. If it returns false, will not iterate children.
            </param>
        </member>
        <member name="M:KS.Reactor.ksHierarchyObject`1.ForSelfAndDescendants(KS.Reactor.ksHierarchyObject{`0}.ForEachCallback)">
            <summary>Iterates this object and its descendants using depth-first search.</summary>
            <param name="callback">
            Callback to call on descendants. If it returns false, will not iterate children.
            </param>
        </member>
        <member name="T:KS.Reactor.ksHierarchyObject">
            <summary>
            Non-templated base class for hierarchy objects with a parent and children. There is also a templated variant
            that enforces all objects in the hierarchy derive the templated type.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksICharacterController">
            <summary>
            Character controller interface.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.SlopeLimit">
            <summary>
            Slope limit in degrees.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.StepOffset">
            <summary>
            Step offset.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.SkinWidth">
            <summary>
            Collision skin width.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.MinMoveDistance">
            <summary>
            Minimum move distance of the character controller. If travelled distance is smaller, the character doesn't
            move. This is used to stop the recursive motion algorithm when remaining distance to travel is small.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.Offset">
            <summary>
            The offset of the character's collider relative to the transform's position.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.Radius">
            <summary>
            The radius of the character's capsule.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.Height">
            <summary>
            The height of the character's capsule.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.EnableOverlapRecovery">
            <summary>
            Enables or disables overlap recovery. Used to depenetrate character controllers from static objects when an
            overlap is detected.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.DetectCollisions">
            <summary>
            Determines whether other rigidbodies or character controllers collide with this character controller.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.CollisionFlags">
            <summary>
            What part of the capsule collided with the environment during the last CharacterController.Move call.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.IsGrounded">
            <summary>
            Was the CharacterController touching the ground during the last move?
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICharacterController.Velocity">
            <summary>
            The current relative velocity of the character.
            </summary>
        </member>
        <member name="E:KS.Reactor.ksICharacterController.OnColliderHit">
            <summary>
            Invoked when the character controller hit a collider.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksICharacterController.SimpleMove(KS.Reactor.ksVector3)">
            <summary>
            Moves the character with velocity. Gravity is automatically applied. Returns if the character is grounded.
            </summary>
            <param name="velocity"></param>
            <returns>True if the character is grounded.</returns>
        </member>
        <member name="M:KS.Reactor.ksICharacterController.Move(KS.Reactor.ksVector3)">
            <summary>
            Moves the character with a displacement vector. Users are responsible for applying gravity to characters.
            </summary>
            <param name="motion"></param>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksICollider">
            <summary>
            Collider interface used in common scripts that run on server and client
            </summary>
        </member>
        <member name="P:KS.Reactor.ksICollider.Entity">
            <summary>Entity the collider is attached to</summary>
        </member>
        <member name="P:KS.Reactor.ksICollider.ContactOffset">
            <summary>Get/Set contact offset on a collider</summary>
        </member>
        <member name="P:KS.Reactor.ksICollider.IsEnabled">
            <summary>Get/Set the enabled state of a collider</summary>
        </member>
        <member name="P:KS.Reactor.ksICollider.IsQueryCollider">
            <summary>Get/Set if this collider is used in scene queries.</summary>
        </member>
        <member name="P:KS.Reactor.ksICollider.IsSimulationCollider">
            <summary>Get/Set if this collider is used in physics simulations.</summary>
        </member>
        <member name="P:KS.Reactor.ksICollider.IsTrigger">
            <summary>Get/Set if this collider is a trigger.</summary>
        </member>
        <member name="P:KS.Reactor.ksICollider.CollisionFilter">
            <summary>Get/Set the collision filter on the collider.</summary>
        </member>
        <member name="P:KS.Reactor.ksICollider.Bounds">
            <summary>
            Get the bounds of a collider at the position of its attached entity or at the origin
            if the collider is not attached to an entity.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksIEntity">
            <summary>Entity interface that both client and server entities implement.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.Id">
            <summary>Entity id.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.Type">
            <summary>Entity type.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.Position">
            <summary>Position.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.Rotation">
            <summary>Rotation.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.Scale">
            <summary>Scale.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.Position2D">
            <summary>2D position.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.Rotation2D">
            <summary>2D rotation in degrees.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.RotationRadians2D">
            <summary>2D rotation in radians.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.Scale2D">
            <summary>2D scale.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.Properties">
            <summary>Entity properties.</summary>
        </member>
        <member name="P:KS.Reactor.ksIEntity.CollisionFilter">
            <summary>Determines which entities to collide with and notify of collision/overlap events.</summary>
        </member>
        <member name="T:KS.Reactor.ksInput">
            <summary>Class for querying player inputs.</summary>
        </member>
        <member name="T:KS.Reactor.ksInput.State">
            <summary>Button states.</summary>
        </member>
        <member name="P:KS.Reactor.ksInput.IsUsed">
            <summary>Has this input been used?</summary>
        </member>
        <member name="P:KS.Reactor.ksInput.CanDestroy">
            <summary>
            If false, calls to CleanUp will do nothing instead of clearing the state and returning the object to the
            object pool.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksInput.MultiButtonStateEnabled">
            <summary>
            If true and multiple client frames are combined into one input frame, a button can be both pressed and
            released in the same frame if it's up/down state changed multiple times in the same frame. If false, the
            up/down state of a button can only change once in one input frame.
            
            Eg. Three client frames are combined into one input frame. The button is up on the first frame, down on the
            second, and up again on the third. If MultiButtonStateEnabled is true, this produces one input frame
            where Input.IsDown returns false, and Input.IsPressed and Input.IsReleased return true. If
            MultiButtonStateEnabled is false, this produces one input frame where Input.IsDown and Input.IsPressed
            return true and Input.IsReleased returns false. If the button up/down state does not change again during
            the next input frame, Input.IsDown will return false and Input.IsReleased will return true on the next
            input frame.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksInput.Updated">
            <summary>Have we updated inputs since the last input frame?</summary>
        </member>
        <member name="M:KS.Reactor.ksInput.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksInput.IsDown(System.UInt32)">
            <summary>Checks if a button is down.</summary>
            <param name="button">Button to check.</param>
            <returns>True if the button is down.</returns>
        </member>
        <member name="M:KS.Reactor.ksInput.IsPressed(System.UInt32)">
            <summary>
            Checks if a button was pressed. This will be true for one frame when a button is pressed.
            </summary>
            <param name="button">Button to check.</param>
            <returns>True if the button was pressed.</returns>
        </member>
        <member name="M:KS.Reactor.ksInput.IsReleased(System.UInt32)">
            <summary>
            Checks if a button was released. This will be true for one frame when a button is released.
            </summary>
            <param name="button">Button to check.</param>
            <returns>True if the button was released.</returns>
        </member>
        <member name="M:KS.Reactor.ksInput.GetAxis(System.UInt32)">
            <summary>Gets the value of an axis.</summary>
            <param name="axis">Axis to get value for.</param>
            <returns>Value of the axis.</returns>
        </member>
        <member name="M:KS.Reactor.ksInput.Use">
            <summary>Marks the input as used.</summary>
        </member>
        <member name="M:KS.Reactor.ksInput.CleanUp">
            <summary>
            Clears the state and returns the object to the pool. It is recommended you call this when you are done with
            an input.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksInput.Clone">
            <summary>Creates a copy of this object.</summary>
            <returns>A copy of this object.</returns>
        </member>
        <member name="M:KS.Reactor.ksInput.GetState(System.UInt32)">
            <summary>Gets the state of a button.</summary>
            <param name="button">Button to get state for.</param>
            <returns>State of the button.</returns>
        </member>
        <member name="M:KS.Reactor.ksInput.SetButton(System.UInt32,System.Boolean)">
            <summary>Updates a button's state.</summary>
            <param name="button">Button to update.</param>
            <param name="down">True if the button is down.</param>
            <returns>True if the button's state changed.</returns>
        </member>
        <member name="M:KS.Reactor.ksInput.SetAxis(System.UInt32,System.Single)">
            <summary>Sets the value of an axis.</summary>
            <param name="axis">Axis to set value of.</param>
            <param name="value">Value to set.</param>
            <returns>True if the axis's value changed.</returns>
        </member>
        <member name="M:KS.Reactor.ksInput.SetState(System.UInt32,KS.Reactor.ksInput.State)">
            <summary>Sets the state of a button.</summary>
            <param name="button">Button to set state of.</param>
            <param name="state">State to set.</param>
        </member>
        <member name="T:KS.Reactor.ksInputRegistrar">
            <summary>
            Buttons, axes, and controllers are registered with an ksInputRegistrar while they are in use so we know which
            inputs to send over the network.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksInputRegistrar.Buttons">
            <summary>Buttons that are registered.</summary>
        </member>
        <member name="P:KS.Reactor.ksInputRegistrar.Axes">
            <summary>Axes that are registered.</summary>
        </member>
        <member name="P:KS.Reactor.ksInputRegistrar.Controllers">
            <summary>Controller types that are registered.</summary>
        </member>
        <member name="P:KS.Reactor.ksInputRegistrar.StateDirty">
            <summary>True if input has changed since the last time we sent input to the server.</summary>
        </member>
        <member name="P:KS.Reactor.ksInputRegistrar.NumReportedControllers">
            <summary>Number of controller types we sent input for last update.</summary>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.RegisterButtons(System.UInt32[])">
            <summary>Registers buttons used by a ksPlayerController.</summary>
            <param name="buttons">Buttons to register.</param>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.RegisterAxes(System.UInt32[])">
            <summary>Registers axes used by a ksPlayerController.</summary>
            <param name="axes">Axes to register.</param>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.RegisterController(KS.Reactor.ksPlayerController)">
            <summary>Registers a controller.</summary>
            <param name="controller">Controller to register.</param>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.UnregisterController(KS.Reactor.ksPlayerController)">
            <summary>Unregisters a controller.</summary>
            <param name="controller">Controller to unregister.</param>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.CheckControllersDirty">
            <summary>
            Checks if registered controller types have changes since the last time we sent input to the server.
            </summary>
            <returns>True if registered controllers have changed.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.RecordControllers">
            <summary>
            Records the list of registered controllers so we can later compare with it to see if controllers have
            changed.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.Clear">
            <summary>Unregisters everything.</summary>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.IsButtonRegistered(System.UInt32)">
            <summary>Checks if a button is registered.</summary>
            <param name="button">Button to check.</param>
            <returns>True if the button is registered.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.IsAxisRegistered(System.UInt32)">
            <summary>Checks if an axis is registered.</summary>
            <param name="axis">Axis to check.</param>
            <returns>True if the axis is registered.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.IsControllerRegistered(System.UInt32)">
            <summary>Checks if a controller type is registered.</summary>
            <param name="controller">Controller type to check.</param>
            <returns>True if the controller type is registred.</returns>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.AddButton(System.UInt32)">
            <summary>Adds a button to the registrar.</summary>
            <param name="button">Button to add.</param>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.RemoveButton(System.UInt32)">
            <summary>Removes a button from the registrar.</summary>
            <param name="button">Button to remove.</param>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.AddAxis(System.UInt32)">
            <summary>Adds an axis to the registrar.</summary>
            <param name="axis">Axis to add.</param>
        </member>
        <member name="M:KS.Reactor.ksInputRegistrar.RemoveAxis(System.UInt32)">
            <summary>Removes an axis from the registrar.</summary>
            <param name="axis">Axis to remove.</param>
        </member>
        <member name="T:KS.Reactor.ksPhysicsConsts">
            <summary>Physics constants.</summary>
        </member>
        <member name="T:KS.Reactor.ksPhysicsQueryFlags">
            <summary>
            Additional flags used to filter physic scene queries.
            These flags correspond to the PhysX flags found in PxQueryFiltering.h PxQueryFlag
            @see https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/SceneQueries.html
            </summary>
        </member>
        <member name="T:KS.Reactor.ksIPhysics">
            <summary>Physics interface available on client and server.</summary>
        </member>
        <member name="P:KS.Reactor.ksIPhysics.AutoSync">
            <summary>
            If true, transform changes are synced with the physics system and stale inertia tensors and centers of mass
            are recalculated automatically before any physics queries. If this is false, changes are only synced during
            the simulation step, and you are responsible for calling Sync if you want to sync changes sooner.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.SyncAll">
            <summary>
            Apply all transform and rigidbody changes to the physics simulation now rather than waiting for the next
            simulation step.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.SyncTransforms">
            <summary>
            Apply entity transform updates to the physics simulation now rather than
            waiting for the next simulation step.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.Raycast(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single,System.Boolean,KS.Reactor.ksPhysicsQueryFlags,System.UInt32,System.UInt32)">
            <summary>Raycast.</summary>
            <param name="origin">Origin point.</param>
            <param name="direction">Direction vector.</param>
            <param name="distance">Ray distance.</param>
            <param name="includeOverlaps">Include entities that overlap the origin.</param>
            <param name="filter">Bit flags for filtering static, dynamic, and first hit.</param>
            <param name="groupMask">Bit mask of collsion groups.</param>
            <param name="maxResults">Maximum number of results to return.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.Sweep(KS.Reactor.ksShape,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksVector3,System.Single,System.Boolean,KS.Reactor.ksPhysicsQueryFlags,System.UInt32,System.UInt32)">
            <summary>Shape sweep.</summary>
            <param name="shape">Primitive or convex shape.</param>
            <param name="origin">Origin point.</param>
            <param name="rotation">Shape orientation.</param>
            <param name="direction">Direction vector.</param>
            <param name="distance">Sweep distance.</param>
            <param name="includeOverlaps">Include entities that overlap at the origin.</param>
            <param name="flags">Bit flags for filtering static, dynamic, and first hit.</param>
            <param name="groupMask">Bit mask of collsion groups.</param>
            <param name="maxResults">Maximum number of results to return.</param>
            <returns>List of sweep results.</returns>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.Sweep(KS.Reactor.ksIEntity,KS.Reactor.ksVector3,System.Single,System.Boolean,KS.Reactor.ksPhysicsQueryFlags,System.UInt32,System.UInt32)">
            <summary>Entity sweep using the current position and rotation as starting points.</summary>
            <param name="entity">Entity.</param>
            <param name="direction">Direction vector.</param>
            <param name="distance">Ray distance.</param>
            <param name="includeOverlaps">Include entities that overlap at the origin.</param>
            <param name="flags">Bit flags for filtering static, dynamic, and first hit.</param>
            <param name="groupMask">Bit mask of collsion groups.</param>
            <param name="maxResults">Maximum number of results to return.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.Sweep(KS.Reactor.ksIEntity,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksVector3,System.Single,System.Boolean,System.Boolean,KS.Reactor.ksPhysicsQueryFlags,System.UInt32,System.UInt32)">
            <summary>Entity sweep.</summary>
            <param name="entity">Entity.</param>
            <param name="origin">Origin point.</param>
            <param name="rotation">Entity orientation.</param>
            <param name="direction">Direction vector.</param>
            <param name="distance">Sweep distance.</param>
            <param name="excludeSelf">Exclude this entity in the returned results.</param>
            <param name="includeOverlaps">Include entities that overlap at the origin.</param>
            <param name="flags">Bit flags for filtering static, dynamic, and first hit.</param>
            <param name="groupMask">Bit mask of collsion groups.</param>
            <param name="maxResults">Maximum number of results to return.</param>
            <returns>List of sweep results.</returns>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.Overlap(KS.Reactor.ksShape,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksPhysicsQueryFlags,System.UInt32,System.UInt32)">
            <summary>Shape overlap.</summary>
            <param name="shape">Primitive or convex shape.</param>
            <param name="origin">Origin point.</param>
            <param name="rotation">Shape orientation.</param>
            <param name="flags">Bit flags for filtering static, dynamic, and first hit.</param>
            <param name="groupMask">Bit mask of collsion groups.</param>
            <param name="maxResults">Maximum number of results to return.</param>
            <returns>List of overlap results.</returns>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.Overlap(KS.Reactor.ksIEntity,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,System.Boolean,KS.Reactor.ksPhysicsQueryFlags,System.UInt32,System.UInt32)">
            <summary>Entity overlap.</summary>
            <param name="entity">Entity.</param>
            <param name="origin">Entity point.</param>
            <param name="rotation">Entity orientation.</param>
            <param name="excludeSelf">Exclude this entity in the returned results.</param>
            <param name="flags">Bit flags for filtering static, dynamic, and first hit.</param>
            <param name="groupMask">Bit mask of collsion groups.</param>
            <param name="maxResults">Maximum number of results to return.</param>
            <returns>List of overlap results.</returns>
        </member>
        <member name="P:KS.Reactor.ksIPhysics.Gravity">
            <summary>Gets the current gravity in the scene.</summary>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.ComputePenetration(KS.Reactor.ksICollider,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksICollider,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksVector3@,System.Single@)">
            <summary>
            Compute the minimal translation required to separate the given colliders apart at specified poses.
            </summary>
            <param name="collider0">First collider to test.</param>
            <param name="position0">Position of collider 0.</param>
            <param name="rotation0">Rotation of collider 0.</param>
            <param name="collider1">Secoond collider to test.</param>
            <param name="position1">Position of collider 1.</param>
            <param name="rotation1">Rotation of collider 1.</param>
            <param name="direction">Direction along which the translation required to separate the colliders apart is minimal.</param>
            <param name="distance">The distance along the direction that is required to separate the colliders apart.</param>
            <returns>True if the colliders were overlapping.</returns>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.GetClosestPoint(KS.Reactor.ksVector3,KS.Reactor.ksICollider)">
            <summary>
            Get the closest point on a collider to another point.
            Currently supported colliders: box, sphere, capsule, convexmesh.
            </summary>
            <param name="point">Point to measure from.</param>
            <param name="collider">Collider to get the closest point from.</param>
            <returns>Closest point on the collider.</returns>
        </member>
        <member name="M:KS.Reactor.ksIPhysics.GetClosestPoint(KS.Reactor.ksVector3,KS.Reactor.ksICollider,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion)">
            <summary>
            Get the closest point on a collider to another point.
            Currently supported colliders: box, sphere, capsule, convexmesh.
            </summary>
            <param name="point">Point to measure from.</param>
            <param name="collider">Collider to get the closest point from.</param>
            <param name="position">Collider position</param>
            <param name="rotation">Collider rotation</param>
            <returns>Closest point on the collider.</returns>
        </member>
        <member name="T:KS.Reactor.ksRigidBodyTypes">
            <summary>Rigid body types.</summary>
        </member>
        <member name="F:KS.Reactor.ksRigidBodyTypes.DEFAULT">
            <summary>Use the default type.</summary>
        </member>
        <member name="F:KS.Reactor.ksRigidBodyTypes.RIGID_BODY_3D">
            <summary>3D rigid body.</summary>
        </member>
        <member name="F:KS.Reactor.ksRigidBodyTypes.RIGID_BODY_2D">
            <summary>2D rigid body.</summary>
        </member>
        <member name="T:KS.Reactor.ksForceMode">
            <summary>Determines how forces are applied.</summary>
        </member>
        <member name="F:KS.Reactor.ksForceMode.FORCE">
            <summary>Add a continuous force, using mass.</summary>
        </member>
        <member name="F:KS.Reactor.ksForceMode.IMPULSE">
            <summary>Add an instant impulse, using mass.</summary>
        </member>
        <member name="F:KS.Reactor.ksForceMode.ACCELERATION">
            <summary>Add a continuous acceleration, ignoring mass.</summary>
        </member>
        <member name="F:KS.Reactor.ksForceMode.VELOCITY">
            <summary>Add an instant velocity, ignoring mass.</summary>
        </member>
        <member name="T:KS.Reactor.ksRigidBodyConstraints">
            <summary>Use these flags to constrain motion of rigidbodies. <see cref="P:KS.Reactor.ksIRigidBody.Constraints"/></summary>
        </member>
        <member name="T:KS.Reactor.ksIRigidBody">
            <summary>Interface exposed to player controllers to restrict access to entity physics data.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.Velocity">
            <summary>Linear velocity</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.AngularVelocity">
            <summary>Angular velocity. Component values are degrees per second.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.KinematicMovement">
            <summary>
            Amount of movement that will be applied to a kinematic rigid body entity 
            during the next physics simulation step. After the simulation step this 
            value will be reset to <see cref="P:KS.Reactor.ksVector3.Zero"/>
            </summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.KinematicRotation">
            <summary>
            Amount of rotation that will be applied to a kinematic rigid body entity 
            during the next physics simulation step. After the simulation step this 
            value will be reset to <see cref="P:KS.Reactor.ksQuaternion.Identity"/>
            </summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.Mass">
            <summary>Mass of the rigid body.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.Drag">
            <summary>Damping.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.AngularDrag">
            <summary>Angular damping.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.UseGravity">
            <summary>If true, the entity will be affected by the scene gravity.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.IsKinematic">
            <summary>
            If true, the entity will not be effected by gravity or other impulses, but may be moved around by setting
            translation and rotation from scripts.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.Constraints">
            <summary>Controls which degrees of freedom are allowed for the simulation of this rigidbody.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody.CenterOfMass">
            <summary>The rigidbody's center of mass in local space.</summary>
        </member>
        <member name="M:KS.Reactor.ksIRigidBody.ClearKinematicMotion">
            <summary>Clear the Kinematic movement and rotation values.</summary>
        </member>
        <member name="T:KS.Reactor.ksRigidBody2DConstraints">
            <summary>Use these flags to constrain motion of rigidbodies.</summary>
        </member>
        <member name="T:KS.Reactor.ksIRigidBody2D">
            <summary>Interface exposed to player controllers to restrict access to 2D entity physics data.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.Velocity">
            <summary>Velocity.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.AngularVelocity">
            <summary>Angular velocity in degrees per second.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.KinematicMovement">
            <summary>
            Amount of movement that will be applied to a kinematic rigid body entity 
            during the next physics simulation step. After the simulation step this 
            value will be reset to <see cref="P:KS.Reactor.ksVector2.Zero"/>
            </summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.KinematicRotation">
            <summary>
            Amount of rotation in degrees that will be applied to a kinematic rigid body entity 
            during the next physics simulation step. After the simulation step this 
            value will be reset to zero.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.KinematicRotationRadians">
            <summary>
            Amount of rotation in radians that will be applied to a kinematic rigid body entity 
            during the next physics simulation step. After the simulation step this 
            value will be reset to zero.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.Mass">
            <summary>Mass of the rigid body.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.Drag">
            <summary>Damping.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.AngularDrag">
            <summary>Angular damping.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.UseGravity">
            <summary>If true, the entity will be affected by the scene gravity.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.IsKinematic">
            <summary>
            If true, the entity will not be effected by gravity or other impulses, but may be moved around by setting
            translation and rotation from scripts.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.Constraints">
            <summary>Controls which degrees of freedom are allowed for the simulation of this rigidbody.</summary>
        </member>
        <member name="P:KS.Reactor.ksIRigidBody2D.CenterOfMass">
            <summary>The rigidbody's center of mass in local space.</summary>
        </member>
        <member name="M:KS.Reactor.ksIRigidBody2D.ClearKinematicMotion">
            <summary>Clear the Kinematic movement and rotation values.</summary>
        </member>
        <member name="T:KS.Reactor.ksIWebRequest">
            <summary>Web request interface.</summary>
        </member>
        <member name="P:KS.Reactor.ksIWebRequest.Method">
            <summary>Method.</summary>
        </member>
        <member name="P:KS.Reactor.ksIWebRequest.URL">
            <summary>URL.</summary>
        </member>
        <member name="P:KS.Reactor.ksIWebRequest.JSON">
            <summary>JSON request data.</summary>
        </member>
        <member name="P:KS.Reactor.ksIWebRequest.Headers">
            <summary>Headers.</summary>
        </member>
        <member name="P:KS.Reactor.ksIWebRequest.IsDone">
            <summary>Check if the request has completed.</summary>
        </member>
        <member name="P:KS.Reactor.ksIWebRequest.Response">
            <summary>Response.</summary>
        </member>
        <member name="T:KS.Reactor.ksIWebRequestFactory">
            <summary>Factory for creating a ksIWebRequest.</summary>
            <param name="url">URL.</param>
            <param name="headers">Header collection.</param>
            <param name="method">Request method (default GET).</param>
            <param name="request">JSON request data.</param>
            <param name="stateObject">User defined state tracking object.</param>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksWebResponse">
            <summary>ksIWebRequest response ojbect.</summary>
        </member>
        <member name="T:KS.Reactor.ksWebResponse.Handler">
            <summary>ksIWebRequest response handler</summary>
            <param name="response">Response object.</param>
        </member>
        <member name="P:KS.Reactor.ksWebResponse.StatusCode">
            <summary>HTTP response status code.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebResponse.StatusMessage">
            <summary>HTTP response status message.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebResponse.Headers">
            <summary>HTTP response headers.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebResponse.Error">
            <summary>Error message.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebResponse.Data">
            <summary>Raw stream data.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebResponse.String">
            <summary>Response string.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebResponse.JSON">
            <summary>Response JSON if the response content-type was application/json.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebResponse.AsyncState">
            <summary>Asynchronous object passed into the request.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebResponse.ReplyTime">
            <summary>Amount of time in milliseconds the request took.</summary>
        </member>
        <member name="T:KS.Reactor.ksJSON">
            <summary>
            Represents a JSON value and provides methods for serializing/deserializing JSON. Unlike standard JSON,
            this implementation differentiates between floats and ints and supports NaN, infinity, and negative infinity.
            Ints are stored as 64 bit longs.
            </summary>
            Represents a JSON value and provides methods for serializing/deserializing JSON. Unlike standard JSON,
            this implementation differentiates between floats and ints and supports NaN, infinity, and negative infinity.
            Ints are stored as 64 bit longs.
        </member>
        <member name="T:KS.Reactor.ksJSON.Types">
            <summary>JSON value types.</summary>
        </member>
        <member name="T:KS.Reactor.ksJSON.Literals">
            <summary>JSON literals</summary>
        </member>
        <member name="T:KS.Reactor.ksJSON.ModifyHandler">
            <summary>Handler for on modify events.</summary>
            <param name="json">JSON that was modified.</param>
        </member>
        <member name="E:KS.Reactor.ksJSON.OnModify">
            <summary>Invoked when the json is modified.</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.IsNull">
            <summary>Is this a null value?</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.IsString">
            <summary>Is this a string value?</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.IsFloat">
            <summary>Is this a float value?</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.IsInt">
            <summary>Is this an int value?</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.IsBool">
            <summary>Is this a bool value?</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.IsArray">
            <summary>Is this a JSON array?</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.IsObject">
            <summary>Is this a JSON object?</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.IsNumber">
            <summary>Is this a float or int value?</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.IsContainer">
            <summary>Is this a JSON object or array?</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.Type">
            <summary>JSON type.</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.Count">
            <summary>
            Number of fields in the JSON object or number of elements in the JSON array.
            0 if this is neither an object or an array.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.Array">
            <summary>The value as a JSON array.</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.Fields">
            <summary>The JSON object fields.</summary>
        </member>
        <member name="P:KS.Reactor.ksJSON.Item(System.Int32)">
            <summary>Gets/sets the value by index in the JSON array.</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Item(System.String)">
            <summary>Gets/sets a JSON object field.</summary>
            <param name="name">Name of field.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor">
            <summary>Constructs a null JSON value.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(KS.Reactor.ksJSON.Types)">
            <summary>Constructor</summary>
            <param name="type">Type of JSON.</param>
        </member>
        <member name="P:KS.Reactor.ksJSON.String">
            <summary>The value as a string. Serializes the JSON if it is a container type.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(System.String)">
            <summary>
            Constructs a JSON string value. Does not parse the string. Use ksJSON.Parse(string) to parse a JSON string.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(System.String)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from string to ksJSON. Does not parse the string.</summary>
            <param name="value">String value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~System.String">
            <summary>
            Implicit conversion from ksJSON to string. Serializes the JSON if it is a container type.
            </summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,System.String@)">
            <summary>Gets a string field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Double">
            <summary>The value as a double.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(System.Double)">
            <summary>Constructs a JSON double value.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(System.Double)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from double to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~System.Double">
            <summary>Implicit conversion from ksJSON to double.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,System.Double@)">
            <summary>Gets a double field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Long">
            <summary>The value as a long.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(System.Int64)">
            <summary>Constructs a JSON long value.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(System.Int64)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from long to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~System.Int64">
            <summary>Implicit conversion from ksJSON to long.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,System.Int64@)">
            <summary>Gets a long field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Bool">
            <summary>The value as a bool.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(System.Boolean)">
            <summary>Constructs a JSON bool value.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(System.Boolean)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from bool to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~System.Boolean">
            <summary>Implicit conversion from ksJSON to bool.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,System.Boolean@)">
            <summary>Gets a bool field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Int">
            <summary>The value as a int.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(System.Int32)">
            <summary>Constructs a JSON int value.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(System.Int32)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from int to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~System.Int32">
            <summary>Implicit conversion from ksJSON to int.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,System.Int32@)">
            <summary>Gets an int field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.UInt">
            <summary>The value as a uint.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(System.UInt32)">
            <summary>Constructs a JSON uint value.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(System.UInt32)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from uint to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~System.UInt32">
            <summary>Implicit conversion from ksJSON to uint.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,System.UInt32@)">
            <summary>Gets a uint field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Float">
            <summary>The value as a float.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(System.Single)">
            <summary>Constructs a JSON float value.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(System.Single)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from float to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~System.Single">
            <summary>Implicit conversion from ksJSON to float.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,System.Single@)">
            <summary>Gets a float field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Vector2">
            <summary>The array as a ksVector2.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(KS.Reactor.ksVector2)">
            <summary>Constructs a JSON array from a ksVector2.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksVector2)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from ksVector2 to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~KS.Reactor.ksVector2">
            <summary>Implicit conversion from ksJSON to ksVector2.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,KS.Reactor.ksVector2@)">
            <summary>Gets a ksVector2 field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Vector3">
            <summary>The array as a ksVector3</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(KS.Reactor.ksVector3)">
            <summary>Constructs a JSON array from a ksVector3.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksVector3)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from ksVector3 to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~KS.Reactor.ksVector3">
            <summary>Implicit conversion from ksJSON to ksVector3.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,KS.Reactor.ksVector3@)">
            <summary>Gets a ksVector3 field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Quaternion">
            <summary>The array as a ksQuaternion.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(KS.Reactor.ksQuaternion)">
            <summary>Constructs a JSON array from a ksQuaternion.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksQuaternion)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from ksQuaternion to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~KS.Reactor.ksQuaternion">
            <summary>Implicit conversion from ksJSON to ksQuaternion.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,KS.Reactor.ksQuaternion@)">
            <summary>Gets a ksQuaternion field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="P:KS.Reactor.ksJSON.Color">
            <summary>The array as a ksColor.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.#ctor(KS.Reactor.ksColor)">
            <summary>Constructs a JSON array from a ksColor.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksColor)~KS.Reactor.ksJSON">
            <summary>Implicit conversion from ksColor to ksJSON.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~KS.Reactor.ksColor">
            <summary>Implicit conversion from ksJSON to ksColor.</summary>
            <param name="json">JSON value.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,KS.Reactor.ksColor@)">
            <summary>Gets a ksColor field.</summary>
            <param name="name">Name of field to get.</param>
            <param name="field">Set to the field value if the field is found.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.Add(KS.Reactor.ksJSON)">
            <summary>Appends to the JSON array.</summary>
            <param name="value">Value to add to the array.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.ksJSON.Remove(KS.Reactor.ksJSON)" -->
        <member name="M:KS.Reactor.ksJSON.RemoveAt(System.Int32)">
            <summary>Removes the element at the specified index from the JSON array.</summary>
            <param name="index">Index to remove element from.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.SetField(System.String,KS.Reactor.ksJSON)">
            <summary>Sets a field in the JSON object.</summary>
            <param name="name">Name of field.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String)">
            <summary>
            Gets a field from the JSON object.
            Throws an exception if the field isn't found or this isn't a JSON object.
            </summary>
            <param name="name">Name of field.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,KS.Reactor.ksJSON)">
            <summary>Gets a field from the JSON object.</summary>
            <param name="name">Name of field.</param>
            <param name="defaultValue">Default value to return if the field isn't found.</param>
            <returns>Field value, or defaultValue if the field isn't found.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField(System.String,KS.Reactor.ksJSON@)">
            <summary>Gets a field from the JSON object.</summary>
            <param name="name">Name of field.</param>
            <param name="field">Set to field value if the field is found.</param>
            <returns>True if the field was found.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.GetField``1(System.String,``0@,KS.Reactor.ksJSON.Getter{``0})">
            <summary>Gets a field of type T from the JSON object.</summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of field.</param>
            <param name="field">Set to field value if the field is found.</param>
            <param name="getter">Getter for converting the ksJSON field to type T.</param>
            <returns>True if the field was found.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.RemoveField(System.String)">
            <summary>Removes a field from the JSON object.</summary>
            <param name="name">Name of field.</param>
            <returns>True if the field was found.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.HasField(System.String)">
            <summary>Checks if a field is present in the JSON object.</summary>
            <param name="name">Name of field.</param>
            <returns>True if this is a json object with the given field.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.HasFields(System.String[])">
            <summary>Checks if fields are present in the JSON object.</summary>
            <param name="names">Names of fields to check for.</param>
            <returns>True if this is a json object with all the given fields.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.Clear">
            <summary>Clears all fields, list entries and values, and sets the JSON type to null.</summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.ToString">
            <summary>Convert JSON to string.</summary>
            <returns>JSON value. Serializes the JSON if it is a container type.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.Parse(System.String)">
            <summary>Parses a JSON string. Throws an exception if the JSON string is invalid.</summary>
            <param name="str">String to parse.</param>
            <returns>ksJSON constructed from parsing JSON string.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.Print(System.Boolean,System.Boolean)">
            <summary>Serializes JSON to a string.</summary>
            <param name="pretty">If true, will print with indentation and multiple lines.</param>
            <param name="allowNaN">
            If true, will serialize NaN, infinity, and negative infinity to non-string literals that aren't part of
            the JSON standard. Otherwise these values are serialized as null.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.Children">
            <summary>Iterates the children of this JSON. Does nothing if this is not an array or object.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.Descendants">
            <summary>
            Iterates all descendants of this JSON object. Does nothing if this is not an array or object. Logs warnings
            if circular references are detected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.Descendants(System.Collections.Generic.HashSet{KS.Reactor.ksJSON})">
            <summary>
            Iterates all descendants of this JSON object. Does nothing if this is not an array or object. Logs warnings
            if circular references are detected.
            </summary>
            <param name="parents">Parents of this object. Used for detecting circular references.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.Equals(KS.Reactor.ksJSON)">
            <summary>Checks if the contents of a ksJSON are the same as another.</summary>
            <param name="other"></param>
            <returns>True if all keys and values are equals.</returns>
        </member>
        <member name="M:KS.Reactor.ksJSON.InvokeOnModify(KS.Reactor.ksJSON)">
            <summary>Invokes the on modify event.</summary>
            <param name="json"></param>
        </member>
        <member name="M:KS.Reactor.ksJSON.AddModifyHandlerToChildren">
            <summary>
            If this object has any modify handlers, adds a modify handler to the children of this object to call this
            object's handlers.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.RemoveModifyHandlerFromChildren">
            <summary>
            If this object has any modify handlers, removes the modify handler from the children of this object to call
            this object's handlers.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(UnityEngine.Vector2)~KS.Reactor.ksJSON">
            Implicit conversion from Vector2 to ksJSON.
            
            @param   Vector2 value
            @return  ksJSON
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~UnityEngine.Vector2">
            Implicit conversion from ksJSON to Vector2.
            
            @param   ksJSON json
            @return  Vector2
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(UnityEngine.Vector3)~KS.Reactor.ksJSON">
            Implicit conversion from Vector3 to ksJSON.
            
            @param   Vector3 value
            @return  ksJSON
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~UnityEngine.Vector3">
            Implicit conversion from ksJSON to Vector3.
            
            @param   ksJSON json
            @return  Vector3
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(UnityEngine.Quaternion)~KS.Reactor.ksJSON">
            Implicit conversion from Quaternion to ksJSON.
            
            @param   Quaternion value
            @return  ksJSON
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~UnityEngine.Quaternion">
            Implicit conversion from ksJSON to Quaterion.
            
            @param   ksJSON json
            @return  Quaterion
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(UnityEngine.Color)~KS.Reactor.ksJSON">
            Implicit conversion from Color to ksJSON.
            
            @param   Color value
            @return  ksJSON
        </member>
        <member name="M:KS.Reactor.ksJSON.op_Implicit(KS.Reactor.ksJSON)~UnityEngine.Color">
            Implicit conversion from ksJSON to Color.
            
            @param   ksJSON json
            @return  Color
        </member>
        <member name="T:KS.Reactor.ksLinkedList`1">
            <summary>A linked list that can be modified while being iterated.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.Count">
            <summary>Number of values in the list.</summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.First">
            <summary>The first value in the list, or default(T) if the list is empty.</summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.Last">
            <summary>The last value in the list, or default(T) if the list is empty.</summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.Current">
            <summary>
            The current value being iterated, or default(T) if the list is not being iterated. Throws a
            MemberAccessException if you try to set it while not iterating the list.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.Item(System.Int32)">
            <summary>Gets/Sets the value at an index.</summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>Indicates if this list is read only. Returns false.</summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.System#Collections#IList#IsReadOnly">
            <summary>Indicates if this list is read only. Returns false.</summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.System#Collections#IList#IsFixedSize">
            <summary>Indicates if this list is a fixed size. Returns false.</summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.System#Collections#ICollection#SyncRoot">
            <summary>Object used to synchronize access to the collection. Returns this.</summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.System#Collections#ICollection#IsSynchronized">
            <summary>Is this collection thread safe? Returns false.</summary>
        </member>
        <member name="P:KS.Reactor.ksLinkedList`1.System#Collections#IList#Item(System.Int32)">
            <summary>Gets/Sets the value at an index.</summary>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.Add(`0)">
            <summary>Adds a value to the end of the list.</summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.Insert(System.Int32,`0)">
            <summary>Inserts a value at a specified index.</summary>
            <param name="index">Index to insert value at.</param>
            <param name="value">Value to insert.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.InsertPrevious(`0)">
            <summary>
            Inserts a value before the current iterator position, or at the start of the list if not iterating.
            </summary>
            <param name="value">Value to insert.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.InsertNext(`0)">
            <summary>
            Inserts a value after the current iterator position, or at the end of the list if not iterating.
            </summary>
            <param name="value">Value to insert.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.RemoveCurrent">
            <summary>
            Removes the value at the current iterator position. Does nothing if not iterating, or if the current
            iterator position was already removed.
            </summary>
            <returns>True if a value was removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a value from the list. If the list is currently iterating and the iterated
            value matches the given value, will remove the iterated node instead of the first occurrence.
            </summary>
            <param name="value">Value to remove.</param>
            <returns>True if the value was found and removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.RemoveAt(System.Int32)">
            <summary>Removes the value at a specified index.</summary>
            <param name="index">Index of value to remove.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.Clear">
            <summary>Removes everything from the list.</summary>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.IndexOf(`0)">
            <summary>Finds the index of the first occurrence of a value.</summary>
            <param name="value">Value to search for.</param>
            <returns>Index of the value, or -1 if the value was not found.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.Contains(`0)">
            <summary>Checks if a value is in the list.</summary>
            <param name="value">Value to check for.</param>
            <returns>True if the value is in the list.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the contents of the list to an array.</summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Array index to start copying to.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.GetEnumerator">
            <summary>Gets the enumerator for the list.</summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator for the list.</summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.ValidateIndex(System.Int32,System.Int32)">
            <summary>Throws an exception if the index is not valid.</summary>
            <param name="index">Index to validate.</param>
            <param name="count">Count to test index against.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.ValidateIndex(System.Int32)">
            <summary>Throws an exception if the index is not valid.</summary>
            <param name="index">Index to validate.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.GetNodeAt(System.Int32)">
            <summary>Gets the node at an index.</summary>
            <param name="index">Index of node to get.</param>
            <returns>Node at the index.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.Remove(KS.Reactor.ksLinkedList{`0}.Node,KS.Reactor.ksLinkedList{`0}.Node)">
            <summary>Removes a node from the list.</summary>
            <param name="previous">
            Previous node before the node to remove. Null if the node to remove is the first in the list.
            </param>
            <param name="node">Node to remove.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.System#Collections#IList#Add(System.Object)">
            <summary>Adds a value to the end of the list.</summary>
            <param name="value">Value to add.</param>
            <returns>Index the value was added at.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.System#Collections#IList#Contains(System.Object)">
            <summary>Checks if a value is in the list.</summary>
            <param name="value">Value to check for.</param>
            <returns>True if the value is in the list.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>Finds the index of the first occurrence of a value.</summary>
            <param name="value">Value to search for.</param>
            <returns>Index of the value, or -1 if the value was not found.</returns>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>Inserts a value at a specified index.</summary>
            <param name="index">Index to insert value at.</param>
            <param name="value">Value to insert.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a value from the list. If the list is currently iterating and the iterated
            value matches the given value, will remove the iterated node instead of the first occurrence.
            </summary>
            <param name="value">Value to remove.</param>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies the contents of the list to an array.</summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Array index to start copying to.</param>
        </member>
        <member name="T:KS.Reactor.ksLinkedList`1.Node">
            <summary>Linked list node.</summary>
        </member>
        <member name="M:KS.Reactor.ksLinkedList`1.Node.#ctor(`0)">
            <summary>Constructor.</summary>
            <param name="value"></param>
        </member>
        <member name="T:KS.Reactor.ksLog">
            <summary>
            Static logger class. Log messages have a level and a channel string that can be used to filter log messages.
            Channels can have parent channels. Any message a channel receives will also be sent to all of it's parent 
            channels. Channels are seperated by ".", with children channel following parents. All channels are children of
            the root channel. If a non-string object is passed as channel parameter T to a log function, the channel string
            will be [namespace.classname].
            Example:
             ksLog.Info("X.Y", "This message will be received by channels 'X.Y', 'X', and 'Root');
            </summary>
            Static logger class. Log messages have a level and a channel string that can be used to filter log messages.
            Channels can have parent channels. Any message a channel receives will also be sent to all of it's parent channels.
            Channels are seperated by ".", with children channel following parents. All channels are children of the root channel.
            If a non-string object is passed as channel parameter T to a log function, the channel string will be [namespace.classname].
            Example:
             ksLog.Info("X.Y", "This message will be received by channels 'X.Y', 'X', and 'Root');
        </member>
        <member name="T:KS.Reactor.ksLog.LogHandler">
            <summary>Delegate for logging a message.</summary>
            <param name="level">Level of the message.</param>
            <param name="channel">Channel the message was sent to.</param>
            <param name="message">Message to log. May be null if exception is provided.</param>
            <param name="exception">Exception to log. May be null if message is provided.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="T:KS.Reactor.ksLog.Level">
            <summary>Log levels.</summary>
        </member>
        <member name="T:KS.Reactor.ksLog.Logger">
            <summary>Associates a handler delegate with a level mask.</summary>
        </member>
        <member name="F:KS.Reactor.ksLog.ROOT_CHANNEL">
            <summary>Name of the root channel.</summary>
        </member>
        <member name="F:KS.Reactor.ksLog.m_loggers">
            <summary>Maps channels to lists of loggers.</summary>
        </member>
        <member name="M:KS.Reactor.ksLog.#ctor">
            <summary>Private constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksLog.Debug``1(``0,System.String)">
            <summary>Logs a debug message.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Debug(System.String)">
            <summary>Logs a debug message to the root channel.</summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Debug``1(``0,System.String,System.Object)">
            <summary>Logs a debug message.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Debug(System.String,System.Object)">
            <summary>Logs a debug message to the root channel.</summary>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Info``1(``0,System.String)">
            <summary>Logs an info message.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Info(System.String)">
            <summary>Logs an info message to the root channel.</summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Info``1(``0,System.String,System.Object)">
            <summary>Logs an info message.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Info(System.String,System.Object)">
            <summary>Logs an info message to the root channel.</summary>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.ksLog.Warning``1(``0,System.String)" -->
        <member name="M:KS.Reactor.ksLog.Warning(System.String)">
            <summary>Logs a warning to the root channel.</summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Warning``1(``0,System.String,System.Object)">
            <summary>Logs a warning.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Warning(System.String,System.Object)">
            <summary>Logs a warning to the root channel.</summary>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Error``1(``0,System.String)">
            <summary>Logs an error.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Error``1(``0,System.String,System.Exception)">
            <summary>Logs an error.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Error(System.String)">
            <summary>Logs an error to the root channel.</summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Error(System.String,System.Exception)">
            <summary>Logs an error to the root channel.</summary>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Error``1(``0,System.String,System.Object)">
            <summary>Logs an error.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Error``1(``0,System.String,System.Exception,System.Object)">
            <summary>Logs an error.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Error(System.String,System.Object)">
            <summary>Logs an error to the root channel.</summary>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Error(System.String,System.Exception,System.Object)">
            <summary>Logs an error to the root channel.</summary>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.LogException``1(``0,System.Exception)">
            <summary>Logs an exception.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.LogException(System.Exception)">
            <summary>Logs an exception to the root channel.</summary>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.LogException``1(``0,System.Exception,System.Object)">
            <summary>Logs an exception.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="exception">Exception to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.LogException(System.Exception,System.Object)">
            <summary>Logs an exception to the root channel.</summary>
            <param name="exception">Exception to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Fatal``1(``0,System.String,System.Exception)">
            <summary>Logs a fatal error.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Fatal(System.String,System.Exception)">
            <summary>Logs a fatal error to the root channel.</summary>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Fatal``1(``0,System.String,System.Object,System.Exception)">
            <summary>Logs a fatal error.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.Fatal(System.String,System.Object,System.Exception)">
            <summary>Logs a fatal error to the root channel.</summary>
            <param name="message">Message to log.</param>
            <param name="context">Object related to this message.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.FatalException``1(``0,System.Exception)">
            <summary>Logs a fatal exception.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.FatalException(System.Exception)">
            <summary>Logs a fatal exception to the root channel.</summary>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.FatalException``1(``0,System.Exception,System.Object)">
            <summary>Logs a fatal exception.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="exception">Exception to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.FatalException(System.Exception,System.Object)">
            <summary>Logs a fatal exception to the root channel.</summary>
            <param name="exception">Exception to log.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.RegisterHandler``1(``0,KS.Reactor.ksLog.LogHandler,KS.Reactor.ksLog.Level,System.Boolean)">
            Registers a log handler.
            
            @param   T channel to register to.
            @param   LogHandler handler to register.
            @param   Level levelMask filters messages by level.
            @param   bool allowBubbling - if false, logs handled by this handler will not be processed by handlers on
                     parent channels.
            <summary>Registers a log handler.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to register to.</param>
            <param name="handler">Handler to register.</param>
            <param name="levelMask">Filters messages by level.</param>
            <param name="allowBubbling">
            If false, logs handled by this handler will not be processed by handlers on parent channels.
            </param>
        </member>
        <member name="M:KS.Reactor.ksLog.RegisterHandler(KS.Reactor.ksLog.LogHandler,KS.Reactor.ksLog.Level,System.Boolean)">
            <summary>Registers a log handler to the root channel.</summary>
            <param name="handler">Handler to register.</param>
            <param name="levelMask">Filters messages by level.</param>
            <param name="allowBubbling">
            If false, logs handled by this handler will not be processed by handlers on parent channels.
            </param>
        </member>
        <member name="M:KS.Reactor.ksLog.UnregisterHandler``1(``0,KS.Reactor.ksLog.LogHandler)">
            <summary>Unregisters a log handler.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to unregister from.</param>
            <param name="handler">Handler to unregister.</param>
            <returns>True if the handler was found and removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksLog.UnregisterHandler(KS.Reactor.ksLog.LogHandler)">
            <summary>Unregisters a log handler from the root channel.</summary>
            <param name="handler">Handler to unregister.</param>
            <returns>True if the handler was found and removed.</returns>
        </member>
        <member name="M:KS.Reactor.ksLog.GetChannelName``1(``0)">
            <summary>Converts a Template T to a channel name.</summary>
            <typeparam name="T">Channel to convert to channel name.</typeparam>
            <param name="channel">Channel name.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksLog.Log``1(``0,System.String,System.Exception,KS.Reactor.ksLog.Level,System.Object)">
            <summary>Logs a message.</summary>
            <typeparam name="T"></typeparam>
            <param name="channel">Channel to log to.</param>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
            <param name="level">Level of message.</param>
            <param name="context">Object related to this message.</param>
        </member>
        <member name="M:KS.Reactor.ksLog.HandleLog(System.String,System.String,System.String,System.Exception,KS.Reactor.ksLog.Level,System.Object)">
            <summary>Sends a log message to all handlers on a channel.</summary>
            <param name="channel">Channel the message was logged to.</param>
            <param name="handlerChannel">Channel handling the message. May be a parent of channel.</param>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
            <param name="level">Level of message.</param>
            <param name="context">Object related to this message.</param>
            <returns>True if parent channels should process this message.</returns>
        </member>
        <member name="F:KS.Reactor.ksLog.MAX_LENGTH">
            Maximum number of characters in a log statement before it is split up into multiple log statements. This is
            to prevent Unity from breaking because a log statement is too long. This is a bit shorter than Unity's
            maximum (16384) since some extra text is added to each message (log level, channel, etc.).
        </member>
        <member name="M:KS.Reactor.ksLog.#cctor">
            Static initialization. Registers a Unity log handlers.
        </member>
        <member name="M:KS.Reactor.ksLog.LogToUnity(KS.Reactor.ksLog.Level,System.String,System.String,System.Exception,System.Object)">
            Passes a log message to Unity's logger.
            
            @param   Level level of the message.
            @param   string channel the message was sent to.
            @param   message to log. May be null if exception is provided.
            @param   Exception exception to log. May be null if message is provided.
            @param   object context - object related to this message.
        </member>
        <member name="M:KS.Reactor.ksLog.LogToUnity(KS.Reactor.ksLog.Level,System.String,System.String,System.Object,System.Int32,System.Int32)">
            Passes a log message to Unity's logger.
            
            @param   Level level of the message.
            @param   string channel the message was sent to.
            @param   string message to log.
            @param   int part - if the log statement was split in to multiple parts, this is the part number, starting
                     from 0.
            @param   int total number of parts the log statement was split into.
        </member>
        <member name="M:KS.Reactor.ksLog.SplitLog(KS.Reactor.ksLog.Level,System.String,System.String,System.Object)">
            Splits a log statement into multiple smaller log statements that are less than MAX_LENGTH characters, and
            logs them.
            
            @param   Level level of the message.
            @param   string channel the message was sent to.
            @param   message to log.
            @param   object context - object related to this message.
        </member>
        <member name="T:KS.Reactor.ksMath">
            <summary>
            Collection of frequently used math algorithms and coversions of <see cref="T:System.Math"/> methods 
            which operate on and return float values.
            </summary>
        </member>
        <member name="F:KS.Reactor.ksMath.Epsilon">
            <summary>
            Smallest float value that does not equate to 0. On ARM systems, the value of the Epsilon constant is too 
            small to be detected, so it equates to zero. In this case we use the value 1.175494E-38f.
            <see cref="!:https://docs.microsoft.com/en-us/dotnet/api/system.single.epsilon?view=net-6.0#platform-notes"/>
            </summary>
        </member>
        <member name="M:KS.Reactor.ksMath.CountSetBits(System.Int32)">
            <summary>
            Count the number of bits set in an int
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.MaxSetBit(System.Int32)">
            <summary>
            Get the highest bit set from 1 to 32. If no bits are set, then this method returns 0.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.ClosestPowerOfTwo(System.Int32)">
            <summary>
            Returns the closest power of two value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.IsPowerOfTwo(System.Int32)">
            <summary>
            Returns true if the value is power of two.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is equal to, or greater than, the argument.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.PerlinNoise(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generate Perlin noise.
            </summary>
            <param name="x">X value</param>
            <param name="y">Y value</param>
            <param name="z">Z value</param>
            <param name="range">Values will be remapped onto [0...range) using value%range.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Sin(System.Single)">
            <summary>
            Returns the sine of angle f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Cos(System.Single)">
            <summary>
            Returns the cosine of angle f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Tan(System.Single)">
            <summary>
            Returns the tangent of angle f in radians.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Asin(System.Single)">
            <summary>
            Returns the absolute value of f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Acos(System.Single)">
            <summary>
            Returns the arc-cosine of f - the angle in radians whose cosine is f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Atan(System.Single)">
            <summary>
            Returns the arc-tangent of f - the angle in radians whose tangent is f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Atan2(System.Single,System.Single)">
            <summary>
            Returns the angle in radians whose Tan is y/x.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Sqrt(System.Single)">
            <summary>
            Returns square root of f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Abs(System.Single)">
            <summary>
            Returns the absolute value of f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Abs(System.Int32)">
            <summary>
            Returns the absolute value of f.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Min(System.Single,System.Single)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Min(System.Single[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Min(System.Int32[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Max(System.Single,System.Single)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Max(System.Single[])">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Max(System.Int32,System.Int32)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Max(System.Int32[])">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Pow(System.Single,System.Single)">
            <summary>
            Returns f raised to power p.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Exp(System.Single)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Log(System.Single,System.Single)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Log(System.Single)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Log10(System.Single)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Ceil(System.Single)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Floor(System.Single)">
            <summary>
            Returns the largest integer smaller than or equal to f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Round(System.Single)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.CeilToInt(System.Single)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.FloorToInt(System.Single)">
            <summary>
            Returns the largest integer smaller to or equal to f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.RoundToInt(System.Single)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Sign(System.Single)">
            <summary>
            Returns the sign of f.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the given value between the given minimum float and maximum float values.
            Returns the given value if it is within the min and max range.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the given value between the given minimum int and maximum int values.
            Returns the given value if it is within the min and max range.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Clamp01(System.Single)">
            <summary>
            Clamps value between 0 and 1 and returns value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between a and b by t.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.LerpUnclamped(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between a and b by t with no limit to t.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.LerpAngle(System.Single,System.Single,System.Single)">
            <summary>
            Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Moves a value current towards target. A negative value moves the value away from the target.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDelta"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.MoveTowardsAngle(System.Single,System.Single,System.Single)">
            <summary>
            Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDelta"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between min and max with smoothing at the limits.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Gamma(System.Single,System.Single,System.Single)">
            <summary>
            Normalize a value between negative <paramref name="absmax"/> and positive <paramref name="absmax"/> 
            to -1...1 then raise the result to a power before remapping it into negative <paramref name="absmax"/>
            to <paramref name="absmax"/>.
            </summary>
            <param name="value"></param>
            <param name="absmax"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Approximately(System.Single,System.Single,System.Single)">
            <summary>
            Compares two floating point values and returns true if they are similar.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance">
            This value is mulitplied by the largest of a or b to determine the 
            value used for the comparison.
            </param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            Gradually changes a value towards a desired goal over time.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="currentVelocity"></param>
            <param name="smoothTime"></param>
            <param name="deltaTime"></param>
            <param name="maxSpeed"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            Gradually changes an angle given in degrees towards a desired goal angle over time.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="currentVelocity"></param>
            <param name="smoothTime"></param>
            <param name="deltaTime"></param>
            <param name="maxSpeed"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Repeat(System.Single,System.Single)">
            <summary>
            Loops the value t, so that it is never larger than length and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.PingPong(System.Single,System.Single)">
            <summary>
            PingPong returns a value that will increment and decrement between the value 0 and length.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the linear parameter t that produces the interpolant value within the range [a, b].
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.DeltaAngle(System.Single,System.Single)">
            <summary>
            Calculates the shortest difference between two given angles given in degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.LineIntersection(KS.Reactor.ksVector2,KS.Reactor.ksVector2,KS.Reactor.ksVector2,KS.Reactor.ksVector2,KS.Reactor.ksVector2@)">
            <summary>
            Check if the line (p1,p2) intersects with line (p3, p4)
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.LineSegmentIntersection(KS.Reactor.ksVector2,KS.Reactor.ksVector2,KS.Reactor.ksVector2,KS.Reactor.ksVector2,KS.Reactor.ksVector2@)">
            <summary>
            Check if the line segment (p1,p2) intersects with the line segment (p3, p4)
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMath.Interpolate(System.Single,System.Single,System.Single,KS.Reactor.ksMath.Interpolation)">
            <summary>
            Interpolate between the value a and b according to an interpolation method.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksMultiType">
            <summary>
            Wraps a byte array and provides methods for interpreting/serializing/deserializing the data as different types.
            </summary>
            Wraps a byte array and provides methods for interpreting/serializing/deserializing the data as different types.
        </member>
        <member name="T:KS.Reactor.ksMultiType.Types">
            <summary>Data types that ksMultiTypes can store.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.OnSet">
            <summary>Called when the value is set.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.Initialize">
            <summary>Initialization functions for when type is not known at compile time.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.Convert">
            <summary>Conversions functions for when type is not known at compile time.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#cctor">
            <summary>
            Initializes maps of initialization and conversion delegates for when type is not known at compile time.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.Type">
            <summary>Type of value.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.Data">
            <summary>The underlying byte array.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.IsArray">
            <summary>Is the multitype an array?</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.TypeSize">
            <summary>Size of type, factoring in array length. -1 for variable length types.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.ArrayLength">
            <summary>Array length.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.IsSupported(System.Type)">
            <summary>Checks if a type can be converted to a ksMultiType.</summary>
            <param name="type">Type to check.</param>
            <returns>True if the type is supported.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.Create(System.Byte[],KS.Reactor.ksMultiType.Types,System.Int32)">
            <summary>Constructs a multitype directly from a byte array without making a copy of the data.</summary>
            <param name="data">Byte array data.</param>
            <param name="type">Type of value.</param>
            <param name="arrayLength">
            Array length. -1 for non-array types. If less than -1, the length of the data will be used.
            </param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.Clone">
            <summary>Create a copy of this multi type.</summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Object,System.Type)">
            <summary>Constructor for arbitrary type. Use this when you don't know the type at compile time.</summary>
            <param name="value">Value</param>
            <param name="type">Type of value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.GetValue(System.Type)">
            <summary>
            Gets the value as an arbitrary type. Use this when you don't know the type at compile time.
            Logs a warning if the multitype cannot be converted to the <paramref name="type"/>.
            </summary>
            <param name="type">Type to get value as.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.TryGetValue(System.Type,System.Object@)">
            <summary>
            Tries to get the value as an arbitrary type. Use this when you don't know the type at compile time.
            </summary>
            <param name="type">Type to get value as.</param>
            <param name="value">
            The converted value of the multitype, or null if it cannot be converted to <paramref name="type"/>.
            </param>
            <returns>True if the multitype could be converted to <paramref name="type"/>.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Int32)">
            <summary>Constructor.</summary>
            <param name="value">Int value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Int32[])">
            <summary>Constructor.</summary>
            <param name="value">Int array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.Int">
            <summary>The value as an int.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.IntArray">
            <summary>The value as an int array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Int32)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from int to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Int32">
            <summary>Implicit conversion from ksMultiType to int.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Int32[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from int array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Int32[]">
            <summary>Implicit conversion from ksMultiType to int array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.GetInt(System.Int32@)">
            <summary>
            Gets the value at an index as an int. Converts to int if the value is of a different type.
            </summary>
            <param name="index">Index to get int from.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Single)">
            <summary>Constructor.</summary>
            <param name="value">Float value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Single[])">
            <summary>Constructor.</summary>
            <param name="value">Float array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.Float">
            <summary>The value as a float.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.FloatArray">
            <summary>The value as a float array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Single)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from float to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Single">
            <summary>Implicit conversion from ksMultiType to float.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Single[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from float array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Single[]">
            <summary>Implicit conversion from ksMultiType to float array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.GetFloat(System.Int32@)">
            <summary>
            Gets the value at an index as a float. Converts to float if the value is of a different type.
            </summary>
            <param name="index">Index to get float from.</param>
            <returns>Float value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="value">String value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.String[])">
            <summary>Constructor.</summary>
            <param name="value">String array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.String">
            <summary>The value as a string.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.StringArray">
            <summary>The value as a string array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.String)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from string to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.String">
            <summary>Implicit conversion from ksMultiType to string.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.String[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from string array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.String[]">
            <summary>Implicit conversion from ksMultiType to string array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.GetString(System.Int32@)">
            <summary>
            Gets the value at an index as a string. Converts to string if the value is of a different type.
            </summary>
            <param name="index">Index to get string from.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.SetString(System.Int32@,System.String)">
            <summary>Sets the value at an index to a string.</summary>
            <param name="index">Index to set.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ParseString(System.Int32@)">
            <summary>Parses the value at an index as a string.</summary>
            <param name="index">Index to parse string from.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Boolean)">
            <summary>Constructor.</summary>
            <param name="value">Bool value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Boolean[])">
            <summary>Constructor.</summary>
            <param name="value">Bool array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.Bool">
            <summary>The value as a bool.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.BoolArray">
            <summary>The value as a bool array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Boolean)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from bool to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Boolean">
            <summary>Implicit conversion from ksMultiType to bool.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Boolean[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from iboolnt array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Boolean[]">
            <summary>Implicit conversion from ksMultiType to bool array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.GetBool(System.Int32@)">
            <summary>
            Gets the value at an index as a bool. Converts to bool if the value is of a different type.
            </summary>
            <param name="index">Index to get bool from.</param>
            <returns>Bool value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.SetBool(System.Int32@,System.Boolean)">
            <summary>Sets the value at an index to a bool.</summary>
            <param name="index">Index to set.</param>
            <param name="value">Bool value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ParseBool(System.Int32@)">
            <summary>Parses the value at an index as a bool.</summary>
            <param name="index">Index to parse bool from.</param>
            <returns>Bool value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.UInt32)">
            <summary>Constructor.</summary>
            <param name="value">Uint value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.UInt32[])">
            <summary>Constructor.</summary>
            <param name="value">Uint array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.UInt">
            <summary>The value as a uint.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.UIntArray">
            <summary>The value as a uint array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.UInt32)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from uint to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.UInt32">
            <summary>Implicit conversion from ksMultiType to uint.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.UInt32[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from uint array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.UInt32[]">
            <summary>Implicit conversion from ksMultiType to uint array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.GetUInt(System.Int32@)">
            <summary>
            Gets the value at an index as a uint. Converts to uint if the value is of a different type.
            </summary>
            <param name="index">Index to get uint from.</param>
            <returns>Uint value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Byte)">
            <summary>Constructor.</summary>
            <param name="value">Byte value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Byte[])">
            <summary>Constructor.</summary>
            <param name="value">Byte array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.Byte">
            <summary>The value as a byte.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.ByteArray">
            <summary>The value as a byte array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Byte)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from byte to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Byte">
            <summary>Implicit conversion from ksMultiType to byte.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Byte[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from byte array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Byte[]">
            <summary>Implicit conversion from ksMultiType to byte array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.GetByte(System.Int32@)">
            <summary>
            Gets the value at an index as a byte. Converts to byte if the value is of a different type.
            </summary>
            <param name="index">Index to get byte from.</param>
            <returns>Byte value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.SetByte(System.Int32@,System.Byte)">
            <summary>Sets the value at an index to a byte.</summary>
            <param name="index">Index to set.</param>
            <param name="value">Byte value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ParseByte(System.Int32@)">
            <summary>Parses the value at an index as a byte.</summary>
            <param name="index">Index to parse byte from.</param>
            <returns>Byte value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Int64)">
            <summary>Constructor.</summary>
            <param name="value">Long value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(System.Int64[])">
            <summary>Constructor.</summary>
            <param name="value">Long array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.Long">
            <summary>The value as a long.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.LongArray">
            <summary>The value as a long array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Int64)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from long to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Int64">
            <summary>Implicit conversion from ksMultiType to long.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(System.Int64[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from long array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~System.Int64[]">
            <summary>Implicit conversion from ksMultiType to long array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.GetLong(System.Int32@)">
            <summary>
            Gets the value at an index as a long. Converts to long if the value is of a different type.
            </summary>
            <param name="index">Index to get long from.</param>
            <returns>Long value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(KS.Reactor.ksVector3)">
            <summary>Constructor.</summary>
            <param name="value">ksVector3 value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(KS.Reactor.ksVector3[])">
            <summary>Constructor.</summary>
            <param name="value">ksVector3 array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.KSVector3">
            <summary>The value as a ksVector3.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.KSVector3Array">
            <summary>The value as a ksVector3 array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksVector3)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from ksVector3 to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~KS.Reactor.ksVector3">
            <summary>Implicit conversion from ksMultiType to ksVector3.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksVector3[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from ksVector3 array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~KS.Reactor.ksVector3[]">
            <summary>Implicit conversion from ksMultiType to ksVector3 array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(KS.Reactor.ksVector2)">
            <summary>Constructor.</summary>
            <param name="value">ksVector2 value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(KS.Reactor.ksVector2[])">
            <summary>Constructor.</summary>
            <param name="value">ksVector2 array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.KSVector2">
            <summary>The value as a ksVector2.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.KSVector2Array">
            <summary>The value as a ksVector2 array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksVector2)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from ksVector2 to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~KS.Reactor.ksVector2">
            <summary>Implicit conversion from ksMultiType to ksVector2.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksVector2[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from ksVector2 array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~KS.Reactor.ksVector2[]">
            <summary>Implicit conversion from ksMultiType to ksVector2 array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(KS.Reactor.ksQuaternion)">
            <summary>Constructor.</summary>
            <param name="value">ksQuaternion value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(KS.Reactor.ksQuaternion[])">
            <summary>Constructor.</summary>
            <param name="value">ksQuaternion array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.KSQuaternion">
            <summary>The value as a ksQuaternion.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.KSQuaternionArray">
            <summary>The value as a ksQuaternion array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksQuaternion)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from ksQuaternion to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~KS.Reactor.ksQuaternion">
            <summary>Implicit conversion from ksMultiType to ksQuaternion.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksQuaternion[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from ksQuaternion array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~KS.Reactor.ksQuaternion[]">
            <summary>Implicit conversion from ksMultiType to ksQuaternion array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(KS.Reactor.ksColor)">
            <summary>Constructor.</summary>
            <param name="value">ksColor value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(KS.Reactor.ksColor[])">
            <summary>Constructor.</summary>
            <param name="value">ksColor array value.</param>
        </member>
        <member name="P:KS.Reactor.ksMultiType.KSColor">
            <summary>The value as a ksColor.</summary>
        </member>
        <member name="P:KS.Reactor.ksMultiType.KSColorArray">
            <summary>The value as a ksColor array.</summary>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksColor)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from ksColor to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~KS.Reactor.ksColor">
            <summary>Implicit conversion from ksMultiType to ksColor.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksColor[])~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from ksColor array to ksMultiType.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~KS.Reactor.ksColor[]">
            <summary>Implicit conversion from ksMultiType to ksColor array.</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(KS.Reactor.ksIBufferable)">
            <summary>Constructor.</summary>
            <param name="value">ksIBufferable value.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.CreateBufferableArray``1(``0[])">
            <summary>Constructs a multitype from a an array of ksIBufferable types.</summary>
            <typeparam name="T"></typeparam>
            <param name="value">Array of a type that implements ksIBufferable.</param>
            <returns>ksMultiType</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.FromBufferable(KS.Reactor.ksIBufferable)">
            <summary>Stores a ksIBufferable in the multiType.</summary>
            <param name="value"></param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ToBufferable``1">
            <summary>Converts this multitype to a ksIBufferable object</summary>
            <typeparam name="T">T implements ksIBufferable.</typeparam>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ToBufferable(System.Type)">
            <summary>Converts this multitype to a ksIBufferable object.</summary>
            <param name="type">Type of ksIBufferable to convert to.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.FromBufferableArray``1(``0[])">
            <summary>Stores a ksIBufferable array in the multiType.</summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ToBufferableArray``1">
            <summary>Converts this multitype to a ksIBufferable[] object.</summary>
            <typeparam name="T">T implements ksIBufferable.</typeparam>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ConvertTo(KS.Reactor.ksMultiType.Types)">
            <summary>
            Converts the multitype to the given type.
            Eg. If the multi type is a float with value 3.14 and you convert to an int, the new int value will be 3.
            </summary>
            <param name="type">Type to convert to.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.Equals(KS.Reactor.ksMultiType)">
            <summary>Checks if this multi type has the same value as another multi type.</summary>
            <param name="multiType">Multi type to compare with.</param>
            <returns>True if the values are the same.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ToString">
            <summary>Gets the string representation of the value.</summary>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.FromJSON(KS.Reactor.ksJSON)">
            <summary>Constructs a multi type from JSON.</summary>
            <param name="json">
            ksJSON json to construct multitype from. Should be an object with two fields:
            type - the type corresponding to one of the Types enum values.
            value - the value of the multi type.
            </param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ToJSON">
            <summary>Gets the ksJSON representation of the value.</summary>
            <returns>The ksJSON representation of the value.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ToJSONArray``1(``0[],KS.Reactor.ksMultiType.JSONSerializer{``0})">
            <summary>Converts an array to a json array.</summary>
            <typeparam name="T">Array to convert.</typeparam>
            <param name="array">Serializer to serialize individual elements with.</param>
            <param name="serializer"></param>
            <returns>JSON array</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.ArrayToString``1(``0[])">
            <summary>Converts an array to a string.</summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array to convert.</param>
            <returns>String.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.CompareArrays``1(``0[],``0[])">
            <summary>Compares to arrays to see if they are equivalent.</summary>
            <typeparam name="T"></typeparam>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns>True if the arrays are the same.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.Get``1(KS.Reactor.ksMultiType.Getter{``0})">
            <summary>Generic getter.</summary>
            <typeparam name="T"></typeparam>
            <param name="getter">Getter to get value with.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.Set``1(``0,KS.Reactor.ksMultiType.Setter{``0},KS.Reactor.ksMultiType.Types,System.Int32)">
            <summary>Generic setter.</summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to set.</param>
            <param name="setter">Setter to set value with.</param>
            <param name="type">Type of value.</param>
            <param name="size">Size of data. If 0 or less, will be set to size of T.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.GetArray``1(KS.Reactor.ksMultiType.Getter{``0})">
            <summary>Generic array getter.</summary>
            <typeparam name="T"></typeparam>
            <param name="getter">Getter to get values with.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.SetArray``1(``0[],KS.Reactor.ksMultiType.Setter{``0},KS.Reactor.ksMultiType.Types,System.Int32)">
            <summary>Generic array setter.</summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to set.</param>
            <param name="setter">Setter to set values with.</param>
            <param name="type">Type of value.</param>
            <param name="size">Size of data. If 0 or less, will be set to size of T * value.Length.</param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.Set``1(System.Int32@,``0)">
            <summary>Sets the value at an index to a T struct.</summary>
            <typeparam name="T"></typeparam>
            <param name="index">Index to set.</param>
            <param name="value"></param>
        </member>
        <member name="M:KS.Reactor.ksMultiType.Parse``1(System.Int32@)">
            <summary>Parses the value at an index as a T struct.</summary>
            <typeparam name="T"></typeparam>
            <param name="index">Index to parse int from.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.IsNumeric(KS.Reactor.ksMultiType.Types)">
            <summary>Is the type numeric?</summary>
            <param name="t">ksMultitype type.</param>
            <returns>True if the type is (byte, int, uint, long, or float).</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.CombinedType(KS.Reactor.ksMultiType.Types,KS.Reactor.ksMultiType.Types)">
            <summary>
            Gets the resulting type when combining two ksMultitype types with an arithmetic operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Addition(System.String,KS.Reactor.ksMultiType)">
            <summary>String concatenation.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>Concatenated string.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Addition(KS.Reactor.ksMultiType,System.String)">
            <summary>String concatenation.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>Concatenated string.</returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Addition(KS.Reactor.ksMultiType,KS.Reactor.ksMultiType)">
            <summary>MultiType addition or concatination.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Subtraction(KS.Reactor.ksMultiType,KS.Reactor.ksMultiType)">
            <summary>MultiType subtraction.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Multiply(KS.Reactor.ksMultiType,KS.Reactor.ksMultiType)">
            <summary>MultiType multiplication.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Division(KS.Reactor.ksMultiType,KS.Reactor.ksMultiType)">
            <summary>MultiType division.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Modulus(KS.Reactor.ksMultiType,KS.Reactor.ksMultiType)">
            <summary>MultiType modulus.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Increment(KS.Reactor.ksMultiType)">
            <summary>MultiType increment.</summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Decrement(KS.Reactor.ksMultiType)">
            <summary>MultiType decrement.</summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksMultiType.MultiTypeUnityExtender.#ctor">
            Initializes conversion and initialization functions for Unity Vector2, Vector3 and Quaternions.
        </member>
        <member name="T:KS.Reactor.ksMultiType.SerializableData">
            Constains data for Unity to serialize.
        </member>
        <member name="M:KS.Reactor.ksMultiType.UnityEngine#ISerializationCallbackReceiver#OnBeforeSerialize">
            Copies data from the multitype onto the object that Unity can serialize.
        </member>
        <member name="M:KS.Reactor.ksMultiType.UnityEngine#ISerializationCallbackReceiver#OnAfterDeserialize">
            Copies serialized Unity data onto the multitype.
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(UnityEngine.Vector3)">
            Constructor
            
            @param   Vector3 value
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(UnityEngine.Vector3[])">
            Constructor
            
            @param   Vector3[] value
        </member>
        <member name="P:KS.Reactor.ksMultiType.Vector3">
            The value as a Vector3.
        </member>
        <member name="P:KS.Reactor.ksMultiType.Vector3Array">
            The value as a Vector3 array.
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(UnityEngine.Vector3)~KS.Reactor.ksMultiType">
            Implicit conversion from Vector3 to ksMultiType.
            
            @param   Vector3 value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~UnityEngine.Vector3">
            Implicit conversion from ksMultiType to Vector3.
            
            @param   ksMultiType value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(UnityEngine.Vector3[])~KS.Reactor.ksMultiType">
            Implicit conversion from Vector3[] to ksMultiType.
            
            @param   Vector3[] value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~UnityEngine.Vector3[]">
            Implicit conversion from ksMultiType to Vector3[].
            
            @param   ksMultiType value
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(UnityEngine.Vector2)">
            Constructor
            
            @param   Vector2 value
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(UnityEngine.Vector2[])">
            Constructor
            
            @param   Vector2[] value
        </member>
        <member name="P:KS.Reactor.ksMultiType.Vector2">
            The value as a Vector2.
        </member>
        <member name="P:KS.Reactor.ksMultiType.Vector2Array">
            The value as a Vector2 array.
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(UnityEngine.Vector2)~KS.Reactor.ksMultiType">
            Implicit conversion from Vector2 to ksMultiType.
            
            @param   Vector2 value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~UnityEngine.Vector2">
            Implicit conversion from ksMultiType to Vector2.
            
            @param   ksMultiType value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(UnityEngine.Vector2[])~KS.Reactor.ksMultiType">
            Implicit conversion from Vector2[] to ksMultiType.
            
            @param   Vector2[] value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~UnityEngine.Vector2[]">
            Implicit conversion from ksMultiType to Vector2[].
            
            @param   ksMultiType value
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(UnityEngine.Quaternion)">
            Constructor
            
            @param   Quaternion value
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(UnityEngine.Quaternion[])">
            Constructor
            
            @param   Quaternion[] value
        </member>
        <member name="P:KS.Reactor.ksMultiType.Quaternion">
            The value as a Quaternion.
        </member>
        <member name="P:KS.Reactor.ksMultiType.QuaternionArray">
            The value as a Quaternion array.
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(UnityEngine.Quaternion)~KS.Reactor.ksMultiType">
            Implicit conversion from Quaternion to ksMultiType.
            
            @param   Quaternion value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~UnityEngine.Quaternion">
            Implicit conversion from ksMultiType to Quaternion.
            
            @param   ksMultiType value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(UnityEngine.Quaternion[])~KS.Reactor.ksMultiType">
            Implicit conversion from Quaternion[] to ksMultiType.
            
            @param   Quaternion[] value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~UnityEngine.Quaternion[]">
            Implicit conversion from ksMultiType to Quaternion[].
            
            @param   ksMultiType value
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(UnityEngine.Color)">
            Constructor
            
            @param   Color value
        </member>
        <member name="M:KS.Reactor.ksMultiType.#ctor(UnityEngine.Color[])">
            Constructor
            
            @param   Color[] value
        </member>
        <member name="P:KS.Reactor.ksMultiType.Color">
            The value as a Color.
        </member>
        <member name="P:KS.Reactor.ksMultiType.ColorArray">
            The value as a Color array.
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(UnityEngine.Color)~KS.Reactor.ksMultiType">
            Implicit conversion from Color to ksMultiType.
            
            @param   Color value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~UnityEngine.Color">
            Implicit conversion from ksMultiType to Color.
            
            @param   ksMultiType value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(UnityEngine.Color[])~KS.Reactor.ksMultiType">
            Implicit conversion from Color[] to ksMultiType.
            
            @param   Color[] value
        </member>
        <member name="M:KS.Reactor.ksMultiType.op_Implicit(KS.Reactor.ksMultiType)~UnityEngine.Color[]">
            Implicit conversion from ksMultiType to Color[].
            
            @param   ksMultiType value
        </member>
        <member name="T:KS.Reactor.ksNoUnityProxyAttribute">
            <summary>Server scripts tagged with this will not have Unity proxy scripts generated for them.</summary>
        </member>
        <member name="T:KS.Reactor.ksObjectPool`1">
            <summary>
            Maintains a pool of objects derived from classes with default constructors. When an object is not found in the
            pool, a new object is created using a default constructor. An internal hashset guarantees that only a single
            instance of an object will exist in the object pool at any given time.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksObjectPool`1.Instance">
            <summary>Static instance.</summary>
        </member>
        <member name="M:KS.Reactor.ksObjectPool`1.ToString">
            <summary>Returns a string summarizing the usage stats of the object pool.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksObjectPool`1.Create(System.Int32)">
            <summary>Creates new objects and add them to the pool.</summary>
            <param name="amount">Amount of objects to create.</param>
        </member>
        <member name="M:KS.Reactor.ksObjectPool`1.Fetch">
            <summary>
            Fetch an instance of the object from the pool. If the pool is empty, then create a default object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksObjectPool`1.Return(`0)">
            <summary>Returns an object to the pool. If the object.</summary>
            <param name="obj">Pool object.</param>
        </member>
        <member name="T:KS.Reactor.ksEventSet`1">
            <summary>Tracks events in a hashset.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:KS.Reactor.ksEventSet`1.op_Addition(KS.Reactor.ksEventSet{`0},`0)">
            <summary>Adds an event handler to the event.</summary>
            <param name="lhs">Event to add handler to.</param>
            <param name="rhs">Handler to add.</param>
            <returns>lhs</returns>
        </member>
        <member name="M:KS.Reactor.ksEventSet`1.op_Subtraction(KS.Reactor.ksEventSet{`0},`0)">
            <summary>Adds an event handler to the event.</summary>
            <param name="lhs">Event to add handler to.</param>
            <param name="rhs">Handler to add.</param>
            <returns>lhs</returns>
        </member>
        <member name="T:KS.Reactor.ksOrderedEvents`1">
            <summary>Tracks event sets in a sorted dictionary.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksOrderedEvents`1.Item(System.Int32)">
            <summary>Gets the event for a key.</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksOverlapResult">
            <summary>Result of an overlap scene query.</summary>
        </member>
        <member name="F:KS.Reactor.ksOverlapResult.Entity">
            <summary>Overlapped entity</summary>
        </member>
        <member name="F:KS.Reactor.ksOverlapResult.Collider">
            <summary>Overlapped collider</summary>
        </member>
        <member name="T:KS.Reactor.ksPerlinNoise">
            <summary>
            Adaption of the the perlin noise code found at http://adrianb.io/2014/08/09/perlinnoise.html
            </summary>
        </member>
        <member name="M:KS.Reactor.ksPerlinNoise.#cctor">
            <summary>
            Static initializer for the doubled permutation array.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksPerlinNoise.GetValue(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate a Perlin noise value at a coordinate
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="range"></param>
            <returns>Perlin noise value.</returns>
        </member>
        <member name="M:KS.Reactor.ksPerlinNoise.GetValue(System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Generate a Perlin noise value by adding mulitple values over multiple passes at different frequencies.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="octaves">Number of passes to combine</param>
            <param name="persistence">
            The amount a noise pass is scaled by in each pass. Scaling is applied repreatedly in each pass. 
            </param>
            <param name="range"></param>
            <returns>Perline noise value.</returns>
        </member>
        <member name="M:KS.Reactor.ksPerlinNoise.Grad(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Maps coordinate values into a single unique value.
            </summary>
            <param name="hash"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksPerlinNoise.Fade(System.Double)">
            <summary>
            Fade function as defined by Ken Perlin. This eases coordinate values
            so that they will "ease" towards integral values.  This ends up smoothing
            the final output.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksPerlinNoise.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolate between two valuea a and b by t.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksPlayerAPI">
            <summary>Implementation of the ksPlayerAPI used for player requests.</summary>
        </member>
        <member name="T:KS.Reactor.ksPlayerAPI.DeviceTypes">
            <summary>Recognized device types.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerAPI.SessionExpiry">
            <summary>
            How long in hours it takes a session created by a login request to expire with no activity.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksPlayerAPI.Session">
            <summary>
            Player session information with implementation of the API requests that require an authenticated player.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerAPI.Session.IsValid">
            <summary>Check if the session is valid.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerAPI.Session.PlayerId">
            <summary>Return the player ID.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerAPI.Session.Token">
            <summary>Return the session token.</summary>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Session.#ctor(KS.Reactor.ksPlayerAPI,System.String,System.String)">
            <summary>Constructs a new player session .</summary>
            <param name="playerAPI">PlayerAPI instance that constructed this session.</param>
            <param name="playerId">Player ID.</param>
            <param name="token">Session token.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Session.#ctor(KS.Reactor.ksPlayerAPI,System.String)">
            <summary>Creates a session from a base64 encoded session string.</summary>
            <param name="playerAPI">PlayerAPI instance that constructed this session.</param>
            <param name="encodedSession">Encoded session.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Session.Authenticate(KS.Reactor.ksPlayerAPI.LoginCallback,System.Object)">
            <summary>Authenticate the current session.</summary>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Session.Logout(KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Invalidate a ksPlayerAPI.Session.</summary>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Session.LinkDeviceID(System.String,KS.Reactor.ksPlayerAPI.DeviceTypes,KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Links a device ID to the current active session.</summary>
            <param name="deviceId">Device ID.</param>
            <param name="deviceType">Device type.</param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Session.LinkPassword(System.String,System.String,System.String,KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Links a password credential to the current active session.</summary>
            <param name="email"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Session.UnlinkDeviceID(System.String,KS.Reactor.ksPlayerAPI.DeviceTypes,KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Unlinks a device ID from the current active session.</summary>
            <param name="deviceId">Device ID.</param>
            <param name="deviceType">Device type.</param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Session.UnlinkPassword(KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Unlinks a password credential from the current active session.</summary>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Session.ToBase64">
            <summary>
            Encodes the player ID and token as a base64 encode string that can be used save and restore sessions.
            </summary>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksPlayerAPI.LoginCallback">
            <summary>Callback for all login requests.</summary>
            <param name="error">Error message.</param>
            <param name="session">Session created on a successful login.</param>
            <param name="asyncState">Asynchronous state object.</param>
        </member>
        <member name="T:KS.Reactor.ksPlayerAPI.GenericCallback">
            <summary>Generic callback with no return data.</summary>
            <param name="error">Error message.</param>
            <param name="asyncState">Asynchronous state object.</param>
        </member>
        <member name="T:KS.Reactor.ksPlayerAPI.RequestHandler">
            <summary>Web request handler for API calls.</summary>
            <param name="url">URL.</param>
            <param name="headers">Additional request headers.</param>
            <param name="method">Request method.</param>
            <param name="data">POST request data.</param>
            <param name="onComplete">Request callback.</param>
            <param name="stateObject">State object returned in the callback.</param>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksPlayerAPI.ResponseState`1">
            <summary>Response state that contains the callback and other async data.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.ResponseState`1.#ctor(`0,System.Object,KS.Reactor.ksPlayerAPI.Session)">
            <summary>Constructor.</summary>
            <param name="callback">Callback function.</param>
            <param name="asyncState">Async state object.</param>
            <param name="session">Session associated withe the request.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.#ctor(KS.Reactor.ksPlayerAPI.RequestHandler)">
            <summary>Constructor.</summary>
            <param name="requestFactory">Optional request handling method.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.DefaultRequestHandler(System.String,System.Net.WebHeaderCollection,System.String,KS.Reactor.ksJSON,KS.Reactor.ksWebResponse.Handler,System.Object)">
            <summary>
            The default API request handler uses ksWebRequest which will call the completion handler on
            another thread when a response is received.
            </summary>
            <param name="url">URL</param>
            <param name="headers">Additional request headers.</param>
            <param name="method">Request method.</param>
            <param name="data">POST request data.</param>
            <param name="onComplete">Request callback.</param>
            <param name="stateObject">State object returned in the callback.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Initialize(System.String,System.String,System.String)">
            Initialize the API object
            
            @param   string - player API URL
            @param   string - project ID
            @param   string - project client secret
            <summary>Initializes the API object.</summary>
            <param name="APIURL">Player API URL.</param>
            <param name="APIKey">Project ID.</param>
            <param name="APISecret">Project client secret.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Register(System.String,System.String,System.String,KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Creates a new player with email/username/password credentials.</summary>
            <param name="email"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.OnRegister(KS.Reactor.ksWebResponse)">
            <summary>Handles email/username/password registration responses.</summary>
            <param name="response"></param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.LoginWithDeviceID(System.String,KS.Reactor.ksPlayerAPI.DeviceTypes,System.Boolean,KS.Reactor.ksPlayerAPI.LoginCallback,System.Object)">
            <summary>Login with device ID.</summary>
            <param name="deviceId">Device ID.</param>
            <param name="deviceType">Device type.</param>
            <param name="register">Register a new player.</param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.LoginWithEmail(System.String,System.String,KS.Reactor.ksPlayerAPI.LoginCallback,System.Object)">
            <summary>Login with an email address and password.</summary>
            <param name="email"></param>
            <param name="password"></param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.LoginWithUsername(System.String,System.String,KS.Reactor.ksPlayerAPI.LoginCallback,System.Object)">
            <summary>Login with an email address and password.</summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.OnLogin(KS.Reactor.ksWebResponse)">
            <summary>Handles session login responses.</summary>
            <param name="response"></param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.CreateSession(System.String)">
            <summary>Constructs and binds a new session to this API using a Base64 encoded session string.</summary>
            <param name="encodedSession">Encoded session string.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Authenticate(KS.Reactor.ksPlayerAPI.Session,KS.Reactor.ksPlayerAPI.LoginCallback,System.Object)">
            <summary>Authenticates the current session.</summary>
            <param name="session">Session to authenticate.</param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.OnAuthenticate(KS.Reactor.ksWebResponse)">
            <summary>Handles session authentication responses.</summary>
            <param name="response"></param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.Logout(KS.Reactor.ksPlayerAPI.Session,KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Invalidates a ksPlayerAPI.Session.</summary>
            <param name="session">Session to authenticate.</param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.OnLogout(KS.Reactor.ksWebResponse)">
            <summary>Handles session authentication responses.</summary>
            <param name="response"></param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.LinkDeviceID(KS.Reactor.ksPlayerAPI.Session,System.String,KS.Reactor.ksPlayerAPI.DeviceTypes,KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Links a device ID to the current active session.</summary>
            <param name="session">Session to use for the request.</param>
            <param name="deviceId">Device ID.</param>
            <param name="deviceType">Device type.</param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.LinkPassword(KS.Reactor.ksPlayerAPI.Session,System.String,System.String,System.String,KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            Link a password credential to the current active session.
            
            @param   Session - session to use for the request
            @param   string - email
            @param   string - username
            @param   string - password
            @param   ksPlayerAPI.GenericCallback - asynchronous callback
            @param   object - state object returned in the callback
            <summary>Links a password credential to the current active session.</summary>
            <param name="session"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.OnLink(KS.Reactor.ksWebResponse)">
            <summary>Handles credential linking responses.</summary>
            <param name="response"></param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.UnlinkDeviceID(KS.Reactor.ksPlayerAPI.Session,System.String,KS.Reactor.ksPlayerAPI.DeviceTypes,KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Unlinks a device ID from the current active session.</summary>
            <param name="session">Session to use for the request.</param>
            <param name="deviceId">Device ID.</param>
            <param name="deviceType">Device type.</param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.UnlinkPassword(KS.Reactor.ksPlayerAPI.Session,KS.Reactor.ksPlayerAPI.GenericCallback,System.Object)">
            <summary>Unlinks a password credential from the current active session.</summary>
            <param name="session">Session to use for the request.</param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.OnUnlink(KS.Reactor.ksWebResponse)">
            <summary>Handles credential unlinking responses.</summary>
            <param name="response"></param>
        </member>
        <member name="M:KS.Reactor.ksPlayerAPI.GenerateHeaders(KS.Reactor.ksPlayerAPI.Session)">
            <summary>Generates the headers required for a ksPlayerAPI request.</summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksPlayerController">
            <summary>
            Base class for player controllers. Player controllers allow you to write one class that runs on both the client
            and the server for controlling entity movement using player inputs. The server uses it for authoritative
            movement, and the client uses it for prediction/latency masking.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.Input">
            <summary>Player input.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.Transform">
            <summary>Entity transform.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.Transform2D">
            <summary>2D entity transform.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.RigidBody">
            <summary>Entity rigid body.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.RigidBody2D">
            <summary>2D entity rigid body.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.CharacterController">
            <summary>Character controller.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.Entity">
            <summary>Entity this player controller is controlling.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.Time">
            <summary>Time.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.Properties">
            <summary>Entity properties.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.Physics">
            <summary>Physics interface.</summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.UseInputPrediction">
            <summary>
            Should this controller use input prediction? Set this to false in Initialize to disable input prediction.
            Setting this after Initialize is called will do nothing.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksPlayerController.Type">
            <summary>Player controller type. This must be unique-per class and non-zero.</summary>
        </member>
        <member name="M:KS.Reactor.ksPlayerController.RegisterInputs(KS.Reactor.ksInputRegistrar)">
            <summary>Register all buttons and axes you will be using here.</summary>
            <param name="registrar">Registrar to register with.</param>
        </member>
        <member name="M:KS.Reactor.ksPlayerController.Initialize">
            <summary>Called after properties are initialized.</summary>
        </member>
        <member name="M:KS.Reactor.ksPlayerController.Update">
            <summary>Called every frame.</summary>
        </member>
        <member name="T:KS.Reactor.ksPropertyMap">
            <summary>Provides access to ksProperties.</summary>
        </member>
        <member name="T:KS.Reactor.ksPropertyMap.OnSetHandler">
            <summary>On set handler.</summary>
            <param name="propertyId">ID of property that was set.</param>
            <param name="value">Value of property.</param>
        </member>
        <member name="P:KS.Reactor.ksPropertyMap.OnSet">
            <summary>Delegate to call when a property is set.</summary>
        </member>
        <member name="P:KS.Reactor.ksPropertyMap.ReadOnly">
            <summary>If true, using ksPropertyMap[propertyId] = value will not set property values.</summary>
        </member>
        <member name="P:KS.Reactor.ksPropertyMap.UseControllerValues">
            <summary>
            If true, ksPropertyMap[propertyId] will read from and write to the controller values. If a property is not
            found in the controller values, will read from the regular values. Used for input prediction.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksPropertyMap.ControllerValues">
            <summary>Values written to by the player controller. Used for input prediction.</summary>
        </member>
        <member name="P:KS.Reactor.ksPropertyMap.Properties">
            <summary>Maps property ids to property values.</summary>
        </member>
        <member name="M:KS.Reactor.ksPropertyMap.#ctor(System.Boolean)">
            <summary>Constructor</summary>
            <param name="readOnly">Is this a read-only map?</param>
        </member>
        <member name="P:KS.Reactor.ksPropertyMap.Item(System.UInt32)">
            <summary>
            Gets/Sets the value of a property. This will never return null; if a property id
            is not in the map, a ksMultiType of type ksMultiType.Types.UNDEFINED is returned.
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksPropertyMap.Contains(System.UInt32)">
            <summary>Checks if a property id is in the map.</summary>
            <param name="propertyId">Property ID to check for.</param>
            <returns>True if the property id is in the map.</returns>
        </member>
        <member name="M:KS.Reactor.ksPropertyMap.GetEnumerator">
            <summary>Gets the property enumerator.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksPropertyMap.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the property enumerator.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksPropertyMap.GetControllerValue(System.UInt32)">
            <summary>
            Gets the controller value for a property. If the property is not found in the controller map, returns the
            value from the property map.
            </summary>
            <param name="propertyId">ID of property to get.</param>
            <returns>Property value set by the player controller.</returns>
        </member>
        <member name="M:KS.Reactor.ksPropertyMap.Get(System.UInt32)">
            <summary>
            Gets a property value directly from the map (Will return null if the property id is not found).
            </summary>
            <param name="propertyId">ID of property to get.</param>
            <returns>Value of property.</returns>
        </member>
        <member name="M:KS.Reactor.ksPropertyMap.Set(System.UInt32,KS.Reactor.ksMultiType)">
            <summary>
            Sets a property value without calling the OnSet delegate or updating the value in scripts.
            </summary>
            <param name="propertyId">ID of property to set.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:KS.Reactor.ksPropertyMap.CreateSetCallback(System.UInt32)">
            <summary>Creates an OnSet callback for a multitype with the given propertyId.</summary>
            <param name="propertyId">ID to create callback for.</param>
            <returns>Callback.</returns>
        </member>
        <member name="M:KS.Reactor.ksPropertyMap.OnSetProperty(System.UInt32,KS.Reactor.ksMultiType)">
            <summary>Calls the OnSet delegate.</summary>
            <param name="propertyId">ID of property that was set.</param>
            <param name="value">Value of property.</param>
        </member>
        <member name="T:KS.Reactor.ksQuaternion">
            <summary>ksQuaternion struct.</summary>
            Quaternion struct
        </member>
        <member name="F:KS.Reactor.ksQuaternion.m_identity">
            <summary>Identity.</summary>
        </member>
        <member name="P:KS.Reactor.ksQuaternion.X">
            <summary>X value of this quaternion.</summary>
        </member>
        <member name="P:KS.Reactor.ksQuaternion.Y">
            <summary>Y value of this quaternion.</summary>
        </member>
        <member name="P:KS.Reactor.ksQuaternion.Z">
            <summary>Z value of this quaternion.</summary>
        </member>
        <member name="P:KS.Reactor.ksQuaternion.W">
            <summary>W value of this quaternion.</summary>
        </member>
        <member name="P:KS.Reactor.ksQuaternion.Item(System.Int32)">
            <summary>Indexer.</summary>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Constructor.</summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
            <param name="w">W value.</param>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Implicit(KS.Reactor.ksQuaternion)~System.Single[]">
            <summary>Implicit conversion from ksQuaternion to float[4].</summary>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Implicit(System.Single[])~KS.Reactor.ksQuaternion">
            <summary>Implicit conversion from float[] to ksQuaternion.</summary>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.GetFirstNonZeroComponentSign">
            <summary>Return true if first nonzero component is positive or all components are zeros.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.Normalize">
            <summary>Normalizes this quaternion.</summary>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.Inverse">
            <summary>Inversed quaternion.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.Invert">
            <summary>Inverts this quaternion.</summary>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.ToEuler">
            <summary>Euler angle representation of this quaternion in degrees.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.ToEulerRadians">
            <summary>Euler angle representation of this quaternion in radians.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.FromEuler(KS.Reactor.ksVector3)">
            <summary>Constructs a ksQuaternion from euler angles.</summary>
            <param name="euler">Euler angles in degrees.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.FromEulerRadians(KS.Reactor.ksVector3)">
            <summary>Constructs a ksQuaternion from euler angles.</summary>
            <param name="euler">Euler angles in radians.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.ToAxisAngle(KS.Reactor.ksVector3@,System.Single@)">
            <summary>Converts the quaternion to axis-angle representation.</summary>
            <param name="axis">Axis of rotation.</param>
            <param name="angle">Angle of rotation in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.ToAxisAngleRadians(KS.Reactor.ksVector3@,System.Single@)">
            <summary>Converts the quaternion to axis-angle representation.</summary>
            <param name="axis">Axis of rotation.</param>
            <param name="angle">Angle of rotation in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.FromAxisAngle(KS.Reactor.ksVector3,System.Single)">
            <summary>Constructs a ksQuaternion from an axis-angle.</summary>
            <param name="axis">Axis of rotation.</param>
            <param name="angle">Angle of rotation in degrees.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.FromAxisAngleRadians(KS.Reactor.ksVector3,System.Single)">
            <summary>Constructs a ksQuaternion from an axis-angle.</summary>
            <param name="axis">Axis of rotation.</param>
            <param name="angle">Angle of rotation in radians.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.ToAngularDisplacement">
            <summary>angular displacement representation of this quaternion in degrees.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.ToAngularDisplacementRadians">
            <summary>Angular displacement representation of this quaternion in radians.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.FromAngularDisplacement(KS.Reactor.ksVector3)">
            <summary>Constructs a ksQuaternion from angular displacement.</summary>
            <param name="angularDisplacement"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.FromAngularDisplacementRadians(KS.Reactor.ksVector3)">
            <summary>Constructs a ksQuaternion from angular displacement.</summary>
            <param name="angularDisplacement">Angular displacement in radians.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.FromDirection(KS.Reactor.ksVector3)">
            <summary>
            Constructs a ksQuaternion from a forward direction, with ksVector3.Up as the up direction.
            </summary>
            <param name="forward">Forward direction.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.FromDirection(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Constructs a ksQuaternion from forward and up directions.</summary>
            <param name="forward">Forward direction.</param>
            <param name="up">Up direction.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.FromVectorDelta(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Constructs a ksQuaternion that rotates one vector to another.</summary>
            <param name="startDirection">Start direction.</param>
            <param name="endDirection">End direction.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.RotateByEuler(KS.Reactor.ksQuaternion,KS.Reactor.ksVector3)">
            <summary>Rotates a quaternion by euler angles.</summary>
            <param name="quaternion">Quaternion to rotate.</param>
            <param name="euler">Euler angles in degrees to rotate by.</param>
            <returns>Rotated quaternion.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.RotateByEulerRadians(KS.Reactor.ksQuaternion,KS.Reactor.ksVector3)">
            <summary>Rotates a quaternion by euler angles.</summary>
            <param name="quaternion">Quaternion to rotate.</param>
            <param name="euler">Euler angles in radians to rotate by.</param>
            <returns>Rotated quaternion.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.ToString">
            <summary>
            Gets the string representation of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.ToString(System.String)">
            <summary>Returns a string respresentation of the quaternion.</summary>
            <param name="format"></param>
            <returns>String representation of the quaternion.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.ToString(System.IFormatProvider)">
            <summary>Returns a string respresentation of the quaternion.</summary>
            <param name="provider"></param>
            <returns>String representation of the quaternion.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.DeltaDegrees(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            <summary>Returns the angle in degrees between two quaternions.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Angle in degrees between a and b.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.DeltaRadians(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            <summary>Returns the angle in radians between two quaternions.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Angle in radians between a and b.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.Dot(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            <summary>Computes the dot product of two quaternions.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Dot product of a and b.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.Lerp(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion,System.Single)">
            <summary>Interpolates linearly between two quaternions.</summary>
            <param name="from">Quaternion to interpolate from.</param>
            <param name="to">Quaternion to interpolate to.</param>
            <param name="t">Value between 0 and 1 that determines the amount of interpolation.</param>
            <returns>Interpolated quaternion.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.Slerp(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion,System.Single)">
            <summary>Spherically interpolates between two quaternions.</summary>
            <param name="from">Quaternion to interpolate from.</param>
            <param name="to">Quaternion to interpolate to.</param>
            <param name="t">Value between 0 and 1 that determines the amount of interpolation.</param>
            <returns>Interpolated quaternion.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.RotateTowards(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion,System.Single)">
            <summary>Rotates a quaternion towards another.</summary>
            <param name="start">Start rotation.</param>
            <param name="target">Target to rotate towards.</param>
            <param name="deltaAngle">
            Delta angle in degrees to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.RotateTowardsRadians(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion,System.Single)">
            <summary>Rotates a quaternion towards another.</summary>
            <param name="start">Start rotation.</param>
            <param name="target">Target to rotate towards.</param>
            <param name="deltaAngle">
            Delta angle in radians to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.AngularDisplacement(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            <summary>Returns the angular displacement between two quaternions.</summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns>Angular displacement between start and end in degrees.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.AngularDisplacementRadians(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            <summary>Returns the angular displacement between two quaternions.</summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns>Angular displacement between start and end in radians.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.AddAngularDisplacement(KS.Reactor.ksQuaternion,KS.Reactor.ksVector3)">
            <summary>Rotates a quaternion using angular displacement.</summary>
            <param name="quaternion">Quaternion to rotate.</param>
            <param name="angularDisplacement">Angular displacement in degrees.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.AddAngularDisplacementRadians(KS.Reactor.ksQuaternion,KS.Reactor.ksVector3)">
            <summary>Rotates a quaternion using angular displacement.</summary>
            <param name="quaternion">Quaternion to rotate.</param>
            <param name="angularDisplacement">Angular displacement in radians.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_UnaryNegation(KS.Reactor.ksQuaternion)">
            <summary>Quaternion unary - operator.</summary>
            <param name="q"></param>
            <returns>Result.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Multiply(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            <summary>Quaternion multiplication.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>Result.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Multiply(KS.Reactor.ksQuaternion,KS.Reactor.ksVector3)">
            <summary>Rotates a vector by a quaternion.</summary>
            <param name="rotation">Rotation to apply.</param>
            <param name="point">Point to rotate.</param>
            <returns>Rotated point.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Multiply(KS.Reactor.ksVector3,KS.Reactor.ksQuaternion)">
            <summary>Rotates a vector by a quaternion.</summary>
            <param name="point">Point to rotate.</param>
            <param name="rotation">Rotation to apply.</param>
            <returns>Rotated point.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Equality(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            <summary>Checks if two quaternions are equal.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the quaternions are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Inequality(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            <summary>Checks if two quaternions are not equal.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the quaternions are not equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.Equals(System.Object)">
            <summary>Checks if this quaternion is equal to an object.</summary>
            <param name="obj">Object to compare with this quaternion.</param>
            <returns>True if this quaternion is equal to the object.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.Equals(KS.Reactor.ksQuaternion)">
            <summary>Checks if this quaternion is equal to another.</summary>
            <param name="other">Other quaternion to compare with.</param>
            <returns>True if the quaternions are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.GetHashCode">
            <summary>Gets the hash code for this quaternion.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.Normalized(KS.Reactor.ksQuaternion)">
            <summary>Normalizes a quaternion</summary>
            <param name="quaternion">Quaternion to normalize.</param>
            <returns>Normalized quaternion.</returns>
        </member>
        <member name="P:KS.Reactor.ksQuaternion.isValid">
            <summary>
            Checks if the quaternion is valid (the components are normalized).
            </summary>
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Implicit(KS.Reactor.ksQuaternion)~UnityEngine.Quaternion">
            Implicit conversion from ksQuaternion to Unity Quaternion.
            
            @param   ksQuaternion value
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Implicit(UnityEngine.Quaternion)~KS.Reactor.ksQuaternion">
            Implicit conversion from Unity Quaternion to ksQuaternion.
            
            @param   Quaternion value
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Multiply(KS.Reactor.ksQuaternion,UnityEngine.Quaternion)">
            Quaternion multiplication with ksQuaternion and Unity Quaternion.
            
            @param   ksQuaternion lhs
            @param   Quaternion rhs
            @return  ksQuaternion rhs rotated by lhs.
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Multiply(UnityEngine.Quaternion,KS.Reactor.ksQuaternion)">
            Quaternion multiplication with Unity Quaternion and ksQuaternion.
            
            @param   Quaternion lhs
            @param   ksQuaternion rhs
            @return  Quaternion rhs rotated by lhs.
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Equality(KS.Reactor.ksQuaternion,UnityEngine.Quaternion)">
            Equality comparison with ksQuaternion and Unity Quaternion.
            
            @param   ksQuaternion lhs
            @param   Quaternion rhs
            @return  bool lhs == rhs
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Equality(UnityEngine.Quaternion,KS.Reactor.ksQuaternion)">
            Equality comparison with Unity Quaternion and ksQuaternion.
            
            @param   Quaternion lhs
            @param   ksQuaternion rhs
            @return  bool lhs == rhs
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Inequality(KS.Reactor.ksQuaternion,UnityEngine.Quaternion)">
            Inequality comparison with ksQuaternion and Unity Quaternion.
            
            @param   ksQuaternion lhs
            @param   Quaternion rhs
            @return  bool lhs != rhs
        </member>
        <member name="M:KS.Reactor.ksQuaternion.op_Inequality(UnityEngine.Quaternion,KS.Reactor.ksQuaternion)">
            Inequality comparison with Unity Quaternion and ksQuaternion.
            
            @param   Quaternion lhs
            @param   ksQuaternion rhs
            @return  bool lhs != rhs
        </member>
        <member name="T:KS.Reactor.ksRandom">
            <summary>
            Extends the built-in C# Random class with methods for generating floats, vectors, and quaternions.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksRandom.Seed">
            <summary>Initial seed.</summary>
        </member>
        <member name="M:KS.Reactor.ksRandom.#ctor">
            <summary>Constructor. Initializes the seed to the microsecond timestamp.</summary>
        </member>
        <member name="M:KS.Reactor.ksRandom.#ctor(System.Int32)">
            <summary>Constructor.</summary>
            <param name="seed">Seed for pseudo-random sequence.</param>
        </member>
        <member name="M:KS.Reactor.ksRandom.NextFloat">
            <summary>Random value between 0 (inclusive) and 1 (exclusive).</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksRandom.NextFloat(System.Single,System.Single)">
            <summary>Returns a random float within a range.</summary>
            <param name="min">Min value (inclusive).</param>
            <param name="max">Max value (exclusive)</param>
            <returns>Random number in the range.</returns>
        </member>
        <member name="M:KS.Reactor.ksRandom.NextUnitVector2">
            <summary>Random vector2 with magnitude 1.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksRandom.NextVector2">
            <summary>Random vector3 with magnitude less than 1.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksRandom.NextVector2(System.Single,System.Single)">
            <summary>Returns a random vector2 with magnitude within a range.</summary>
            <param name="minMagnitude">Min magnitude (inclusive).</param>
            <param name="maxMagnitude">Max magnitude (exclusive).</param>
            <returns>Random vector2 with magnitude within the range.</returns>
        </member>
        <member name="M:KS.Reactor.ksRandom.NextUnitVector3">
            <summary>Random vector3 with magnitude 1.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksRandom.NextVector3">
            <summary>Random vector3 with magnitude less than 1.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksRandom.NextVector3(System.Single,System.Single)">
            <summary>Returns a random vector3 with magnitude within a range.</summary>
            <param name="minMagnitude">Min magnitude(inclusive).</param>
            <param name="maxMagnitude">Max magnitude(exclusive).</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksRandom.NextQuaternion">
            <summary>Random quaternion.</summary>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksRange">
            <summary>Defines a numerical range that wraps around.</summary>
        </member>
        <member name="P:KS.Reactor.ksRange.Degrees">
            <summary>Degrees (0 - 360).</summary>
        </member>
        <member name="P:KS.Reactor.ksRange.Radians">
            <summary>Radians (0 - 2PI).</summary>
        </member>
        <member name="P:KS.Reactor.ksRange.Min">
            <summary>Min value in the range (inclusive).</summary>
        </member>
        <member name="P:KS.Reactor.ksRange.Max">
            <summary>Max value in the range (exclusive).</summary>
        </member>
        <member name="M:KS.Reactor.ksRange.#ctor(System.Single,System.Single)">
            <summary>Constructor.</summary>
            <param name="min">Min value in the range (inclusive).</param>
            <param name="max">Max value in the range (exclusive).</param>
        </member>
        <member name="M:KS.Reactor.ksRange.SetRange(System.Single,System.Single)">
            <summary>Sets new min and max range values</summary>
            <param name="min">Min value in the range (inclusive).</param>
            <param name="max">Max value in the range (exclusive).</param>
        </member>
        <member name="M:KS.Reactor.ksRange.Wrap(System.Single)">
            <summary>
            Fits a value into the range. This is not a clamp--values outside the range will wrap around.
            </summary>
            <param name="value"></param>
            <returns>Value in range.</returns>
        </member>
        <member name="M:KS.Reactor.ksRange.Clamp(System.Single)">
            <summary>Clamps a value into the range.</summary>
            <param name="value"></param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:KS.Reactor.ksRange.Delta(System.Single,System.Single)">
            <summary>Calculates the shortest delta between two values.</summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns>Delta between from and to.</returns>
        </member>
        <member name="M:KS.Reactor.ksRange.Slerp(System.Single,System.Single,System.Single)">
            <summary>Spherically interpolates between two values.</summary>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="t">Amount to interpolate between 0 and 1.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:KS.Reactor.ksRange.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>Moves a value towards another in the shorest direction.</summary>
            <param name="start">Start value.</param>
            <param name="target">Target to move towards.</param>
            <param name="distance">
            delta distance to move. It will not overshoot the target. Negative values will move away from the target.
            </param>
            <returns>Result.</returns>
        </member>
        <member name="T:KS.Reactor.ksRaycastResult">
            <summary>Result of an raycast scene query.</summary>
        </member>
        <member name="F:KS.Reactor.ksRaycastResult.Entity">
            <summary>Entity hit by the raycast.</summary>
        </member>
        <member name="F:KS.Reactor.ksRaycastResult.Collider">
            <summary>Collider hit by the raycast.</summary>
        </member>
        <member name="F:KS.Reactor.ksRaycastResult.Point">
            <summary>Point on the surface of the entity where the ray instersected</summary>
        </member>
        <member name="F:KS.Reactor.ksRaycastResult.Normal">
            <summary>Normal of the surface where the raycast point is.</summary>
        </member>
        <member name="F:KS.Reactor.ksRaycastResult.Distance">
            <summary>Distance along the sweep when the intersection was detected.</summary>
        </member>
        <member name="P:KS.Reactor.ksRaycastResult.IsValid">
            <summary>A raycast result is only valid if it includes an entity reference.</summary>
        </member>
        <member name="P:KS.Reactor.ksRaycastResult.IsInitialOverlap">
            <summary>Is the entity/collider overlapping with the raycast origin.</summary>
        </member>
        <member name="T:KS.Reactor.ksReflectionUtils">
            <summary>Reflection utility functions.</summary>
        </member>
        <member name="M:KS.Reactor.ksReflectionUtils.GetEditableMembers(System.Type,System.Boolean)">
            <summary>Gets all fields and properties tagged with ksEditable or ksUnityTag on a type.</summary>
            <param name="type">Type to get editable fields and properties from.</param>
            <param name="includeInherited">If true, will include editable members from base classes.</param>
            <returns>Editable fields and properties from the type.</returns>
        </member>
        <member name="M:KS.Reactor.ksReflectionUtils.GetCloneableMembers(System.Type)">
            <summary>
            Gets all fields and properties tagged with ksEditable, ksUnityTagAttribute, or ksCloneable on a type.
            </summary>
            <param name="type">Type to get cloneable fields and properties from.</param>
            <returns>Cloneable fields and properties from the type.</returns>
        </member>
        <member name="M:KS.Reactor.ksReflectionUtils.GetMembersWithAttribute(System.Type,System.Boolean,System.Type[])">
            <summary>Gets all fields and properties tagged with any of the given attributes on a type.</summary>
            <param name="type">Type to get tagged fields and properties from.</param>
            <param name="includeInherited">If true, will include tagged members from base classes.</param>
            <param name="attributes">
            Attributes to check for. Members are returned if they have at least one of this attributes.
            </param>
            <returns>Fields and properties that have any of the attributes.</returns>
        </member>
        <member name="M:KS.Reactor.ksReflectionUtils.HasAnyAttributes(System.Reflection.MemberInfo,System.Type[])">
            <summary>Checks if a member has any of the given attributes.</summary>
            <param name="member">Member to check for attributes.</param>
            <param name="attributes">Attributes to check for.</param>
            <returns>True if the member has any of the attributes.</returns>
        </member>
        <member name="M:KS.Reactor.ksReflectionUtils.GetType(System.Reflection.MemberInfo)">
            <summary>Gets the type of a field or property.</summary>
            <param name="memberInfo">MemberInfo to get type from.</param>
            <returns>Type of field or property.</returns>
        </member>
        <member name="M:KS.Reactor.ksReflectionUtils.GetValue(System.Object,System.Reflection.MemberInfo)">
            <summary>Gets the value of a field or property.</summary>
            <param name="script">Script containing the field or property.</param>
            <param name="memberInfo">MemberInfo for field or property.</param>
            <returns>Value of the field or property.</returns>
        </member>
        <member name="M:KS.Reactor.ksReflectionUtils.SetValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>Sets the value of a field or property.</summary>
            <param name="script">Script containing the field or property.</param>
            <param name="memberInfo">MemberInfo for the field or property.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:KS.Reactor.ksReflectionUtils.Clone``1(``0)">
            <summary>
            Creates a copy of a script with the value of all members tagged with ksEditable or ksCloneable copied.
            Arrays, lists, and dictionaries are cloned. Other object references will reference the same object.
            </summary>
            <typeparam name="T">Script to clone.</typeparam>
            <param name="script">Cloned script.</param>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksRenamedFromAttribute">
            <summary>
            When you rename ksEditable fields or properties in server scripts, add this tag with the old name to preserve
            saved values.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksRenamedFromAttribute.OldName">
            <summary>Old name of the field or property.</summary>
        </member>
        <member name="M:KS.Reactor.ksRenamedFromAttribute.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="oldName">Old name of the field or property.</param>
        </member>
        <member name="T:KS.Reactor.ksRoomInfo">
            <summary>
            Holds room data that is available without connecting to the room,
            including data required to connect to the room.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksRoomInfo.RoomState">
            <summary>Room load state.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.Image">
            <summary>Image.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.Id">
            <summary>Room id.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.Scene">
            <summary>Scene name.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.Type">
            <summary>Room type.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.Host">
            <summary>Host to connect to.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.Port">
            <summary>Port to connect to.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.Name">
            <summary>Room name.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.IsPublic">
            <summary>Is public?</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.KeepAlive">
            <summary>Keep alive?</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.State">
            <summary>Server state.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.PublicTags">
            <summary>Public tags.</summary>
        </member>
        <member name="P:KS.Reactor.ksRoomInfo.PublicData">
            <summary>Public data.</summary>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.#ctor(KS.Reactor.ksRoomInfo)">
            <summary>Copy Constructor.</summary>
            <param name="copy">Room info to copy from.</param>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.#ctor(System.String,System.UInt16)">
            <summary>Constructor.</summary>
            <param name="host">Host to connect to.</param>
            <param name="port">Port to connect to.</param>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.ToJSON">
            <summary>Creates a ksJSON object of this room info.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.FromJSON(KS.Reactor.ksJSON)">
            <summary>Initialize the room info using a json.</summary>
            <param name="json"></param>
            <returns>False if the json failed to contain the required fields.</returns>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.GetBytes">
            <summary>Serializes the room info to a byte array.</summary>
            <returns>Serialized room info.</returns>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.FromBytes(System.Byte[])">
            <summary>Deserializes the room info from a byte array.</summary>
            <param name="data">Data to deserialize.</param>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.op_Implicit(KS.Reactor.ksRoomInfo)~KS.Reactor.ksMultiType">
            <summary>Implicit conversion from ksRoomInfo to ksMultiType.</summary>
            <param name="info"></param>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.op_Implicit(KS.Reactor.ksMultiType)~KS.Reactor.ksRoomInfo">
            <summary>Implicit conversion from ksMultiType to ksRoomInfo.</summary>
            <param name="multiType"></param>
        </member>
        <member name="M:KS.Reactor.ksRoomInfo.ToString">
            <summary>
            Returns a brief summary of the ksRoomInfo object including id, scene and room type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksRPCAttribute">
            <summary>Attribute used to mark RPC handlers on room and entity scripts.</summary>
        </member>
        <member name="P:KS.Reactor.ksRPCAttribute.ExecuteOnMainThread">
            <summary>When this is true the RPC will be executed on the main thread.</summary>
        </member>
        <member name="P:KS.Reactor.ksRPCAttribute.Id">
            <summary>Get the RPC ID.</summary>
        </member>
        <member name="M:KS.Reactor.ksRPCAttribute.#ctor(System.UInt32)">
            <summary>Constructor.</summary>
            <param name="id">RPC ID.</param>
        </member>
        <member name="M:KS.Reactor.ksRPCAttribute.#ctor(System.UInt32,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="id">RPC ID.</param>
            <param name="executeOnMainThread">When true, the RPC will be excuted on the main thread.</param>
        </member>
        <member name="T:KS.Reactor.ksRPCManager`1">
            <summary>
            Manages the registration, storing and invocation of methods tagged with ksRPCAttributes.
            </summary>
            <typeparam name="Attribute"></typeparam>
        </member>
        <member name="P:KS.Reactor.ksRPCManager`1.Instance">
            <summary>Singleton instance</summary>
        </member>
        <member name="M:KS.Reactor.ksRPCManager`1.SetValidSubclasses(System.Type[])">
            <summary>
            Set the valid types all RPC methods owner must be a subclass of.
            If no subclass types are set, then all types are allowed.
            </summary>
            <param name="types">Valid subclass types.</param>
        </member>
        <member name="M:KS.Reactor.ksRPCManager`1.PrintValidClasses">
            <summary>Print a list of valid subclasses</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksRPCManager`1.RegisterAssemblyRPCs(System.Reflection.Assembly)">
            <summary>
            Search an assembly and register all instance methods tagged with a ksRPCAttribute.
            </summary>
            <param name="assembly">Assembly to search.</param>
        </member>
        <member name="M:KS.Reactor.ksRPCManager`1.RegisterTypeRPCs(System.Type)">
            <summary>Searches a type and register all instance methods tagged with a ksRPCAttribute</summary>
            <param name="type">Type to search</param>
        </member>
        <member name="M:KS.Reactor.ksRPCManager`1.RegisterRPC(System.UInt32,System.Boolean,System.Reflection.MethodInfo)">
            <summary>Registers an RPC method.</summary>
            <param name="id">RPC ID</param>
            <param name="executeOnMainThread">RPC should be executed on the main thread.</param>
            <param name="method">RPC method.</param>
        </member>
        <member name="M:KS.Reactor.ksRPCManager`1.HasRegisteredRPC(System.UInt32)">
            <summary>Checks if at least one RPC handler has been registered for a specific RPC ID.</summary>
            <param name="id">RPC ID.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksRPCManager`1.InvokeRPC``1(System.UInt32,System.Object,System.Type,``0,KS.Reactor.ksMultiType[],System.Boolean)">
            Invoke an RPC on a target object from source T
            
            @param   uint - RPC ID
            @param   Type - target type
            @param   object - target to invoke on
            @param   T - source of the rpc (player, server, etc)
            @param   ksMultiType[] - RPC arguments
            @param   bool - RPC should be executed on the main thread.
            <summary>Invoke an RPC on a target object from source T.</summary>
            <typeparam name="T"></typeparam>
            <param name="id">RPC ID.</param>
            <param name="target">Target type</param>
            <param name="targetType">Target to invoke on.</param>
            <param name="source">Source of the rpc (player, server, etc).</param>
            <param name="args">RPC arguments.</param>
            <param name="executeOnMainThread">RPC should be executed on the main thread.</param>
        </member>
        <member name="T:KS.Reactor.ksRPCManager`1.RPC">
            <summary>
            This class contains all the required information to quickly invoke an RPC method.
            method parameter types are extracted, and the object[] arg array is pre-allocated, during construction
            to reduce overhead during invocation.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksRPCManager`1.RPC.ExecuteOnMainThread">
            <summary>Should this RPC be executed on the main thread.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.ksRPCManager`1.RPC.#ctor(System.UInt32,System.Boolean,System.Reflection.MethodInfo)" -->
        <member name="M:KS.Reactor.ksRPCManager`1.RPC.Invoke``1(System.Object,``0,KS.Reactor.ksMultiType[])">
            <summary>Invokes the RPC method on a target object.</summary>
            <typeparam name="T"></typeparam>
            <param name="target">Target to invoke on.</param>
            <param name="source">Source of the rpc call (player, server, etc).</param>
            <param name="args">RPC arguments.</param>
        </member>
        <member name="T:KS.Reactor.ksScript`2">
            <summary>Base class for Reactor scripts.</summary>
            <typeparam name="Parent">Type the script can be attached to.</typeparam>
            <typeparam name="Script">Type of script this is.</typeparam>
        </member>
        <member name="P:KS.Reactor.ksScript`2.InstanceType">
            <summary>Gets the most derived type of this script.</summary>
        </member>
        <member name="P:KS.Reactor.ksScript`2.Attached">
            <summary>Is the script attached?</summary>
        </member>
        <member name="P:KS.Reactor.ksScript`2.Scripts">
            <summary>List this script is in.</summary>
        </member>
        <member name="P:KS.Reactor.ksScript`2.Assets">
            <summary>Asset loader.</summary>
        </member>
        <member name="M:KS.Reactor.ksScript`2.Initialize">
            <summary>Called after properties are initialized.</summary>
        </member>
        <member name="M:KS.Reactor.ksScript`2.Detached">
            <summary>
            Called when the script is detached. Remove event listeners and perform other clean up logic here.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksScript`2.Clone">
            <summary>
            Creates a copy of the script with the value of all members tagged with ksEditable or ksCloneable copied.
            Arrays, lists, and dictionaries are cloned. Other object references will reference the same object.
            </summary>
            <returns>Cloned script.</returns>
        </member>
        <member name="M:KS.Reactor.ksScript`2.SetParent(`0)">
            <summary>Sets the parent this script is attached to.</summary>
            <param name="parent"></param>
        </member>
        <member name="T:KS.Reactor.ksScriptAsset">
            <summary>Base class for scripts that can be loaded from assets.</summary>
        </member>
        <member name="P:KS.Reactor.ksScriptAsset.Assets">
            <summary>Asset loader singleton. Set this to supply a custom asset loader.</summary>
        </member>
        <member name="P:KS.Reactor.ksScriptAsset.AssetId">
            <summary>The id of the asset. Zero means it is not an asset.</summary>
        </member>
        <member name="P:KS.Reactor.ksScriptAsset.AssetPath">
            <summary>The asset path.</summary>
        </member>
        <member name="P:KS.Reactor.ksScriptAsset.IsPrefab">
            <summary>
            Is this a prefab asset? If true, this is the asset returned by
            <see cref="M:KS.Reactor.ksBaseAssetLoader.Get``1(System.UInt32,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksScriptAsset.AssetName">
            <summary>
            The name of the asset. This is the part of the <see cref="P:KS.Reactor.ksScriptAsset.AssetPath"/> after the last '/'.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksScriptAsset.Finalize">
            <summary>Removes the asset from the cache when it is garbage collected.</summary>
        </member>
        <member name="M:KS.Reactor.ksScriptAsset.Clone">
            <summary>
            Creates a copy of the script with the value of all members tagged with ksEditable or ksCloneable copied.
            Arrays, lists, and dictionaries are cloned. Other object references will reference the same object.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksScriptList`2">
            <summary>A templated list of scripts.</summary>
            <typeparam name="Parent">The type the scripts are attached to.</typeparam>
            <typeparam name="Script">The script type.</typeparam>
        </member>
        <member name="P:KS.Reactor.ksScriptList`2.IsInitialized">
            <summary>
            Are the scripts initialized? If true, new scripts will be initialized when they are attached.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksScriptList`2.AttachCallback">
            <summary>Callback to call when scripts are attached.</summary>
        </member>
        <member name="P:KS.Reactor.ksScriptList`2.Count">
            <summary>Number of scripts in the list.</summary>
        </member>
        <member name="P:KS.Reactor.ksScriptList`2.Item(System.Int32)">
            <summary>Access the list by index.</summary>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.#ctor(`0)">
            <summary>Constructor.</summary>
            <param name="parent">Parent to attach scripts to.</param>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.GetEnumerator">
            <summary>Gets the enumerator for the list.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator for the list.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.Attach(`1)">
            <summary>
            Attaches a script. If the script is already attached somewhere, it is detached first.
            </summary>
            <param name="script">Script to attach.</param>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.Detach(`1)">
            <summary>Detaches a script.</summary>
            <param name="script">Script to detach.</param>
            <returns>True if the script was found.</returns>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.Detach``1">
            <summary>Detaches a script of the template type.</summary>
            <typeparam name="T"></typeparam>
            <returns>Removed script, or null if no script of that type was found.</returns>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.DetachAll``1(System.Boolean)">
            <summary>Detaches all scripts of the template type.</summary>
            <typeparam name="T"></typeparam>
            <param name="allowAttachingScripts">
            When false new scripts cannot be attached while other scripts are being removed.
            </param>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.DetachAll(System.Boolean)">
            <summary>Detaches all scripts.</summary>
            <param name="allowAttachingScripts">
            When false new scripts cannot be attached while other scripts are being removed.
            </param>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.Get``1">
            <summary>
            Gets the first script of type T or null if not found.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>A script of the template type, or null if the script is not found.</returns>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.GetAll``1">
            <summary>Gets all scripts of type T.</summary>
            <typeparam name="T"></typeparam>
            <returns>Script list.</returns>
        </member>
        <member name="M:KS.Reactor.ksScriptList`2.InitializeAll">
            <summary>
            Initializes all scripts. Subsequent scripts will be initialized when they're attached.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksServerAPI">
            <summary>Implementation for the KSPlayerAPI calls made with server credentials.</summary>
        </member>
        <member name="T:KS.Reactor.ksServerAPI.Session">
            <summary>Player session information use for validation and player tracking.</summary>
        </member>
        <member name="T:KS.Reactor.ksServerAPI.ResponseState`1">
            <summary>Response state that contains the callback and other async data.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:KS.Reactor.ksServerAPI.ResponseState`1.#ctor(`0,System.Object)">
            <summary>Constructor.</summary>
            <param name="callback"></param>
            <param name="asyncState">Async state object.</param>
        </member>
        <member name="T:KS.Reactor.ksServerAPI.GenericCallback">
            <summary>Generic callback with no return data.</summary>
            <param name="error">Error message.</param>
            <param name="asyncState">Async state object.</param>
        </member>
        <member name="T:KS.Reactor.ksServerAPI.RequestHandler">
            <summary>Web request handler for API calls.</summary>
            <param name="url">URL.</param>
            <param name="headers">Additional request headers.</param>
            <param name="method">Request method.</param>
            <param name="data">POST request data.</param>
            <param name="onComplete">Request callback.</param>
            <param name="stateObject">State object returned in the callback.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksServerAPI.#ctor(KS.Reactor.ksServerAPI.RequestHandler)">
            <summary>Constructor.</summary>
            <param name="requestFactory">Optional request handling method.</param>
        </member>
        <member name="M:KS.Reactor.ksServerAPI.DefaultRequestHandler(System.String,System.Net.WebHeaderCollection,System.String,KS.Reactor.ksJSON,KS.Reactor.ksWebResponse.Handler,System.Object)">
            <summary>Web request handler for API calls.</summary>
            <param name="url">URL.</param>
            <param name="headers">Additional request headers.</param>
            <param name="method">Request method.</param>
            <param name="data">POST request data.</param>
            <param name="onComplete">Request callback.</param>
            <param name="stateObject">State object returned in the callback.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksServerAPI.Initialize(System.String,System.String,System.String)">
            <summary>Initializes the API object.</summary>
            <param name="APIURL">Player API url.</param>
            <param name="APIKey">Project ID.</param>
            <param name="APISecret">Project client secret.</param>
        </member>
        <member name="M:KS.Reactor.ksServerAPI.AuthenticatePlayer(KS.Reactor.ksServerAPI.Session,KS.Reactor.ksServerAPI.GenericCallback,System.Object)">
            <summary>Authenticate a player session.</summary>
            <param name="session">Session to authenticate.</param>
            <param name="callback">Asynchronous callback.</param>
            <param name="asyncState">State object returned in the callback.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksServerAPI.OnAuthenticate(KS.Reactor.ksWebResponse)">
            <summary>Handles session authentication responses.</summary>
            <param name="response">Authentication response.</param>
        </member>
        <member name="M:KS.Reactor.ksServerAPI.GenerateHeaders">
            <summary>Generates the headers required for a ksServerAPI request.</summary>
            <returns></returns>
        </member>
        <member name="T:KS.Reactor.ksShape">
            <summary>A base class of the shapes used in the scene queries.</summary>
        </member>
        <member name="T:KS.Reactor.ksShape.ShapeTypes">
            <summary>Support shapes for scene queries.</summary>
        </member>
        <member name="T:KS.Reactor.ksShape.ColliderFlags">
            Collider flags
        </member>
        <member name="T:KS.Reactor.ksShape.Axis">
            <summary>Axis used for revolute shapes (capsule, cylinder, cones).</summary>
        </member>
        <member name="P:KS.Reactor.ksShape.Type">
            <summary>Type of shape.</summary>
        </member>
        <member name="P:KS.Reactor.ksShape.IsQueryShape">
            <summary>Is the shape usable in scene queries?</summary>
        </member>
        <member name="T:KS.Reactor.ksSphere">
            <summary>Sphere.</summary>
        </member>
        <member name="M:KS.Reactor.ksSphere.#ctor(System.Single)">
            <summary>Constructs a sphere with a given radius.</summary>
            <param name="radius"></param>
        </member>
        <member name="P:KS.Reactor.ksSphere.Radius">
            <summary>Gets/Sets the sphere radius.</summary>
        </member>
        <member name="T:KS.Reactor.ksBox">
            <summary>Box.</summary>
        </member>
        <member name="M:KS.Reactor.ksBox.#ctor(System.Single,System.Single,System.Single)">
            <summary>Constructs a box with dimensions x, y, z.</summary>
            <param name="x">X size.</param>
            <param name="y">Y size.</param>
            <param name="z">Z size.</param>
        </member>
        <member name="M:KS.Reactor.ksBox.#ctor(KS.Reactor.ksVector3)">
            <summary>Constructs a box with ksVector3.</summary>
            <param name="size"></param>
        </member>
        <member name="P:KS.Reactor.ksBox.Size">
            <summary>Size.</summary>
        </member>
        <member name="P:KS.Reactor.ksBox.HalfExtents">
            <summary>Half extents.</summary>
        </member>
        <member name="T:KS.Reactor.ksCapsule">
            <summary>Capsule.</summary>
        </member>
        <member name="M:KS.Reactor.ksCapsule.#ctor(System.Single,System.Single,KS.Reactor.ksShape.Axis)">
            <summary>Constructs a capsule aligned along an axis.</summary>
            <param name="radius">Raidus.</param>
            <param name="height">Total height including caps.</param>
            <param name="alignment">Axis.</param>
        </member>
        <member name="P:KS.Reactor.ksCapsule.Radius">
            <summary>Radius.</summary>
        </member>
        <member name="P:KS.Reactor.ksCapsule.Height">
            <summary>Height.</summary>
        </member>
        <member name="P:KS.Reactor.ksCapsule.CylinderHalfHeight">
            <summary>Half height of the cylinder part.</summary>
        </member>
        <member name="P:KS.Reactor.ksCapsule.Alignment">
            <summary>Alignment.</summary>
        </member>
        <member name="T:KS.Reactor.ksSharedDataAttribute">
            <summary>
            Server scripts tagged with this will not have their editable field data stripped from their proxy scripts in
            client builds.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksStreamBuffer">
            <summary>Manages a buffer for reading and writing stream data toa byte array.</summary>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Create">
            <summary>
            Fetches a ksStreamBuffer from a pool of available buffers or
            create a new ksStreamBuffer if the pool is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="P:KS.Reactor.ksStreamBuffer.Array">
            <summary>
            Byte array managed by the stream buffer.
            Note: active buffers may only be using up to Count bytes of this array.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksStreamBuffer.Count">
            <summary>Amount of data in the managed array used by the buffer.</summary>
        </member>
        <member name="P:KS.Reactor.ksStreamBuffer.Offset">
            <summary>
            Current position of the cursor in the buffer.
            All read/write operations will access the managed array at this position.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Clear(System.Boolean)">
            <summary>Clears all data from the buffer.</summary>
            <param name="zero">If this is true, all bytes in the managed array will be set to 0.</param>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.ResizeBuffer(System.Int32)">
            <summary>Resizes and zeros the used portion of the manage array.</summary>
            <param name="size">New size.</param>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Write(System.Byte)">
            <summary>Writes a byte value at the current buffer offset.</summary>
            <param name="value"></param>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Write(System.Byte[])">
            <summary>Writes a byte array at the current buffer offset.</summary>
            <param name="value"></param>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Write``1(``0)">
            <summary>Writes a struct at the current buffer offset.</summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Read">
            <summary>Reads the byte at the current buffer offset.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.ReadBytes(System.Int32)">
            <summary>Reads multiple bytes at the current buffer offset.</summary>
            <param name="count">Number of bytes to read (-1 = up to the end of the buffer).</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Read``1">
            <summary>Reads the struct at the current buffer offset.</summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.TryGetSegment(KS.Reactor.ksStreamBuffer.Segment@,System.Int32,System.Int32)">
            Attempt to get a segment of the buffer.
            
            @param   out StreamBuffer.Segment - segement of buffer.
            @param   int offset - segment start index
            @param   int count - segment size (-1 up to the end of the buffer)
            @return  bool
            <summary>Attempts to get a segment of the buffer.</summary>
            <param name="segment">Segement of buffer.</param>
            <param name="offset">Segment start index.</param>
            <param name="count">Segment size (-1 up to the end of the buffer).</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Release">
            <summary>Releases the buffer and put it pool of available buffers.</summary>
        </member>
        <member name="T:KS.Reactor.ksStreamBuffer.Segment">
            <summary>
            Represents a segment of a ksStreamBuffer.
            While a segment is not released, the buffer cannot be written to or released.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Segment.#ctor(KS.Reactor.ksStreamBuffer,System.Byte[],System.Int32,System.Int32)">
            <summary>Constructor.</summary>
            <param name="owner">Buffer this segment belongs to.</param>
            <param name="buffer">Source byte array.</param>
            <param name="offset">Offset in the byte array.</param>
            <param name="count">Number of bytes.</param>
        </member>
        <member name="P:KS.Reactor.ksStreamBuffer.Segment.Array">
            <summary>Byte array managed by the segment.</summary>
        </member>
        <member name="P:KS.Reactor.ksStreamBuffer.Segment.Count">
            <summary>Size of the buffer segment.</summary>
        </member>
        <member name="P:KS.Reactor.ksStreamBuffer.Segment.Offset">
            <summary>Offset in the referenced byte array.</summary>
        </member>
        <member name="M:KS.Reactor.ksStreamBuffer.Segment.Release">
            <summary>Releases the segement back to the buffer.</summary>
        </member>
        <member name="T:KS.Reactor.ksSweepResult">
            <summary>Result of an raycast scene query.</summary>
        </member>
        <member name="F:KS.Reactor.ksSweepResult.Entity">
            <summary>Entity hit by the raycast.</summary>
        </member>
        <member name="F:KS.Reactor.ksSweepResult.Collider">
            <summary>Collider hit by the raycast.</summary>
        </member>
        <member name="F:KS.Reactor.ksSweepResult.Point">
            <summary>Point on the surface of the entity where the ray instersected</summary>
        </member>
        <member name="F:KS.Reactor.ksSweepResult.Normal">
            <summary>Normal of the surface where the raycast point is.</summary>
        </member>
        <member name="F:KS.Reactor.ksSweepResult.Distance">
            <summary>Distance along the sweep when the intersection was detected.</summary>
        </member>
        <member name="P:KS.Reactor.ksSweepResult.IsValid">
            <summary>A raycast result is only valid if it includes an entity reference.</summary>
        </member>
        <member name="P:KS.Reactor.ksSweepResult.IsInitialOverlap">
            <summary>Is the entity/collider overlapping with the raycast origin.</summary>
        </member>
        <member name="T:KS.Reactor.ksTime">
            Holds time data that is common to the client and server.
        </member>
        <member name="F:KS.Reactor.ksTime.m_zero">
            Time with zero for all values.
        </member>
        <member name="P:KS.Reactor.ksTime.Delta">
            Local simulated game time in seconds since the last update.
        </member>
        <member name="P:KS.Reactor.ksTime.RealDelta">
            Real time in seconds since the last update.
        </member>
        <member name="P:KS.Reactor.ksTime.Time">
            Total simluated game time in seconds.
        </member>
        <member name="P:KS.Reactor.ksTime.RealTime">
            Real time in seconds that the game has been running.
        </member>
        <member name="P:KS.Reactor.ksTime.Frame">
            Server frame number.
        </member>
        <member name="T:KS.Reactor.ksTransform">
            <summary>
            Transform with methods for moving entities. Their are two kinds of movement: teleportation and moving. Moving will
            test for collisions along the way and teleportation will not. If you make more than one move call in a frame,
            the collision check will be along a straight path from the position at the start of the frame to the end position.
            You cannot do a move and a teleport in the same frame. If you make both calls the entity will teleport.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksTransform.UpdateCallback">
            <summary>Callback invoked when a transform updates.</summary>
            <param name="transform">The transform modified.</param>
            <param name="flag">Dirty flag indicating the field that was changed.</param>
        </member>
        <member name="E:KS.Reactor.ksTransform.OnUpdate">
            <summary>Static tranform update event.</summary>
        </member>
        <member name="F:KS.Reactor.ksTransform.PositionTolerance">
            <summary>
            Position tolerance defines the minimum position delta necessary for the translation to be applied. A higher
            value will have the effect of stabilizing objects at the cost of positional accuracy.
            </summary>
        </member>
        <member name="F:KS.Reactor.ksTransform.RotationTolerance">
            <summary>
            Rotation tolerance defines the minimum delta on any one of the x,y,z,w parts of a quaternion rotation
            necessary for the rotation to be applied. A higher value will have the effect of stabilizing objects at the
            cost of rotational accuracy.
            </summary>
        </member>
        <member name="F:KS.Reactor.ksTransform.ScaleTolerance">
            <summary>
            Scale tolerance defines the minimum position delta necessary for the scale to be applied. A higher
            value will have the effect of stabilizing objects at the cost of positional accuracy.
            </summary>
        </member>
        <member name="T:KS.Reactor.ksTransform.DirtyFlags">
            <summary>Flags used to indicate that a field has changed.</summary>
        </member>
        <member name="F:KS.Reactor.ksTransform.DirtyFlags.TRACKED">
            <summary>Is this transform tracked in the modified transform list?</summary>
        </member>
        <member name="M:KS.Reactor.ksTransform.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:KS.Reactor.ksTransform.#ctor(KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksVector3)">
            <summary>Constructor.</summary>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
        </member>
        <member name="P:KS.Reactor.ksTransform.EntityId">
            <summary>ID of the entity this transform is attached to.</summary>
        </member>
        <member name="M:KS.Reactor.ksTransform.SetTransformDirty">
            <summary>A dirty transform requires 3 sync updates to clear.</summary>
        </member>
        <member name="M:KS.Reactor.ksTransform.IsDirty(KS.Reactor.ksTransform.DirtyFlags)">
            <summary>Checks if a property is dirty.</summary>
            <param name="flag">Dirty flag to check.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform.SetDirty(KS.Reactor.ksTransform.DirtyFlags)">
            <summary>Sets a dirty flag bit.</summary>
            <param name="flag">Dirty flag to set.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.ClearDirty(KS.Reactor.ksTransform.DirtyFlags)">
            <summary>Clears the dirty flag for a field.</summary>
            <param name="flag">Dirty flag to clear.</param>
        </member>
        <member name="P:KS.Reactor.ksTransform.Position">
            <summary>Position.</summary>
        </member>
        <member name="P:KS.Reactor.ksTransform.Rotation">
            <summary>Rotation.</summary>
        </member>
        <member name="P:KS.Reactor.ksTransform.Scale">
            <summary>Scale.</summary>
        </member>
        <member name="P:KS.Reactor.ksTransform.IsPermanent">
            <summary>
            Is this a permanent entity? Permanent entities are static entities that cannot be moved or deleted.
            They are not sent to clients since clients will already know where they are.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksTransform.Teleported">
            <summary>
            Indicator for the encoder if the entity was moved using the Teleport method.
            If this value is true, the next sync frame will tell clients to skip
            interpolation of this transform when updating the entity position on the
            client. This value is cleared after every network sync.
            </summary>
        </member>
        <member name="P:KS.Reactor.ksTransform.IsSyncReady">
            <summary>Sets whether this entity is ready to sync to clients.</summary>
        </member>
        <member name="M:KS.Reactor.ksTransform.Forward">
            <summary>Gets the local forward direction.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform.Up">
            <summary>Gets the local up direction.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform.Right">
            <summary>Gets the local right direction.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform.Backwards">
            <summary>Gets the local backwards direction.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform.Down">
            <summary>Gets the local down direction.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform.Left">
            <summary>Gets the local left direction.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform.Move(KS.Reactor.ksVector3)">
            <summary>Adds a delta to the transform position.</summary>
            <param name="delta">Delta to add to position.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.MoveTo(KS.Reactor.ksVector3)">
            <summary>Moves the entity to a new position.</summary>
            <param name="position">Position to move to.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.MoveTowards(KS.Reactor.ksVector3,System.Single)">
            <summary>Moves the transform towards a position.</summary>
            <param name="position">Target to move towards.</param>
            <param name="delta">
            Delta to move by. It will not overshoot the target. Negative values will move away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform.Teleport(KS.Reactor.ksVector3)">
            <summary>Teleports the entity to a location.</summary>
            <param name="position">Position to teleport to.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateTo(KS.Reactor.ksQuaternion)">
            <summary>Sets the rotation.</summary>
            <param name="rotation">Rotation to rotate to.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.ScaleTo(KS.Reactor.ksVector3)">
            <summary>Sets the scale.</summary>
            <param name="scale"></param>
        </member>
        <member name="M:KS.Reactor.ksTransform.Rotate(KS.Reactor.ksQuaternion)">
            <summary>Rotates the transform.</summary>
            <param name="rotation">Rotation to rotate by.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateLocal(KS.Reactor.ksQuaternion)">
            <summary>Rotates the transform in local space.</summary>
            <param name="rotation">Rotation to rotate by.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.Rotate(KS.Reactor.ksVector3)">
            <summary>Rotates the transform using euler angles.</summary>
            <param name="euler">Euler angles in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateRadians(KS.Reactor.ksVector3)">
            <summary>Rotates the transform using euler angles.</summary>
            <param name="euler">Euler angles in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateLocal(KS.Reactor.ksVector3)">
            <summary>Rotates the transform locally using euler angles.</summary>
            <param name="euler">Euler angles in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateLocalRadians(KS.Reactor.ksVector3)">
            <summary>Rotates the transform locally user euler angles.</summary>
            <param name="euler">Euler angles in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.Rotate(KS.Reactor.ksVector3,System.Single)">
            <summary>Rotates the transform.</summary>
            <param name="axis">Axis of rotation.</param>
            <param name="angle">Angle to rotate in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateRadians(KS.Reactor.ksVector3,System.Single)">
            <summary>Rotates the transform.</summary>
            <param name="axis">Axis of rotation.</param>
            <param name="angle">Angle to rotate in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.LookAt(KS.Reactor.ksVector3)">
            <summary>
            Rotates the transform to look at a position. It will try to orient local up to be ksVector3.Up.
            </summary>
            <param name="position">Position in world space to look at.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.LookAt(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Rotates the transform to look at a position.</summary>
            <param name="position">Position in world space to look at.</param>
            <param name="up">Up vector to try and orient local up to.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateTowards(KS.Reactor.ksQuaternion,System.Single)">
            <summary>Rotates the transform towards a rotation.</summary>
            <param name="target">Target to rotate towards.</param>
            <param name="deltaAngle">
            Delta angle in degrees to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateTowards(KS.Reactor.ksVector3,System.Single)">
            <summary>
            Rotates the transform towards a position. It will try to orient local up to be ksVector3.Up.
            </summary>
            <param name="position">Position in world space to rotate towards.</param>
            <param name="deltaAngle">
            Delta angle in degrees to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateTowards(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            <summary>Rotates the transform towards a position.</summary>
            <param name="position">Position in world space to rotate towards.</param>
            <param name="up">Up vector to try and orient local up to.</param>
            <param name="deltaAngle">
            Delta angle in degrees to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateTowardsRadians(KS.Reactor.ksQuaternion,System.Single)">
            <summary>Rotates the transform towards a rotation.</summary>
            <param name="target">Target to rotate towards.</param>
            <param name="deltaAngle">
            Delta angle in radians to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateTowardsRadians(KS.Reactor.ksVector3,System.Single)">
            <summary>
            Rotates the transform towards a position. It will try to orient local up to be ksVector3.Up.
            </summary>
            <param name="position">Position in world space to rotate towards.</param>
            <param name="deltaAngle">
            Delta angle in radians to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RotateTowardsRadians(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            <summary>Rotates the transform towards a position.</summary>
            <param name="position">Position in world space to rotate towards.</param>
            <param name="up">Up vector to try and orient local up to.</param>
            <param name="deltaAngle">
            Delta angle in radians to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform.AddAngularDisplacement(KS.Reactor.ksVector3)">
            <summary>Rotates the transform using angular displacement.</summary>
            <param name="angularDisplacement">Angular displacement in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.AddAngularDisplacementRadians(KS.Reactor.ksVector3)">
            <summary>Rotates the transform using angular displacement.</summary>
            <param name="angularDisplacement">Angular displacement in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.Pitch(System.Single)">
            <summary>Rotates the transform through the world right axis.</summary>
            <param name="angle">Angle to rotate in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.PitchRadians(System.Single)">
            <summary>Rotates the transform through the world right axis.</summary>
            <param name="angle">Angle to rotate in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.PitchLocal(System.Single)">
            <summary>Rotates the transform through the local right axis.</summary>
            <param name="angle">Angle to rotate in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.PitchLocalRadians(System.Single)">
            <summary>Rotates the transform through the local right axis.</summary>
            <param name="angle">Angle to rotate in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.Yaw(System.Single)">
            <summary>Rotates the transform through the world up axis.</summary>
            <param name="angle">Angle to rotate in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.YawRadians(System.Single)">
            <summary>Rotates the transform through the world up axis.</summary>
            <param name="angle">Angle to rotate in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.YawLocal(System.Single)">
            <summary>Rotates the transform through the local up axis.</summary>
            <param name="angle">Angle to rotate in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.YawLocalRadians(System.Single)">
            <summary>Rotates the transform through the local up axis.</summary>
            <param name="angle">Angle to rotate in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.Roll(System.Single)">
            <summary>Rotates the transform through the world forward axis.</summary>
            <param name="angle">Angle to rotate in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RollRadians(System.Single)">
            <summary>Rotates the transform through the world forward axis.</summary>
            <param name="angle">Angle to rotate in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RollLocal(System.Single)">
            <summary>Rotates the transform through the local forward axis.</summary>
            <param name="angle">Angle to rotate in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.RollLocalRadians(System.Single)">
            <summary>Rotates the transform through the local forward axis.</summary>
            <param name="angle">Angle to rotate in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform.ToWorld(KS.Reactor.ksVector3)">
            <summary>Converts a point from local space to world space.</summary>
            <param name="localPosition"></param>
            <returns>Position in world space.</returns>
        </member>
        <member name="M:KS.Reactor.ksTransform.ToLocal(KS.Reactor.ksVector3)">
            <summary>Converts a point from world space to local space.</summary>
            <param name="worldPosition"></param>
            <returns>Position in local space.</returns>
        </member>
        <member name="T:KS.Reactor.ksTransform2D">
            <summary>
            Transform with methods for moving entities in 2 dimensions. There are two kinds of movement: teleportation and
            moving. Moving will test for collisions along the way and teleportation will not. If you make more than one
            move call in a frame, the collision check will be along a straight path from the position at the start of the
            frame to the end position. You cannot do a move and a teleport in the same frame. If you make both calls the
            entity will teleport.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.#ctor(KS.Reactor.ksTransform)">
            <summary>Constructs a 2D transform which uses a 3D transform data source.</summary>
            <param name="transform">Transform data source.</param>
        </member>
        <member name="P:KS.Reactor.ksTransform2D.Position">
            <summary>Position.</summary>
        </member>
        <member name="P:KS.Reactor.ksTransform2D.Rotation">
            <summary>Rotation in degrees.</summary>
        </member>
        <member name="P:KS.Reactor.ksTransform2D.RotationRadians">
            <summary>Rotation in radians.</summary>
        </member>
        <member name="P:KS.Reactor.ksTransform2D.Scale">
            <summary>Scale.</summary>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.Forward">
            <summary>Returns the local forward direction. At 0 rotation this is (1, 0).</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.Left">
            <summary>Returns the local left direction. At 0 rotation this is (0, 1).</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.Right">
            <summary>Returns the local right direction. At 0 rotation this is (0, -1).</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.Backwards">
            <summary>Returns the local backwards direction. At 0 rotation this is (-1, 0).</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.Move(KS.Reactor.ksVector2)">
            <summary>Adds a delta to the transform position.</summary>
            <param name="delta">Delta to add to position.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.MoveTo(KS.Reactor.ksVector2)">
            <summary>Moves the entity to a new position.</summary>
            <param name="position">Position to move to.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.MoveTowards(KS.Reactor.ksVector2,System.Single)">
            <summary>Moves the transform towards a position.</summary>
            <param name="position">Target to move towards.</param>
            <param name="delta">
            Delta to move by. It will not overshoot the target. Negative values will move away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.Teleport(KS.Reactor.ksVector2)">
            <summary>Teleports the entity to a location.</summary>
            <param name="position">Position to teleport to.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.RotateTo(System.Single)">
            <summary>Sets the rotation.</summary>
            <param name="rotation">Rotation in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.RotateToRadians(System.Single)">
            <summary>Sets the rotation.</summary>
            <param name="rotation">Rotation in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.ScaleTo(KS.Reactor.ksVector2)">
            <summary>Sets the scale.</summary>
            <param name="scale"></param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.Rotate(System.Single)">
            <summary>Rotates the transform.</summary>
            <param name="rotation">Rotation to add in degrees.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.RotateRadians(System.Single)">
            <summary>Rotates the transform.</summary>
            <param name="rotation">Rotation to add in radians.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.LookAt(KS.Reactor.ksVector2)">
            <summary>Rotates the transform to look at a position.</summary>
            <param name="position">Position in world space to look at.</param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.RotateTowards(System.Single,System.Single)">
            <summary>Rotates the transform towards a rotation.</summary>
            <param name="target">Target angle to rotate towards in degrees.</param>
            <param name="deltaAngle">
            Delta angle in degrees to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.RotateTowards(KS.Reactor.ksVector2,System.Single)">
            <summary>Rotates the transform towards a position.</summary>
            <param name="position">Position in world space to rotate towards.</param>
            <param name="deltaAngle">
            Delta angle in degrees to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.RotateTowardsRadians(System.Single,System.Single)">
            <summary>Rotates the transform towards a rotation.</summary>
            <param name="target">Target angle to rotate towards in radians.</param>
            <param name="deltaAngle">
            Delta angle in radians to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.RotateTowardsRadians(KS.Reactor.ksVector2,System.Single)">
            <summary>Rotates the transform towards a position.</summary>
            <param name="position">Position in world space to rotate towards.</param>
            <param name="deltaAngle">
            Delta angle in radians to rotate. It will not overshoot the target.
            Negative values will rotate away from the target.
            </param>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.ToWorld(KS.Reactor.ksVector2)">
            <summary>Converts a point from local space to world space.</summary>
            <param name="localPosition"></param>
            <returns>Position in world space.</returns>
        </member>
        <member name="M:KS.Reactor.ksTransform2D.ToLocal(KS.Reactor.ksVector2)">
            <summary>Converts a point from world space to local space.</summary>
            <param name="worldPosition"></param>
            <returns>Position in local space.</returns>
        </member>
        <member name="T:KS.Reactor.ksUnityTagAttribute">
            <summary>
            Tag server fields, properties, classes or structs to add arbitrary Unity tags to their generated proxies.
            Fields and properties tagged with this attribute will be editable in the inspector even if they aren't tagged
            with <see cref="T:KS.Reactor.ksEditableAttribute"/>. Note that if <see cref="P:KS.Reactor.ksUnityTagAttribute.Tag"/> is not valid code, it will generate
            proxies that have compiler errors.
            </summary>
            <example>
            <code>
            [ksUnityTag("[TextArea]")]
            public string Text;
            </code>
            This creates an editable text field with the [TextArea] tag to make it a text area in Unity's inspector.
            </example>
        </member>
        <member name="P:KS.Reactor.ksUnityTagAttribute.Tag">
            <summary>
            Code to insert above the class, struct, field, or property declaration in the generated proxy. Usually a
            Unity tag. This proxy script will have a compile error if this is not valid code.
            </summary>
        </member>
        <member name="M:KS.Reactor.ksUnityTagAttribute.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="tag">
            Code to insert above the class, struct, field, or property declaration in the generated proxy. Usually a
            Unity tag. This proxy script will have a compile error if this is not valid code.
            </param>
        </member>
        <member name="T:KS.Reactor.ksVector2">
            <summary>Vector2 struct.</summary>
            Vector struct
        </member>
        <member name="F:KS.Reactor.ksVector2.m_one">
            <summary>One.</summary>
        </member>
        <member name="F:KS.Reactor.ksVector2.m_zero">
            <summary>Zero.</summary>
        </member>
        <member name="M:KS.Reactor.ksVector2.#ctor(System.Single,System.Single)">
            <summary>Constructor.</summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Implicit(KS.Reactor.ksVector2)~System.Single[]">
            <summary>Implicit conversion from ksVector2 to float[2].</summary>
            <param name="value"></param>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Implicit(System.Single[])~KS.Reactor.ksVector2">
            <summary>Implicit conversion from float[] to ksVector2.</summary>
            <param name="value"></param>
        </member>
        <member name="P:KS.Reactor.ksVector2.X">
            <summary>X value.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector2.Y">
            <summary>Y value.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector2.Item(System.Int32)">
            <summary>Indexer.</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Magnitude">
            <summary>Gets the magnitude.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.MagnitudeSquared">
            <summary>Gets the magnitude squared.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Normalized">
            <summary>Gets a normalized copy of this vector.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Normalize">
            <summary>Normalizes this vector.</summary>
            <returns>False if the vector could not be normalized because it's the zero vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Clamped(System.Single)">
            <summary>Returns a copy of this vector with its magnitude clamped to maxLength.</summary>
            <param name="maxMagnitude">Max magnitude to clamp magnitude to.</param>
            <returns>Clamped vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Clamp(System.Single)">
            <summary>Clamps the magnitude of this vector.</summary>
            <param name="maxMagnitude">Max magnitude to clamp magnitude to.</param>
        </member>
        <member name="M:KS.Reactor.ksVector2.ToDegrees">
            <summary>Converts the direction of the vector to an angle.</summary>
            <returns>Angle in degrees [0, 360).</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.ToRadians">
            <summary>Converts the direction of the vector to an angle.</summary>
            <returns>Angle in radians [0, 2PI).</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.FromDegrees(System.Single,System.Single)">
            <summary>Constructs a Vector2 from an angle.</summary>
            <param name="angle">Angle in degrees.</param>
            <param name="magnitude">Magnitude</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.FromRadians(System.Single,System.Single)">
            <summary>Constructs a Vector2 from an angle.</summary>
            <param name="angle">Angle in radians.</param>
            <param name="magnitude">Magnitude.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Abs">
            <summary>Absolute value vector.</summary>
            <returns>New vector where all components are absolue values of this vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.MaxValue(System.Boolean)">
            <summary>Gets the maximum component in the vector.</summary>
            <param name="absolute">Return the max absolute value.</param>
            <returns>Max component value.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.MinValue(System.Boolean)">
            <summary>Gets the minimum component in the vector.</summary>
            <param name="absolute">Return the min absolute value.</param>
            <returns>Min component value.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.ReplaceNaNs(System.Single)">
            <summary>Replaces NaN values in the vector.</summary>
            <param name="value">Replacement value.</param>
            <returns>True if any of the values was replaced.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.ToString">
            <summary>Returns a string that represents the current Vector2.</summary>
            <returns>A string that represents the current Vector2.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.ToString(System.String)">
            <summary>Returns a string respresentation of the vector.</summary>
            <param name="format"></param>
            <returns>Representation of the vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.ToString(System.IFormatProvider)">
            <summary>Returns a string respresentation of the vector.</summary>
            <param name="provider"></param>
            <returns>Representation of the vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.DeltaDegrees(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Returns the angle in degrees between two vectors.</summary>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
            <returns>Angle in degrees.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.DeltaRadians(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Returns the angle in radians between two vectors.</summary>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Dot(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Computes the dot product of two vectors.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Max(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Returns a vector that is made from the largest components of two vectors.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>Max vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Min(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Returns a vector that is made from the smallest components of two vectors.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>Min vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Project(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Projects a vector onto another vector.</summary>
            <param name="vector">Vector to project.</param>
            <param name="target">Target to project onto.</param>
            <returns>Projection result.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Reflect(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Reflects a vector off the plane defined by a normal.</summary>
            <param name="direction">Direction to reflect.</param>
            <param name="normal">Normal of plane to reflect off of.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Lerp(KS.Reactor.ksVector2,KS.Reactor.ksVector2,System.Single)">
            <summary>Linearly interpolates between two vectors.</summary>
            <param name="from">Vector to interpolate from.</param>
            <param name="to">Vector to interpolate to.</param>
            <param name="t">Value between 0 and 1 that determines the amount of interpolation.</param>
            <returns>Interpolated vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Slerp(KS.Reactor.ksVector2,KS.Reactor.ksVector2,System.Single,System.Boolean)">
            <summary>Spherically interpolates between from and to by t.</summary>
            <param name="from">Vector to interpolate from.</param>
            <param name="to">Vector to interpolate to.</param>
            <param name="t">Value between 0 and 1 that determines the amount of interpolation.</param>
            <param name="lerpMagnitude">If false, magnitude won't be interpolated.</param>
            <returns>Interpolated vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.MoveTowards(KS.Reactor.ksVector2,KS.Reactor.ksVector2,System.Single)">
            <summary>Moves a point towards a target point.</summary>
            <param name="start">start point.</param>
            <param name="target">target to move towards.</param>
            <param name="delta">
            Delta distance to move. It will not overshoot the target. Negative values will move away from the target.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Rotate(KS.Reactor.ksVector2,System.Single)">
            <summary>Rotates a vector by an angle.</summary>
            <param name="direction">Direction to rotate.</param>
            <param name="angle">Angle in degrees.</param>
            <returns>Rotated vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.RotateRadians(KS.Reactor.ksVector2,System.Single)">
            <summary>Rotates a vector by an angle.</summary>
            <param name="direction">Direction to rotate.</param>
            <param name="angle">Angle in radians.</param>
            <returns>Rotated vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Scale(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Multiplies two vectors component-wise.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Subtraction(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Subtracts one vector from another.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_UnaryNegation(KS.Reactor.ksVector2)">
            <summary>
            Multiplies the vector by -1.</summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Multiply(KS.Reactor.ksVector2,System.Single)">
            <summary>
            Multiplies a ksVector2 by a number. Multiplies each component of Vector2 by a number scale.
            </summary>
            <param name="vector"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Multiply(System.Single,KS.Reactor.ksVector2)">
            <summary>
            Multiplies a ksVector2 by a number. Multiplies each component of Vector2 by a number scale.
            </summary>
            <param name="scale"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Division(KS.Reactor.ksVector2,System.Single)">
            <summary>Divides a ksVector2 by a number.</summary>
            <param name="vector"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Division(System.Single,KS.Reactor.ksVector2)">
            <summary>Divides a number by a ksVector2.</summary>
            <param name="number"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Addition(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Adds two ksVector2.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Equality(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Checks if two vectors are equal.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the vectors are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Inequality(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            <summary>Checks if two vectors are not equal</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the vectors are not equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Equals(System.Object)">
            <summary>Checks if this vector is equal to an object.</summary>
            <param name="obj">Object to compare with this vector.</param>
            <returns>True if this vector is equal to the object.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.Equals(KS.Reactor.ksVector2)">
            <summary>Checks if this vector is equal to another.</summary>
            <param name="other">Other vector to compare with.</param>
            <returns>True if the vectors are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.GetHashCode">
            <summary>Gets the hash code for this vector.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Implicit(KS.Reactor.ksVector2)~UnityEngine.Vector2">
            Implicit conversion from ksVector2 to Unity ksVector2.
            
            @param   ksVector2 value
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Implicit(UnityEngine.Vector2)~KS.Reactor.ksVector2">
            Implicit conversion from Unity Vector2 to ksVector2.
            
            @param   Vector2 value
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Addition(KS.Reactor.ksVector2,UnityEngine.Vector2)">
            Vector addition with ksVector2 and Unity Vector2.
            
            @param   ksVector2 lhs
            @param   Vector2 rhs
            @return  ksVector2 lhs + rhs
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Addition(UnityEngine.Vector2,KS.Reactor.ksVector2)">
            Vector addition with Unity Vector2 and ksVector2.
            
            @param   Vector2 lhs
            @param   ksVector2 rhs
            @return  Vector2 lhs + rhs
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Subtraction(KS.Reactor.ksVector2,UnityEngine.Vector2)">
            Vector subtraction with ksVector2 and Unity Vector2.
            
            @param   ksVector2 lhs
            @param   Vector2 rhs
            @return  ksVector2 lhs - rhs
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Subtraction(UnityEngine.Vector2,KS.Reactor.ksVector2)">
            Vector subtraction with Unity Vector2 and ksVector2.
            
            @param   Vector2 lhs
            @param   ksVector2 rhs
            @return  Vector2 lhs - rhs
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Equality(KS.Reactor.ksVector2,UnityEngine.Vector2)">
            Equality comparison with with ksVector2 and Unity Vector2.
            
            @param   ksVector2 lhs
            @param   Vector2 rhs
            @return  bool lhs == rhs
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Equality(UnityEngine.Vector2,KS.Reactor.ksVector2)">
            Equality comparison with Unity Vector2 and ksVector2.
            
            @param   Vector2 lhs
            @param   ksVector2 rhs
            @return  bool lhs == rhs
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Inequality(KS.Reactor.ksVector2,UnityEngine.Vector2)">
            Inequality comparison with with ksVector2 and Unity Vector2.
            
            @param   ksVector2 lhs
            @param   Vector2 rhs
            @return  bool lhs != rhs
        </member>
        <member name="M:KS.Reactor.ksVector2.op_Inequality(UnityEngine.Vector2,KS.Reactor.ksVector2)">
            Inequality comparison with Unity Vector2 and ksVector2.
            
            @param   Vector2 lhs
            @param   ksVector2 rhs
            @return  bool lhs != rhs
        </member>
        <member name="T:KS.Reactor.ksVector3">
            <summary>ksVector3 struct.</summary>
            Vector struct
        </member>
        <member name="P:KS.Reactor.ksVector3.One">
            <summary>One.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Zero">
            <summary>Zero.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Forward">
            <summary>World forward direction.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Up">
            <summary>World up direction.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Right">
            <summary>World right direction.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Backwards">
            <summary>World backwards direction.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Down">
            <summary>World down direction.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Left">
            <summary>World left direction.</summary>
        </member>
        <member name="M:KS.Reactor.ksVector3.#ctor(System.Single,System.Single)">
            <summary>Constructor that takes x and y values and set z to 0.</summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:KS.Reactor.ksVector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>Constructor.</summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Implicit(KS.Reactor.ksVector3)~System.Single[]">
            <summary>Implicit conversion from ksVector3 to float[3].</summary>
            <param name="value"></param>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Implicit(System.Single[])~KS.Reactor.ksVector3">
            <summary>Implicit conversion from float[] to ksVector3.</summary>
            <param name="value"></param>
        </member>
        <member name="P:KS.Reactor.ksVector3.X">
            <summary>X value.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Y">
            <summary>Y value.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Z">
            <summary>Z value.</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.XY">
            <summary>X and Y values as a ksVector2</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.XZ">
            <summary>X and Z values as a ksVector2</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.YZ">
            <summary>Y and Z values as a ksVector2</summary>
        </member>
        <member name="P:KS.Reactor.ksVector3.Item(System.Int32)">
            <summary>Indexer.</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Magnitude">
            <summary>Returns the magnitude.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.MagnitudeSquared">
            <summary>Returns the magnitude squared.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Normalized">
            <summary>Returns the a normalized copy of this vector.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Normalize">
            <summary>Normalizes this vector.</summary>
            <returns>False if the vector could not be normalized because it's the zero vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Clamped(System.Single)">
            <summary>Returns a copy of this vector with its magnitude clamped to maxLength.</summary>
            <param name="maxMagnitude">Max magnitude to clamp magnitude to.</param>
            <returns>Clamped vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Clamp(System.Single)">
            <summary>Clamps the magnitude of this vector.</summary>
            <param name="maxMagnitude">Max magnitude to clamp magnitude to.</param>
        </member>
        <member name="M:KS.Reactor.ksVector3.Abs">
            <summary>Absolute value vector.</summary>
            <returns>New vector where all components are absolue values of this vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.MaxValue(System.Boolean)">
            <summary>Gets the maximum component in the vector.</summary>
            <param name="absolute">If ture, returns the max absolute value.</param>
            <returns>Max component value.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.MinValue(System.Boolean)">
            <summary>Gets the minimum component in the vector.</summary>
            <param name="absolute">If true, return sthe min absolute value.</param>
            <returns>Min component value.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.ReplaceNaNs(System.Single)">
            <summary>Replaces NaN values in the vector.</summary>
            <param name="value">Replacement value.</param>
            <returns>True if any of the values was replaced.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.ToString">
            <summary>Returns a string that represents the current ksVector3.</summary>
            <returns>A string that represents the current ksVector3</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.ToString(System.String)">
            <summary>Returns a string respresentation of the vector.</summary>
            <param name="format"></param>
            <returns>String representation of the vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.ToString(System.IFormatProvider)">
            <summary>Returns a string respresentation of the vector.</summary>
            <param name="provider"></param>
            <returns>String representation of the vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.DeltaDegrees(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Returns the angle in degrees between to vectors.</summary>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
            <returns>Angle in degrees.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.DeltaRadians(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Returns the angle in degrees between to vectors.</summary>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Dot(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Computes the dot product of two vectors.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Cross(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>Cross product.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Max(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Returns a vector that is made from the largest components of two vectors.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>Max vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Min(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Returns a vector that is made from the smallest components of two vectors</summary>
            <param name="lhs"></param>
            <param name="rhs">Min vector.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.OrthoNormalize(KS.Reactor.ksVector3@,KS.Reactor.ksVector3@)">
            <summary>Normalizes vectors and makes tangent orthoganol to normal.</summary>
            <param name="normal"></param>
            <param name="tangent"></param>
        </member>
        <member name="M:KS.Reactor.ksVector3.Project(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Projects a vector onto another vector.</summary>
            <param name="vector">Vector to project.</param>
            <param name="target">Target to project onto.</param>
            <returns>Projection result.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Reflect(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Reflects a vector off the plane defined by a normal.</summary>
            <param name="direction">Direction to reflect.</param>
            <param name="normal">Normal of plane to reflect off of.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Lerp(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            <summary>Linearly Interpolates between two vectors.</summary>
            <param name="from">Vector to interpolate from.</param>
            <param name="to">Vector to interpolate to.</param>
            <param name="t">Value between 0 and 1 that determines the amount of interpolation.</param>
            <returns>Interpolated vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Slerp(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single,System.Boolean)">
            <summary>Spherically interpolates between from and to by t.</summary>
            <param name="from">Vector to interpolate from.</param>
            <param name="to">Vector to interpolate to.</param>
            <param name="t">Value between 0 and 1 that determines the amount of interpolation.</param>
            <param name="lerpMagnitude">If false, magnitude won't be interpolated.</param>
            <returns>Interpolated vector.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.MoveTowards(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            <summary>Moves a point towards a target point.</summary>
            <param name="start">Start point.</param>
            <param name="target">Target to move towards.</param>
            <param name="delta">
            delta distance to move. It will not overshoot the target. Negative values will move away from the target.
            </param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.RotateTowards(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            <summary>Rotates a vector towards a direction.</summary>
            <param name="vector">Vector to rotate.</param>
            <param name="direction">Direction to rotate towards.</param>
            <param name="deltaDegrees">Max amount in degrees to rotate the vector.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.RotateTowardsRadians(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            <summary>Rotates a vector towards a direction.</summary>
            <param name="vector">Vector to rotate.</param>
            <param name="direction">Direction to rotate towards.</param>
            <param name="deltaRadians">Max amount in radians to rotate the vector.</param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Scale(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Multiplies two vectors component-wise.</summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Subtraction(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Subtracts one vector from another.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_UnaryNegation(KS.Reactor.ksVector3)">
            <summary>Multiplies the vector by -1.</summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Multiply(KS.Reactor.ksVector3,System.Single)">
            <summary>
            Multiplies a ksVector3 by a number. Multiplies each component of ksVector3 by a number scale.
            </summary>
            <param name="vector"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Multiply(System.Single,KS.Reactor.ksVector3)">
            <summary>
            Multiplies a ksVector3 by a number. Multiplies each component of ksVector3 by a number scale.
            </summary>
            <param name="scale"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Division(KS.Reactor.ksVector3,System.Single)">
            <summary>Divides a ksVector3 by a number.</summary>
            <param name="vector"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Division(System.Single,KS.Reactor.ksVector3)">
            <summary>Dives a number by a ksVector3.</summary>
            <param name="number"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Addition(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Adds two KSVector3s.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Equality(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Checks if two vectors are equal.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the vectors are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Inequality(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            <summary>Checks if two vectors are not equal.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the vectors are not equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Equals(System.Object)">
            <summary>Checks if this vector is equal to an object.</summary>
            <param name="obj">Object to compare with this vector.</param>
            <returns>True if this vector is equal to the object.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.Equals(KS.Reactor.ksVector3)">
            <summary>Checks if this vector is equal to another.</summary>
            <param name="other">Other vector to compare with.</param>
            <returns>True if the vectors are equal.</returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.GetHashCode">
            <summary>Gets the hash code for this vector.</summary>
            <returns></returns>
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Implicit(KS.Reactor.ksVector3)~UnityEngine.Vector3">
            Implicit conversion from ksVector3 to Unity Vector3.
            
            @param   ksVector3 value
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Implicit(UnityEngine.Vector3)~KS.Reactor.ksVector3">
            Implicit conversion from Unity Vector3 to ksVector3.
             
            @param   Vector3 value
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Addition(KS.Reactor.ksVector3,UnityEngine.Vector3)">
            Vector addition with ksVector3 and Unity Vector3.
            
            @param   ksVector3 lhs
            @param   Vector3 rhs
            @return  ksVector3 lhs + rhs
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Addition(UnityEngine.Vector3,KS.Reactor.ksVector3)">
            Vector addition with Unity Vector3 and ksVector3.
            
            @param   Vector3 lhs
            @param   ksVector3 rhs
            @return  Vector3 lhs + rhs
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Subtraction(KS.Reactor.ksVector3,UnityEngine.Vector3)">
            Vector subtraction with ksVector3 and Unity Vector3.
            
            @param   ksVector3 lhs
            @param   Vector3 rhs
            @return  ksVector3 lhs - rhs
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Subtraction(UnityEngine.Vector3,KS.Reactor.ksVector3)">
            Vector subtraction with Unity Vector3 and ksVector3.
            
            @param   Vector3 lhs
            @param   ksVector3 rhs
            @return  Vector3 lhs - rhs
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Equality(KS.Reactor.ksVector3,UnityEngine.Vector3)">
            Equality comparison with with ksVector3 and Unity Vector3.
            
            @param   ksVector3 lhs
            @param   Vector3 rhs
            @return  bool lhs == rhs
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Equality(UnityEngine.Vector3,KS.Reactor.ksVector3)">
            Equality comparison with Unity Vector3 and ksVector3.
            
            @param   Vector3 lhs
            @param   ksVector3 rhs
            @return  bool lhs == rhs
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Inequality(KS.Reactor.ksVector3,UnityEngine.Vector3)">
            Inequality comparison with with ksVector3 and Unity Vector3.
            
            @param   ksVector3 lhs
            @param   Vector3 rhs
            @return  bool lhs != rhs
        </member>
        <member name="M:KS.Reactor.ksVector3.op_Inequality(UnityEngine.Vector3,KS.Reactor.ksVector3)">
            Inequality comparison with Unity Vector3 and ksVector3.
            
            @param   Vector3 lhs
            @param   ksVector3 rhs
            @return  bool lhs != rhs
        </member>
        <member name="T:KS.Reactor.ksWebRequest">
            <summary>Asynchronous web request class using HTTP Web Request.</summary>
        </member>
        <member name="T:KS.Reactor.ksWebRequest.OnCompleteCallback">
            <summary>Callback for completed web requests.</summary>
            <param name="response">Completed web request.</param>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.Method">
            <summary>Method.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.URL">
            <summary>URL.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.JSON">
            <summary>JSON data.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.Headers">
            <summary>Headers.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.IsDone">
            <summary>Checks if the request has completed.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.Response">
            <summary>Response.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.OnComplete">
            <summary>Completion handler.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.SendTime">
            <summary>Time in ticks when the request was sent.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.HttpWebRequest">
            <summary>Underlying .Net request object.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.MultiPartBoundary">
            <summary>Multi-part boundary string.</summary>
        </member>
        <member name="P:KS.Reactor.ksWebRequest.MultiPartFiles">
            <summary>Multi-part file list.</summary>
        </member>
        <member name="M:KS.Reactor.ksWebRequest.#ctor(System.String,System.Net.WebHeaderCollection,System.String,KS.Reactor.ksJSON,KS.Reactor.ksWebResponse.Handler,System.Object)">
            <summary>Constructor specific requests.</summary>
            <param name="url">URL.</param>
            <param name="headers">Request string.</param>
            <param name="method">Request method.</param>
            <param name="jsonRequest">JSON request.</param>
            <param name="onComplete">Optional completion handler.</param>
            <param name="stateObject">User defined state tracking object.</param>
        </member>
        <member name="M:KS.Reactor.ksWebRequest.Send(System.String,System.Net.WebHeaderCollection,System.String,KS.Reactor.ksJSON,KS.Reactor.ksWebResponse.Handler,System.Object)">
            <summary>Sends an asynchronous web request.</summary>
            <param name="url">URL.</param>
            <param name="headers">Request string.</param>
            <param name="method">Request method.</param>
            <param name="jsonRequest">JSON request data.</param>
            <param name="onComplete">Optional completion handler.</param>
            <param name="stateObject">User defined state tracking object.</param>
        </member>
        <member name="M:KS.Reactor.ksWebRequest.#ctor(System.String,System.IO.FileInfo[],KS.Reactor.ksJSON,KS.Reactor.ksWebResponse.Handler)">
            <summary>Sends a request and upload files.</summary>
            <param name="url">URL</param>
            <param name="files">List of files to upload.</param>
            <param name="jsonRequest">JSON request data.</param>
            <param name="onComplete">Optional completion handler.</param>
        </member>
        <member name="M:KS.Reactor.ksWebRequest.CertValidation(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>Validates SSL certificates.</summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns>True the certificate is valid.</returns>
        </member>
        <member name="M:KS.Reactor.ksWebRequest.OnGetFileRequestStream(System.IAsyncResult)">
            <summary>Called when the request stream is available. Sends http request.</summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:KS.Reactor.ksWebRequest.WriteToStream(System.String,System.IO.Stream)">
            <summary>Converts a string to a UTF8 byte array and write it to a stream.</summary>
            <param name="stringData">String to write.</param>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:KS.Reactor.ksWebRequest.OnGetRequestStream(System.IAsyncResult)">
            <summary>Called when the request stream is available. Sends http request.</summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:KS.Reactor.ksWebRequest.OnGetResponse(System.IAsyncResult)">
            <summary>Called when the response is received.</summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:KS.Reactor.ksWebRequest.CleanJson(System.String)">
            <summary>Cleans up json responses. Replaces any back-slash quotes with plain quotes.</summary>
            <param name="json">JSON string.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="T:KS.Reactor.MultiTypeSerializer">
            <summary>A class that serializes/deserializes the multi type.</summary>
        </member>
        <member name="M:KS.Reactor.MultiTypeSerializer.Serialize(KS.Reactor.ksMultiType,KS.Reactor.ksBitOStream)">
            <summary>Serializes a multi type.</summary>
            <param name="multiType">Multi type to serialize.</param>
            <param name="output">Output to write to.</param>
        </member>
        <member name="M:KS.Reactor.MultiTypeSerializer.Deserialize(KS.Reactor.ksMultiType,KS.Reactor.ksBitIStream)">
            <summary>Deserializes a multi type.</summary>
            <param name="multiType">Multi type to deserialize to.</param>
            <param name="input">Input to read from.</param>
        </member>
        <member name="T:KS.Reactor.PreserveAttribute">
            <summary>
            Prevents whatever it tags from being stripped from IL2CPP builds. Unity looks for any attribute named
            PreserveAttribute when deciding what to strip. Preserve an entire assembly using [assembly: Preserve].
            </summary>
        </member>
        <member name="T:KS.Reactor.RingBuffer`1">
            <summary>
            A fixed-size ring buffer. The oldest values will be removed as new ones are added when the buffer is full.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:KS.Reactor.RingBuffer`1.#ctor(System.Int32)">
            <summary>Constructor.</summary>
            <param name="size">Size of the buffer.</param>
        </member>
        <member name="P:KS.Reactor.RingBuffer`1.Count">
            <summary>Number of values in the buffer.</summary>
        </member>
        <member name="P:KS.Reactor.RingBuffer`1.Size">
            <summary>Max capacity of the buffer.</summary>
        </member>
        <member name="P:KS.Reactor.RingBuffer`1.Item(System.Int32)">
            <summary>
            Access the value at an index. Values are indexed from newest to oldest starting at index 0.
            </summary>
        </member>
        <member name="M:KS.Reactor.RingBuffer`1.Add(`0)">
            <summary>Adds a value to the buffer. Removes the oldest value if the buffer is full.</summary>
            <param name="value">Value to add.</param>
            <returns>
            Value removed from the buffer, or default(T) if no value was removed because the buffer was not full.
            </returns>
        </member>
        <member name="M:KS.Reactor.RingBuffer`1.Add(`0,`0)">
            <summary>Adds a value to the buffer. Removes the oldest value if the buffer is full.</summary>
            <param name="value">Value to add.</param>
            <param name="defaultReturn">Value if no value was removed because the buffer was not full.</param>
            <returns>Value removed from the buffer, or defaultReturn if no value was removed.</returns>
        </member>
        <member name="M:KS.Reactor.RingBuffer`1.Clear">
            <summary>Clears the buffer.</summary>
        </member>
        <member name="T:KS.Reactor.UnityProxyAttribute">
            <summary>
            Server scripts tagged with this will not have Unity proxy scripts generated for them and will use
            <see cref="P:KS.Reactor.UnityProxyAttribute.Name"/> as the proxy class. <see cref="P:KS.Reactor.UnityProxyAttribute.Name"/> should refer to an existing class. If
            <see cref="P:KS.Reactor.UnityProxyAttribute.Name"/> is null or empty, a proxy will still be generated and this tag does nothing.
            </summary>
        </member>
        <member name="P:KS.Reactor.UnityProxyAttribute.Name">
            <summary>Name of type to use as the proxy for the tagged class in Unity.</summary>
        </member>
        <member name="P:KS.Reactor.UnityProxyAttribute.CanInherit">
             <summary>
             Should the proxies generated for classes that derive from the class with this tag inherit from
             <see cref="P:KS.Reactor.UnityProxyAttribute.Name"/>?
            </summary>
             <example>
             Class A has the attribute `[UnityProxy("ProxyA", true)]`. Class B derives from A and does not have a
             UnityProxy tag. The proxy generated for B will inherit from ProxyA. If class A were instead tagged with
             `[[UnityProxy("ProxyA", false)]`, then the proxy generated for B would inherit from the proxy for A's base
             class.
             </example>
        </member>
        <member name="M:KS.Reactor.UnityProxyAttribute.#ctor(System.String,System.Boolean)">
            <summary>Constructor</summary>
            <param name="name">Name of the proxy for this class.</param>
            <param name="canInherit"></param>
        </member>
        <member name="T:KS.Reactor.Client.CubicInterpolator`1">
            Generic cubic interpolation that smoothly moves from zero with an initial velocity to a stop at a target value.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.CubicInterpolator`1.#ctor(KS.Reactor.Client.IMath{`0})" -->
        <member name="M:KS.Reactor.Client.CubicInterpolator`1.Init(`0,System.Single)">
            Initializes a cubic curve with initial velocity being the velocity at the time Interpolate was last called.
            You must call this before calling Interpolate.
            
            @param   T target to end interpolation at.
            @param   float duration in seconds to get to the target.
        </member>
        <member name="M:KS.Reactor.Client.CubicInterpolator`1.Interpolate(System.Single)">
            Gets the value at a given time. You must call Init before calling this.
            
            @param   float t - time.
            @return  T interpolated value.
        </member>
        <member name="M:KS.Reactor.Client.CubicInterpolator`1.Finish">
            Finishes interpolation so the next curve will use zero for initial velocity. After this is called,
            you cannot call Interpolate again until Init is called.
        </member>
        <member name="T:KS.Reactor.Client.IMath`1">
            Templated interface for basic math operations.
        </member>
        <member name="P:KS.Reactor.Client.IMath`1.Zero">
            Zero
        </member>
        <member name="M:KS.Reactor.Client.IMath`1.Add(`0,`0)">
            Addition
            
            @param   T lhs
            @param   T rhs
            @return  T lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.IMath`1.Subtract(`0,`0)">
            Subtraction
            
            @param   T lhs
            @param   T rhs
            @return  T lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.IMath`1.Multiply(`0,System.Single)">
            Scalar multiplication
            
            @param   T value
            @param   T scalar
            @return  T value * scalar
        </member>
        <member name="T:KS.Reactor.Client.FloatMath">
            float math operations
        </member>
        <member name="P:KS.Reactor.Client.FloatMath.Zero">
            Zero
        </member>
        <member name="M:KS.Reactor.Client.FloatMath.Add(System.Single,System.Single)">
            float addition
            
            @param   float lhs
            @param   float rhs
            @return  float lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.FloatMath.Subtract(System.Single,System.Single)">
            float subtraction
            
            @param   float lhs
            @param   float rhs
            @return  float lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.FloatMath.Multiply(System.Single,System.Single)">
            float multiplication
            
            @param   float value
            @param   float scalar
            @return  float value * scalar
        </member>
        <member name="T:KS.Reactor.Client.Vector2Math">
            ksVector2 math operations
        </member>
        <member name="P:KS.Reactor.Client.Vector2Math.Zero">
            Zero
        </member>
        <member name="M:KS.Reactor.Client.Vector2Math.Add(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            ksVector2 addition
            
            @param   ksVector2 lhs
            @param   ksVector2 rhs
            @return  ksVector2 lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.Vector2Math.Subtract(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            ksVector2 subtraction
            
            @param   ksVector2 lhs
            @param   ksVector2 rhs
            @return  ksVector2 lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.Vector2Math.Multiply(KS.Reactor.ksVector2,System.Single)">
            ksVector2 scalar multiplication
            
            @param   ksVector2 value
            @param   float scalar
            @return  ksVector2 value * scalar
        </member>
        <member name="T:KS.Reactor.Client.Vector3Math">
            ksVector3 math operations
        </member>
        <member name="P:KS.Reactor.Client.Vector3Math.Zero">
            Zero
        </member>
        <member name="M:KS.Reactor.Client.Vector3Math.Add(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            ksVector3 addition
            
            @param   ksVector3 lhs
            @param   ksVector3 rhs
            @return  ksVector3 lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.Vector3Math.Subtract(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            ksVector3 subtraction
            
            @param   ksVector3 lhs
            @param   ksVector3 rhs
            @return  ksVector3 lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.Vector3Math.Multiply(KS.Reactor.ksVector3,System.Single)">
            ksVector3 scalar multiplication
            
            @param   ksVector3 value
            @param   float scalar
            @return  ksVector3 value * scalar
        </member>
        <member name="T:KS.Reactor.Client.IRoom`2">
            Room interface. The interface allows mock implementations for testing. It is incomplete and only contains
            functions that were needed for testing.
        </member>
        <member name="P:KS.Reactor.Client.IRoom`2.IsConnected">
            Are we connected to the server?
        </member>
        <member name="P:KS.Reactor.Client.IRoom`2.LocalPlayerId">
            Id of the local player.
        </member>
        <member name="P:KS.Reactor.Client.IRoom`2.LocalPlayer">
            The local player.
        </member>
        <member name="P:KS.Reactor.Client.IRoom`2.Players">
            List of players connected to the room.
        </member>
        <member name="P:KS.Reactor.Client.IRoom`2.Time">
            Time data
        </member>
        <member name="P:KS.Reactor.Client.IRoom`2.OnRPC">
            RPC event handler registration.
        </member>
        <member name="E:KS.Reactor.Client.IRoom`2.OnPlayerJoin">
            Invoked when a player connects to the room.
        </member>
        <member name="E:KS.Reactor.Client.IRoom`2.OnPlayerLeave">
            Invoked when a player disconnects from the room.
        </member>
        <member name="M:KS.Reactor.Client.IRoom`2.CallRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Calls an RPC on the server.
        </member>
        <member name="T:KS.Reactor.Client.ISpace`2">
            Templated interface for defining a mathematical space with the following operations:
            
             Vector + Delta = Vector
             Vector - Vector = Delta
             Delta * float = Delta
             Delta + Delta = Delta (may not be commutative)
             Magnitude(Delta - Delta) = float
        </member>
        <member name="P:KS.Reactor.Client.ISpace`2.Zero">
            Zero vector
        </member>
        <member name="M:KS.Reactor.Client.ISpace`2.Add(`0,`1)">
            Addition
            
            @param   Vector lhs
            @param   Delta rhs
            @return  Vector lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.ISpace`2.Subtract(`0,`0)">
            Subtraction
            
            @param   Vector lhs
            @param   Vector rhs
            @return  Delta lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.ISpace`2.Multiply(`1,System.Single)">
            Scalar multiplication
            
            @param   Delta lhs
            @param   float rhs
            @return  Delta lhs * rhs
        </member>
        <member name="M:KS.Reactor.Client.ISpace`2.AddDeltas(`1,`1)">
            Delta addition. May not be commutative.
            
            @param   Delta lhs
            @param   Delta rhs
            @return  Delta lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.ISpace`2.CompareDeltas(`1,`1)">
            Gets the magnitude of the difference between two deltas.
            
            @param   Delta lhs
            @param   Delta rhs
            @return  float magnitude(lhs - rhs)
        </member>
        <member name="M:KS.Reactor.Client.ISpace`2.Interpolate(`0,`0,System.Single)">
            Interpolates between two vectors.
            
            @param   Vector from - vector to interpolate from.
            @param   Vector to - vector to interpolate to.
            @param   float t - amount to interpolate between 0 and 1.
            @return  Vector
        </member>
        <member name="M:KS.Reactor.Client.ISpace`2.MoveTowards(`0,`0,System.Single)">
            Moves a Vector towards another.
            
            @param    Vector start point.
            @param    Vector target to move towards.
            @param    float distance to move. It will not overshoot the target. 
                         Negative values will move away from the target.
            @return   Vector
        </member>
        <member name="M:KS.Reactor.Client.ISpace`2.AreEqual(`0,`0)">
            Check if two Vectors are equal.
            
            @param   Vector a
            @param   Vector b
            @return  bool
        </member>
        <member name="T:KS.Reactor.Client.OneSpace">
            1D float math.
        </member>
        <member name="P:KS.Reactor.Client.OneSpace.Zero">
            Zero
        </member>
        <member name="M:KS.Reactor.Client.OneSpace.Add(System.Single,System.Single)">
            Addition
            
            @param   float lhs
            @param   float rhs
            @return  float lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.OneSpace.Subtract(System.Single,System.Single)">
            Subtraction
            
            @param   float lhs
            @param   float rhs
            @return  float lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.OneSpace.Multiply(System.Single,System.Single)">
            Multiplication
            
            @param   float lhs
            @param   float rhs
            @return  float lhs * rhs
        </member>
        <member name="M:KS.Reactor.Client.OneSpace.AddDeltas(System.Single,System.Single)">
            Delta addition.
            
            @param   float lhs
            @param   float rhs
            @return  float lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.OneSpace.CompareDeltas(System.Single,System.Single)">
            Gets the magnitude of the difference between two deltas.
            
            @param   float lhs
            @param   float rhs
            @return  float magnitude(lhs - rhs)
        </member>
        <member name="M:KS.Reactor.Client.OneSpace.Interpolate(System.Single,System.Single,System.Single)">
            Linearly interpolates between two floats.
            
            @param   float from - value to interpolate from.
            @param   float to - value to interpolate to.
            @param   float t - amount to interpolate between 0 and 1.
            @return  float
        </member>
        <member name="M:KS.Reactor.Client.OneSpace.MoveTowards(System.Single,System.Single,System.Single)">
            Moves a float towards another.
            
            @param    float start value.
            @param    float target to move towards.
            @param    float distance to move. It will not overshoot the target. 
                         Negative values will move away from the target.
            @return   float
        </member>
        <member name="M:KS.Reactor.Client.OneSpace.AreEqual(System.Single,System.Single)">
            Check if two floats are equal.
            
            @param   float a
            @param   float b
            @return  bool
        </member>
        <member name="T:KS.Reactor.Client.TwoSpace">
            2D space
        </member>
        <member name="P:KS.Reactor.Client.TwoSpace.Zero">
            Zero vector
        </member>
        <member name="M:KS.Reactor.Client.TwoSpace.Add(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Addition
            
            @param   ksVector2 lhs
            @param   ksVector2 rhs
            @return  ksVector2 lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.TwoSpace.Subtract(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Subtraction
            
            @param   ksVector2 lhs
            @param   ksVector2 rhs
            @return  ksVector2 lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.TwoSpace.Multiply(KS.Reactor.ksVector2,System.Single)">
            Scalar multiplication
            
            @param   ksVector2 lhs
            @param   float rhs
        </member>
        <member name="M:KS.Reactor.Client.TwoSpace.AddDeltas(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Delta addition.
            
            @param   ksVector2 lhs
            @param   ksVector2 rhs
            @return  ksVector2 lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.TwoSpace.CompareDeltas(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Gets the magnitude of the difference between two deltas.
            
            @param   ksVector2 lhs
            @param   ksVector2 rhs
            @return  float magnitude(lhs - rhs)
        </member>
        <member name="M:KS.Reactor.Client.TwoSpace.Interpolate(KS.Reactor.ksVector2,KS.Reactor.ksVector2,System.Single)">
            Linearly interpolates between two vectors.
            
            @param   ksVector2 from - vector to interpolate from.
            @param   ksVector2 to - vector to interpolate to.
            @param   float t - amount to interpolate between 0 and 1.
            @return  ksVector2
        </member>
        <member name="M:KS.Reactor.Client.TwoSpace.MoveTowards(KS.Reactor.ksVector2,KS.Reactor.ksVector2,System.Single)">
            Moves a ksVector2 towards another.
            
            @param    ksVector2 start point.
            @param    ksVector2 target to move towards.
            @param    float distance to move. It will not overshoot the target. 
                         Negative values will move away from the target.
            @return   ksVector2
        </member>
        <member name="M:KS.Reactor.Client.TwoSpace.AreEqual(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Check if two ksVector2s are equal.
            
            @param   ksVector2 a
            @param   ksVector2 b
            @return  bool
        </member>
        <member name="T:KS.Reactor.Client.ThreeSpace">
            3D space
        </member>
        <member name="P:KS.Reactor.Client.ThreeSpace.Zero">
            Zero vector
        </member>
        <member name="M:KS.Reactor.Client.ThreeSpace.Add(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            Addition
            
            @param   ksVector3 lhs
            @param   ksVector3 rhs
            @return  ksVector3 lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.ThreeSpace.Subtract(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            Subtraction
            
            @param   ksVector3 lhs
            @param   ksVector3 rhs
            @return  ksVector3 lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.ThreeSpace.Multiply(KS.Reactor.ksVector3,System.Single)">
            Scalar multiplication
            
            @param   ksVector3 lhs
            @param   float rhs
            @return  ksVector3 lhs * rhs
        </member>
        <member name="M:KS.Reactor.Client.ThreeSpace.AddDeltas(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            Delta addition.
            
            @param   ksVector3 lhs
            @param   ksVector3 rhs
            @return  ksVector3 lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.ThreeSpace.CompareDeltas(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            Gets the magnitude of the difference between two deltas.
            
            @param   ksVector3 lhs
            @param   ksVector3 rhs
            @return  float magnitude(lhs - rhs)
        </member>
        <member name="M:KS.Reactor.Client.ThreeSpace.Interpolate(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            Linearly interpolates between two vectors.
            
            @param   ksVector3 from - vector to interpolate from.
            @param   ksVector3 to - vector to interpolate to.
            @param   float t - amount to interpolate between 0 and 1.
            @return  ksVector3
        </member>
        <member name="M:KS.Reactor.Client.ThreeSpace.MoveTowards(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            Moves a ksVector3 towards another.
            
            @param    ksVector3 start point.
            @param    ksVector3 target to move towards.
            @param    float distance to move. It will not overshoot the target. 
                         Negative values will move away from the target.
            @return   ksVector3
        </member>
        <member name="M:KS.Reactor.Client.ThreeSpace.AreEqual(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            Check if two ksVector3s are equal.
            
            @param   ksVector3 a
            @param   ksVector3 b
            @return  bool
        </member>
        <member name="T:KS.Reactor.Client.ColorSpace">
            Color space
        </member>
        <member name="P:KS.Reactor.Client.ColorSpace.Zero">
            Zero color
        </member>
        <member name="M:KS.Reactor.Client.ColorSpace.Add(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            Addition
            
            @param   ksColor lhs
            @param   ksColor rhs
            @return  ksColor lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.ColorSpace.Subtract(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            Subtraction
            
            @param   ksColor lhs
            @param   ksColor rhs
            @return  ksColor lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.ColorSpace.Multiply(KS.Reactor.ksColor,System.Single)">
            Scalar multiplication
            
            @param   ksColor lhs
            @param   float rhs
            @return  ksColor lhs * rhs
        </member>
        <member name="M:KS.Reactor.Client.ColorSpace.AddDeltas(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            Delta addition.
            
            @param   ksColor lhs
            @param   ksColor rhs
            @return  ksColor lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.ColorSpace.CompareDeltas(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            Gets the magnitude of the difference between two deltas.
            
            @param   ksColor lhs
            @param   ksColor rhs
            @return  float magnitude(lhs - rhs)
        </member>
        <member name="M:KS.Reactor.Client.ColorSpace.Interpolate(KS.Reactor.ksColor,KS.Reactor.ksColor,System.Single)">
            Linearly interpolates between two colors.
            
            @param   ksColor from - ksColor to interpolate from.
            @param   ksColor to - ksColor to interpolate to.
            @param   float t - amount to interpolate between 0 and 1.
            @return  ksColor
        </member>
        <member name="M:KS.Reactor.Client.ColorSpace.MoveTowards(KS.Reactor.ksColor,KS.Reactor.ksColor,System.Single)">
            Moves a ksColor towards another.
            
            @param    ksColor start color.
            @param    ksColor target to move towards.
            @param    float distance to move. It will not overshoot the target. 
                         Negative values will move away from the target.
            @return   ksColor
        </member>
        <member name="M:KS.Reactor.Client.ColorSpace.AreEqual(KS.Reactor.ksColor,KS.Reactor.ksColor)">
            Check if two ksColors are equal.
            
            @param   ksColor a
            @param   ksColor b
            @return  bool
        </member>
        <member name="T:KS.Reactor.Client.RangeSpace">
            Finite 1D space that wraps around.
        </member>
        <member name="P:KS.Reactor.Client.RangeSpace.Zero">
            Zero
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.#ctor">
            Constructor
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.#ctor(System.Single,System.Single)">
            Constructor
            
            @param   float min value in the range (inclusive).
            @param   float max value in the range (exclusive).
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.Add(System.Single,System.Single)">
            Addition
            
            @param   float lhs
            @param   float rhs
            @return  float lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.Subtract(System.Single,System.Single)">
            Subtraction
            
            @param   float lhs
            @param   float rhs
            @return  float lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.Multiply(System.Single,System.Single)">
            Multiplication
            
            @param   float lhs
            @param   float rhs
            @return  float lhs * rhs
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.AddDeltas(System.Single,System.Single)">
            Delta addition.
            
            @param   float lhs
            @param   float rhs
            @return  float lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.CompareDeltas(System.Single,System.Single)">
            Gets the magnitude of the difference between two deltas.
            
            @param   float lhs
            @param   float rhs
            @return  float magnitude(lhs - rhs)
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.Interpolate(System.Single,System.Single,System.Single)">
            Spherically interpolates between two floats.
            
            @param   float from - value to interpolate from.
            @param   float to - value to interpolate to.
            @param   float t - amount to interpolate between 0 and 1.
            @return  float
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.MoveTowards(System.Single,System.Single,System.Single)">
            Moves a float towards another.
            
            @param    float start value.
            @param    float target to move towards.
            @param    float distance to move. It will not overshoot the target. 
                         Negative values will move away from the target.
            @return   float
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.SetRange(System.Single,System.Single)">
            Change the min and max range
            
            @param   float min
            @param   float max
        </member>
        <member name="M:KS.Reactor.Client.RangeSpace.AreEqual(System.Single,System.Single)">
            Check if two wrapped floats are equal.
            
            @param   ksColor a
            @param   ksColor b
            @return  bool
        </member>
        <member name="T:KS.Reactor.Client.CircleSpace">
            2D space with spherical interpolation.
        </member>
        <member name="P:KS.Reactor.Client.CircleSpace.Zero">
            Zero vector
        </member>
        <member name="M:KS.Reactor.Client.CircleSpace.Add(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Addition
            
            @param   ksVector2 direction
            @param   ksVector2 delta (x = delta radians, y = delta magnitude)
            @return  direction + delta
        </member>
        <member name="M:KS.Reactor.Client.CircleSpace.Subtract(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Subtraction
            
            @param   ksVector2 lhs
            @param   ksVector2 rhs
            @return  ksVector2 delta (x = delta radians, y = delta magnitude)
        </member>
        <member name="M:KS.Reactor.Client.CircleSpace.Multiply(KS.Reactor.ksVector2,System.Single)">
            Scalar multiplication
            
            @param   ksVector2 lhs
            @param   float rhs
            @return  ksVector2 lhs * rhs
        </member>
        <member name="M:KS.Reactor.Client.CircleSpace.AddDeltas(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Delta addition.
            
            @param   ksVector2 lhs
            @param   ksVector2 rhs
            @return  ksVector2 lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.CircleSpace.CompareDeltas(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Gets the magnitude of the difference between two deltas.
            
            @param   ksVector2 lhs
            @param   ksVector2 rhs
            @return  float magnitude(lhs - rhs)
        </member>
        <member name="M:KS.Reactor.Client.CircleSpace.Interpolate(KS.Reactor.ksVector2,KS.Reactor.ksVector2,System.Single)">
            Spherically interpolates between two vectors.
            
            @param   ksVector2 from - vector to interpolate from.
            @param   ksVector2 to - vector to interpolate to.
            @param   float t - amount to interpolate between 0 and 1.
            @return  ksVector2
        </member>
        <member name="M:KS.Reactor.Client.CircleSpace.MoveTowards(KS.Reactor.ksVector2,KS.Reactor.ksVector2,System.Single)">
            Rotates a ksVector2 towards another.
            
            @param    ksVector2 start point.
            @param    ksVector2 target to move towards.
            @param    float amount to move. It will not overshoot the target. 
                         Negative values will move away from the target.
            @return   ksVector2
        </member>
        <member name="M:KS.Reactor.Client.CircleSpace.AreEqual(KS.Reactor.ksVector2,KS.Reactor.ksVector2)">
            Check if two ksVector2s are equal.
            
            @param   ksVector2 a
            @param   ksVector2 b
            @return  bool
        </member>
        <member name="T:KS.Reactor.Client.SphereSpace">
            3D space with spherical interpolation.
        </member>
        <member name="T:KS.Reactor.Client.SphereSpace.Delta">
            Spherical delta
        </member>
        <member name="F:KS.Reactor.Client.SphereSpace.Delta.Angular">
            Delta angular in radians.
        </member>
        <member name="F:KS.Reactor.Client.SphereSpace.Delta.Magnitude">
            Delta magnitude
        </member>
        <member name="M:KS.Reactor.Client.SphereSpace.Delta.#cctor">
            Static initialization. Registers delegates for converting to and from ksMultiType.
        </member>
        <member name="P:KS.Reactor.Client.SphereSpace.Zero">
            Zero delta
        </member>
        <member name="M:KS.Reactor.Client.SphereSpace.Add(KS.Reactor.ksVector3,KS.Reactor.Client.SphereSpace.Delta)">
            Addition
            
            @param   ksVector3 direction
            @param   Delta delta
            @return  direction + delta
        </member>
        <member name="M:KS.Reactor.Client.SphereSpace.Subtract(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            Subtraction
            
            @param   ksVector3 lhs
            @param   ksVector3 rhs
            @return  Delta lhs - rhs
        </member>
        <member name="M:KS.Reactor.Client.SphereSpace.Multiply(KS.Reactor.Client.SphereSpace.Delta,System.Single)">
            Scalar multiplication
            
            @param   Delta delta
            @param   float scalar
            @return  delta * scalar
        </member>
        <member name="M:KS.Reactor.Client.SphereSpace.AddDeltas(KS.Reactor.Client.SphereSpace.Delta,KS.Reactor.Client.SphereSpace.Delta)">
            Delta addition. Non-commutative.
            
            @param   Delta lhs
            @param   Delta rhs
            @return  Delta lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.SphereSpace.CompareDeltas(KS.Reactor.Client.SphereSpace.Delta,KS.Reactor.Client.SphereSpace.Delta)">
            Gets the magnitude of the difference between two deltas.
            
            @param   Delta lhs
            @param   Delta rhs
            @return  float magnitude(lhs - rhs)
        </member>
        <member name="M:KS.Reactor.Client.SphereSpace.Interpolate(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            Spherically interpolates between two vectors.
            
            @param   ksVector3 from - vector to interpolate from.
            @param   ksVector3 to - vector to interpolate to.
            @param   float t - amount to interpolate between 0 and 1.
            @return  ksVector3
        </member>
        <member name="M:KS.Reactor.Client.SphereSpace.MoveTowards(KS.Reactor.ksVector3,KS.Reactor.ksVector3,System.Single)">
            Rotates a ksVector3 towards another.
            
            @param    ksVector3 start point.
            @param    ksVector3 target to move towards.
            @param    float amount to move. It will not overshoot the target. 
                         Negative values will move away from the target.
            @return   ksVector3
        </member>
        <member name="M:KS.Reactor.Client.SphereSpace.AreEqual(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            Check if two ksVector3s are equal.
            
            @param   ksVector3 a
            @param   ksVector3 b
            @return  bool
        </member>
        <member name="T:KS.Reactor.Client.RotationSpace">
            Rotation space
        </member>
        <member name="P:KS.Reactor.Client.RotationSpace.Zero">
            Zero angular displacement
        </member>
        <member name="M:KS.Reactor.Client.RotationSpace.Add(KS.Reactor.ksQuaternion,KS.Reactor.ksVector3)">
            Addition
            
            @param   ksQuaternion rotation
            @param   ksVector3 angularDisplacement
            @return  ksQuaternion rotation + angularDisplacement
        </member>
        <member name="M:KS.Reactor.Client.RotationSpace.Subtract(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            Subtraction
            
            @param   ksQuaternion lhs
            @param   ksQuaternion rhs
            @return  ksVector3 angular displacement from rhs to lhs.
        </member>
        <member name="M:KS.Reactor.Client.RotationSpace.Multiply(KS.Reactor.ksVector3,System.Single)">
            Scalar multiplication
            
            @param   ksVector3 lhs
            @param   float rhs
            @return  ksVector3 lhs * rhs
        </member>
        <member name="M:KS.Reactor.Client.RotationSpace.AddDeltas(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            Delta addition. Non-commutative.
            
            @param   ksVector3 lhs
            @param   ksVector3 rhs
            @return  ksVector3 lhs + rhs
        </member>
        <member name="M:KS.Reactor.Client.RotationSpace.CompareDeltas(KS.Reactor.ksVector3,KS.Reactor.ksVector3)">
            Gets the magnitude of the difference between two deltas.
            
            @param   ksVector3 lhs
            @param   ksVector3 rhs
            @return  float magnitude(lhs - rhs)
        </member>
        <member name="M:KS.Reactor.Client.RotationSpace.Interpolate(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion,System.Single)">
            Spherically interpolates between two quaternions.
            
            @param   ksQuaternion from - quaternion to interpolate from.
            @param   ksQuaternion to - quaternion to interpolate to.
            @param   float t - amount to interpolate between 0 and 1.
            @return  ksQuaternion
        </member>
        <member name="M:KS.Reactor.Client.RotationSpace.MoveTowards(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion,System.Single)">
            Rotates a quaternion towards another.
            
            @param    ksQuaternion start quaternion.
            @param    ksQuaternion target to move towards.
            @param    float degrees to move. It will not overshoot the target. 
                         Negative values will move away from the target.
            @return   ksQuaternion
        </member>
        <member name="M:KS.Reactor.Client.RotationSpace.AreEqual(KS.Reactor.ksQuaternion,KS.Reactor.ksQuaternion)">
            Check if two ksQuaternions are equal.
            
            @param   ksQuaternion a
            @param   ksQuaternion b
            @return  bool
        </member>
        <member name="T:KS.Reactor.Client.ksBaseEntity">
            Base class for entities. Entities are objects controlled by the server and replicated to clients.
        </member>
        <member name="T:KS.Reactor.Client.ksBaseEntity.RPCHandler">
            RPC event handler.
            
            @param   ksMultiType[] arguments from the server.
        </member>
        <member name="T:KS.Reactor.Client.ksBaseEntity.ControllerChangeHandler">
            Controller change handler.
            
            @param   ksPlayerController oldController
            @param   ksPlayerController newController
        </member>
        <member name="T:KS.Reactor.Client.ksBaseEntity.DestroyHandler">
            Destroy event handler.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.OnPropertyChange">
            Invoked when an entity property changes. Indexed by property id.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.OnRPC">
            Invoked when the server calls an RPC on the room. Indexed by RPC id.
        </member>
        <member name="E:KS.Reactor.Client.ksBaseEntity.OnControllerChange">
            Invoked when the player controller changes.
        </member>
        <member name="E:KS.Reactor.Client.ksBaseEntity.OnDestroy">
            Invoked when the entity is destroyed.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Id">
            Entity id
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Type">
            Entity type
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Position">
            Position
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Rotation">
            Rotation
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Scale">
            Scale
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.ServerPosition">
            Server position
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.ServerRotation">
            Server rotation
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.ServerScale">
            Server scale
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Velocity">
            Velocity calculated as the displacement of the entity from the last frame to the current frame divided by the frame time.
            This is different than the instaneous velocity of the entity which is tracked in RigidBody.Velocity.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.AngularVelocity">
            Angular velocity. Component values are in degrees per second.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Position2D">
            2D position
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Rotation2D">
            2D rotation in degrees
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.RotationRadians2D">
            2D rotation in radians
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Scale2D">
            2D scale
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Velocity2D">
            2D velocity
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.AngularVelocity2D">
            2D angular velocity in degrees per second.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.ServerPosition2D">
            Server 2D position
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.ServerRotation2D">
            Server 2D rotation in degrees
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.ServerRotationRadians2D">
            Server 2D rotation in radians
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.ServerScale2D">
            Server 2D scale
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.CenterOfMass">
            Center of mass in local coordinates. For entities without rigid bodies, this is 0, 0, 0.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Properties">
            Entity properties
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.Predictor">
            Predictor for the entity.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.RigidBody">
            The entity's rigid body. Null if the entity does not have a rigid body.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.RigidBody2D">
            The entity's 2D rigid body. Null if the entity does not have a 2D rigid body.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.CharacterController">
            Character controller.
        </member>
        <member name="F:KS.Reactor.Client.ksBaseEntity.m_playerController">
            Player controller controlling this entity.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.IsPermanent">
            Is this a permanent entity? Permanent entities never move and cannot be destroyed. They are not synced to
            clients since the clients should already know where they are.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.CollisionFilter">
            Determines which entities to collide with and notify of collision/overlap events.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.PropertySync">
            PropertySync
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.IsDestroyed">
            Is the entity destroyed?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.IsServerGhost">
            Is this a server ghost entity? Server ghosts are duplicate entities with smoothing turned off, so they show
            the last known server location.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.HasServerGhost">
            Does this entity have a server ghost? Server ghosts are duplicate entities with smoothing turned off, so they show
            the last known server location.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.IgnoreGravity">
            Is the entity uneffected by gravity?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.IsKinematic">
            Is the entity kinematic? Kinematic objects are not effected by physics, but still collide with and effect
            other physics objects.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.PhysicsEnabled">
            Is physics enabled on this object? False if the object has no collider or is static.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseEntity.BaseRoom">
            Room the entity is in.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.CleanUp">
            Cleanup the object for reuse.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.CallRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Calls an RPC on this entity on the server.
            
            @param   uint rpcId of rpc to call.
            @param   ksMultiType[] arguments to send to server.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.InitializeScripts">
            Initializes entity scripts.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.Destroy">
            Destroys the entity.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.ResolvePenetration(KS.Reactor.ksVector3,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion)">
            Resolves penetrations resulting from moving between two points.
            
            @param   ksVector3 from - start position.
            @param   ksVector3 to - end position.
            @param   ksQuaternion rotation.
            @return  ksVector3 position between start and end points before penetration occurred, 
                     or end position if no penetration occurred.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.Sweep(KS.Reactor.ksVector3,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksVector3@,KS.Reactor.ksVector3@)">
            Checks if the entity will collide with anything when moving between two points.
            
            @param   ksVector3 from - position to sweep from.
            @oaram   KSVector to - position to sweep to.
            @param   ksQuaternion rotation
            @param   out ksVector3 position of the entity at the end of the sweep. If a collision occurred, this is
                     the entity's position when it happened.
            @param   out ksVector3 normal of collision surface.
            @return  bool true if a collision occured.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.BecomeServerGhost">
            Indicate this is a server ghost. Server ghosts are duplicate entities used for debugging
            with no movement smoothing so they are always rendered at the last server position. 
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.SetVisible(System.Boolean)">
            Hides or shows the entity. This is used to hide server ghosts when the entity is idle.
            
            @param   bool visible - true if the entity should be visible.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.InvokeRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Invoke managed RPCs on all entity scripts.
            
            @param   uint - RPC ID
            @param   ksMultiType[] - RPC arguments
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.SetPropertySync(KS.Reactor.Client.PropertySync,System.Boolean)">
            Sets the property sync.
            
            @param   PropertySync sync to set.
            @param   bool mergeWithExisting - if true, will copy the property change handlers and prediction behaviours
                     from the old property sync into the new one.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.InvokeDestroy">
            Invokes the on destroy event.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.ExecuteRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Invokes an OnRPC event.
            
            @param   uint rpcID of rpc to invoke.
            @param   ksMultiType[] arguments from the server.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.RegisterRPC(System.UInt32,KS.Reactor.Client.ksBaseEntity.RPCHandler)">
            Register an RPC
            
            @param   uint RPC Id
            @param   ksServerEvents.RPCHandler RPC handler
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.UnregisterRPC(System.UInt32,KS.Reactor.Client.ksBaseEntity.RPCHandler)">
            Unregister an RPC
            
            @param   uint RPC Id
            @param   ksServerEvents.RPCHandler RPC handler
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.SetPredictionBehaviour(System.UInt32,KS.Reactor.Client.ksPredictionBehaviour)">
            Set the prediction behaviour of a property.
            
            @param   uint property Id
            @param   ksPredictionBehaviour - Behaviour of the property when predicting and smoothing values.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.GetPredictionBehaviour(System.UInt32)">
            Gets prediction behaviour of a property.
            
            @param   uint property Id
            @return  ksPredictionBehaviour - Behaviour of the property when predicting and smoothing values.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.GetPropertyServerValue(System.UInt32)">
            Gets property server value. If a property id is not in the map, 
            a ksMultiType of type ksMultiType.Types.UNDEFINED is returned.
            
            @param   uint propertyId
            @return  ksMultiType
        </member>
        <member name="M:KS.Reactor.Client.ksBaseEntity.ShowServerGhost(System.Boolean)">
            Shows or hides a server ghost for this entity. The server ghost is a duplicate entity with smoothing
            disabled, so it renders as the last know server location. Server ghosts are tinted green. Note that server
            ghosts will have all the same scripts as the real object, but no colliders. Your scripts can check if they
            are attached to a ghost using Entity.IsServerGhost. Calling this function or RPCs on ghost entities has no
            effect.
            
            @param   bool show - true to create a server ghost. false to destroy it.
        </member>
        <member name="T:KS.Reactor.Client.ksBasePlayer">
            Base class for players. A player represents a client.
        </member>
        <member name="T:KS.Reactor.Client.ksBasePlayer.LeaveHandler">
            Leave event handler.
        </member>
        <member name="E:KS.Reactor.Client.ksBasePlayer.OnLeave">
            Invoked when the (non-local) player leaves the room.
        </member>
        <member name="P:KS.Reactor.Client.ksBasePlayer.OnPropertyChange">
            Invoked when a player property changes. Indexed by property id.
        </member>
        <member name="F:KS.Reactor.Client.ksBasePlayer.m_propertySync">
            Property sync
        </member>
        <member name="P:KS.Reactor.Client.ksBasePlayer.Properties">
            Properties
        </member>
        <member name="F:KS.Reactor.Client.ksBasePlayer.m_isLocal">
            Is this the local player?
        </member>
        <member name="P:KS.Reactor.Client.ksBasePlayer.Id">
            Id of the player.
        </member>
        <member name="M:KS.Reactor.Client.ksBasePlayer.#ctor(System.UInt32)">
            Constructor
            
            @param   uint id of the player.
        </member>
        <member name="P:KS.Reactor.Client.ksBasePlayer.BaseRoom">
            Room the player is in.
        </member>
        <member name="M:KS.Reactor.Client.ksBasePlayer.InitializeScripts">
            Initializes player scripts.
        </member>
        <member name="M:KS.Reactor.Client.ksBasePlayer.Destroy">
            Destroys the player.
        </member>
        <member name="M:KS.Reactor.Client.ksBasePlayer.InvokeOnLeave">
            Invokes the OnLeave event.
        </member>
        <member name="M:KS.Reactor.Client.ksBasePlayer.SyncProperties">
            Syncs player properties with the server.
        </member>
        <member name="M:KS.Reactor.Client.ksBasePlayer.SetPredictionBehaviour(System.UInt32,KS.Reactor.Client.ksPredictionBehaviour)">
            Set the prediction behaviour of a property.
            
            @param   uint property Id
            @param   ksPredictionBehaviour - Behaviour of the property when predicting and smoothing values.
        </member>
        <member name="M:KS.Reactor.Client.ksBasePlayer.GetPredictionBehaviour(System.UInt32)">
            Gets prediction behaviour of a property.
            
            @param   uint property Id
            @return  ksPredictionBehaviour - Behaviour of the property when predicting and smoothing values.
        </member>
        <member name="M:KS.Reactor.Client.ksBasePlayer.GetPropertyServerValue(System.UInt32)">
            Gets property server value. If a property id is not in the map, 
            a ksMultiType of type ksMultiType.Types.UNDEFINED is returned.
            
            @param   uint propertyId
            @return  ksMultiType
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom">
            Base class for rooms. Rooms are used to connect to server rooms.
            The room maintains simulation state that is regularly synced with the server.
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom.ConnectionStates">
            Connection states
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom.ConnectError">
            Connection success/failure reasons
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom.DisconnectError">
            Diconnection reasons
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom.ConnectEvent">
            Information about a connection event
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom.DisconnectEvent">
            Information about a disconnection event
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom.StateChangeHandler">
            Handler called when the room connection state changes.
            
            @param   ksBaseRoom - Room whose state changed
            @param   ConnectionStates - New room status
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom.ConnectHandler">
            Connect status event handler. 
            
            @param   ConnectStatus status of the connection.
            @param   uint custom status id (0 = no error, UInt32.MaxValue = Unknown Authentication Error)
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom.DisconnectHandler">
            Disconnect status event handler. 
            
            @param   ConnectStatus status of the connection.
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom.RPCHandler">
            RPC event handler.
            
            @param   ksMultiType[] arguments from the server.
        </member>
        <member name="E:KS.Reactor.Client.ksBaseRoom.OnStateChange">
            Events called when the connection state changes.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.ConnectionState">
            Get the connection state of the room. 
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.Id">
            Room id
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.Info">
            Room info
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.Time">
            Server time and local frame delta.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.Physics">
            Physics interface
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.IsConnecting">
            Are we in the process of establishing a connection with the server?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.IsConnected">
            Are we connected to the server?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.IsDisconnecting">
            Are we disconnecting from the server?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.SuppressCannotCallRPCWarning">
            Should we suppress "Cannot call RPC" warnings when disconnected or disconnecting?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.LocalPlayerId">
            The local player id.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.PredictorFactory">
            ksIPredictor factory
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.InputAcknowledged">
            Has the server acknowledged receiving our first input?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.UpdateObjectsEveryServerFrame">
            Do we need to call SyncObject.UpdateServerState after every server frame? Set this to true if you aren't
            using a predictor factory and your compressor utility needs to process all server frames.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.InputRegistrar">
            Input registrar
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.Input">
            Input
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.PlayerControllerFactory">
            Player controller factory
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.PropertySync">
            Property sync
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.Gravity">
            Gravity
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.ApplyServerTimeScale(System.Single)">
            Apply server time scale to the client.
            
            @param   float timeScale
            @return  bool - true if time scaling was applied to the system that generates delta times used during updates.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.RPCLatency">
            RPC Latency in milliseconds
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.Latency">
            Latency in milliseconds
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.ServerEvents">
            Server Event list
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.RoomUpdates">
            Server frames
        </member>
        <member name="F:KS.Reactor.Client.ksBaseRoom.m_connectionFactories">
            Connection factories
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.GetTimeAdjuster``1">
            Gets the first ksITimeAdjuster of the type T, or null if none is found.
            
            @return  T time adjuster.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.Connect(KS.Reactor.Client.ksPlayerControllerFactory,KS.Reactor.ksPlayerAPI.Session,KS.Reactor.ksMultiType[])">
            Connects to the server.
            
            @param   ksPlayerControllerFactory - factory for creating player controllers.
            @param   ksPlayerAPI.Session - player session
            @param   ksMultiType[] - authentication arguments
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.Disconnect(System.Boolean)">
            Disconnects from the server.
            
            @param   bool immediate - if false, waits for pending writes before disconnecting.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.DiagnoseConnectionFailure">
            Diagnose Connection Failure to the server.
            
            @return  string - error message
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.Update(System.Single,System.Single)">
            Updates the room. Syncs properties from the server and updates scripts.
            
            @param   float deltaTime since the last update in seconds of game time.
            @param   float realDeltaTime since last update in seconds of real time.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.CallEntityRPC(System.UInt32,System.UInt32,KS.Reactor.ksMultiType[])">
            Calls an entity function on the server. Does nothing if not connected to the server.
            
            @param   uint entityId of entity to call rpc on.
            @param   uint rpcId of function to call on server.
            @param   ksMultiType[] arguments to send to server.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.GetObject(System.UInt32)">
            Gets an object by id.
            
            @param   uint objectId
            @return  SyncObject
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.SpawnServerGhost(System.UInt32)">
            Spawns a server ghost object.
            
            @param   uint objectId of object to create ghost for.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.DestroyServerGhost(System.UInt32)">
            Destroys a server ghost object.
            
            @param   uint objectId of object to destroy ghost for.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.AddControlledEntity(KS.Reactor.Client.ksBaseEntity)">
            Adds an entity to the list of controlled entities.
            
            @param   Entity entity to add.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.RemoveControlledEntity(KS.Reactor.Client.ksBaseEntity)">
            Removes an entity from the list of controlled entities.
            
            @param   Entity entity to remove.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.PushTime(System.UInt64,System.Single,System.UInt64)">
            Pushes a time update.
            
            @param   ulong serverTime - Total amount of simulated server time in microseconds.
            @param   ulong serverDeltaTime - Amount of simulated server time between sync frames in seconds.
            @param   ulong frame - server frame number.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.AcknowledgeInput(System.Int32)">
            Decrements the pending input acknowlegement counter.
            
            @param   int numAcknowlegements - amount to decrement by.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.FindOrCreatePlayer(System.UInt32,KS.Reactor.Client.ksBasePlayer@)">
            Find an existing ksBasePlayer or create a new one
            
            @param   uint player id
            @param   out ksBasePlayer
            @return  bool true if a new player was created
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.FindOrCreateSyncObject(System.UInt32,KS.Reactor.Client.SyncObject@,System.Boolean)">
            Find an existing SyncObject or create a new one
            
            @param   uint sync object id
            @param   out SyncObject
            @param   bool create a new sync object if an existing one was not found (Default = true)
            @return  bool true if a new sync object was created
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksBaseRoom.GetAllSyncObjects" -->
        <member name="M:KS.Reactor.Client.ksBaseRoom.ActivatePlayer(System.UInt32)">
            Move new player to the active player list and load scripts.
            
            @param   uint player id
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.InvokePlayerJoin(System.UInt32)">
            Invokes the on player join event, and initializes scripts on the player.
            
            @param   uint player id of player to invoke event for.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.ActivateSyncObject(KS.Reactor.Client.SyncObject)">
            Move new sync object to the active sync object list, initialize properties and fire an entity spawn event.
            
            @param   uint sync object id
            @return  bool true if the syncObject was succesfully activated.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.DestroyPlayer(System.UInt32)">
            Remove a player from the room and fire a player disconnect event.
            
            @param   uint player id
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.DestroySyncObject(System.UInt32)">
            Remove a sync object (and entity) from the room and fire a entity destroy event.
            
            @param   uint sync object id
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.ExecuteRoomRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Execute an RPC on the room
            
            @param   uint RPC id
            @param   ksMultiType[] RPC arguments
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.ExecuteEntityRPC(System.UInt32,System.UInt32,KS.Reactor.ksMultiType[])">
            Execute an RPC on an entity.
            
            @param   uint entityId
            @param   uint RPC id
            @param   ksMultiType[] RPC arguments
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksBaseRoom.UpdateEntityProperties(System.UInt32,System.Collections.Generic.KeyValuePair{System.UInt32,KS.Reactor.ksMultiType}[],System.UInt64)" -->
        <member name="M:KS.Reactor.Client.ksBaseRoom.RegisterConnectionFactory(KS.Reactor.Client.ksConnection.Protocols,KS.Reactor.Client.ksConnection.Factory)">
            Add a connection factory for a protocol.
            If a null factory is provided, then any existing factory with that protocol is removed.
            
            @param   Protocol connection protocol
            @param   ConnectionFactory connection factory
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.IsIdle">
            Is the connection idle?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom.IdleTime">
            Amount of time the player has been idle. Negative if the player is not idle.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksBaseRoom.RemoveSyncGroups(System.Collections.Generic.HashSet{System.UInt32})" -->
        <member name="P:KS.Reactor.Client.ksBaseRoom.Protocol">
            Get / Set the connection protocol used for new connections.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom.InvokeRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Invoke managed RPCs on all room scripts.
            
            @param   uint - RPC ID
            @param   ksMultiType[] - RPC arguments
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom`2">
            Templated base class for rooms. Rooms are used to connect to server rooms.
            The room maintains simulation state that is regularly synced with the server.
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom`2.PlayerJoinHandler">
            Player join event handler.
            
            @param   Player player who joined the room.
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom`2.PlayerLeaveHandler">
            Player leave event handler.
            
            @param   Player player who left the room.
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom`2.SpawnEntityHandler">
            Spawn entity event handler.
            
            @param   Entity entity that was spawned.
        </member>
        <member name="T:KS.Reactor.Client.ksBaseRoom`2.DestroyEntityHandler">
            Destroy entity event handler.
            
            @param   Entity entity that was destroyed.
        </member>
        <member name="E:KS.Reactor.Client.ksBaseRoom`2.OnConnect">
            Invoked when the room is connected
        </member>
        <member name="E:KS.Reactor.Client.ksBaseRoom`2.OnDisconnect">
            Invoked when the room is disconnected
        </member>
        <member name="E:KS.Reactor.Client.ksBaseRoom`2.OnPlayerJoin">
            Invoked when a player joins the room.
        </member>
        <member name="E:KS.Reactor.Client.ksBaseRoom`2.OnPlayerLeave">
            Invoked when a (non-local) player leaves the room.
        </member>
        <member name="E:KS.Reactor.Client.ksBaseRoom`2.OnSpawnEntity">
            Invoked when an entity is spawned.
        </member>
        <member name="E:KS.Reactor.Client.ksBaseRoom`2.OnDestroyEntity">
            Invoked when an entity is destroyed.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.OnPropertyChange">
            Invoked when a room property changes. Indexed by property id.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.OnRPC">
            Invoked when the server calls an RPC on the room. Indexed by RPC id.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.Coroutines">
            Coroutines 
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.Info">
            Room Info
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.Time">
            Server time and local frame delta.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.Properties">
            Properties
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.TimeAdjusters">
            The list of time adjusters that calculate Time.AdjustedDelta to try keep time in sync with the server.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.IsConnecting">
            Are we in the process of establishing a connection with the server?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.IsConnected">
            Are we connected to the server?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.IsDisconnecting">
            Are we disconnecting from the server?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.SuppressCannotCallRPCWarning">
            Should we suppress "Cannot call RPC" warnings when disconnected or disconnecting?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.LocalPlayer">
            The local player. This will be null until we've received an update from the server.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.Players">
            List of players connected to the room.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.GetPlayer(System.UInt32)">
            Get player by id.
            
            @param   uint id
            @return  Player
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.Entities">
            List of entities in the room.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.ServerGhostEntities">
            List of server ghost entities in the room.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.ControlledEntities">
            List of entities controlled by the local player (entities with player controllers).
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.LocalPlayerId">
            The local player id.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.PredictorFactory">
            ksIPredictor factory
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.InputAcknowledged">
            Has the server acknowledged receiving our first input?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.InputInterval">
            The interval in seconds at which input frames are generated and sent to the server. An input frame is a
            collection of button and axes states represented by ksInput. If set to zero, sends one input frame for every
            client frame. If less than zero, input frames are not sent automatically and must be sent by calling
            SendInput.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.SendUnchangedInput">
            If true, sends all input frames to the server. If false, only sends input frames to the server when the
            input changed since the last frame. Unless you are using a custom ksIInputProcessor that requires every
            input frame to be sent, there is no reason to set this to true.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.MultiButtonStateEnabled">
            If true and multiple input updates are combined into one input frame, a button can be both pressed and
            released in the same frame if it's up/down state changed multiple times in the same frame. If false, the
            up/down state of a button can only change once in one input frame.
            
            If InputInterval is zero so one input frame is generated for every client frame, this has no effect.
            
            Eg. Three client frames are combined into one input frame. The button is up on the first frame, down on the
            second, and up again on the third. If MultiButtonStateEnabled is true, this produces one input frame
            where Input.IsDown returns false, and Input.IsPressed and Input.IsReleased return true. If
            MultiButtonStateEnabled is false, this produces one input frame where Input.IsDown and Input.IsPressed
            return true and Input.IsReleased returns false. If the button up/down state does not change again during
            the next input frame, Input.IsDown will return false and Input.IsReleased will return true on the next
            input frame.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.UpdateObjectsEveryServerFrame">
            Do we need to call SyncObject.UpdateServerState after every server frame? Set this to true if you aren't
            using a predictor factory and your compressor utility needs to process all server frames.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.PropertySync">
            Property sync
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.InputRegistrar">
            Input registrar
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.Input">
            Input
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.PlayerControllerFactory">
            Player controller factory
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.RPCLatency">
            Round trip latency measured with RPC calls.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.Latency">
            Round trip latency measured with the connection protocol.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.ReadProgress">
            Get the size and progress of the current connection read operation.
            @return  ksFrameInfo 
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.WriteProgress">
            Get the size and progress of the current connection write operation.
            @return  ksFrameInfo 
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.#ctor(KS.Reactor.ksRoomInfo)">
            Constructor
            
            @param   ksRoomInfo roomInfo determines where we connect.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.#ctor">
            Constructor
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.GetEntity(System.UInt32)">
            Gets the entity in this room with the given id.
            
            @param   uint entityId of entity to get.
            @return  Entity with the given id, or null if no entity with that id was found.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.GetServerGhostEntity(System.UInt32)">
            Gets the server ghost entity in this room with the given id.
            
            @param   uint entityId of entity to get.
            @return  Entity
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.GetTimeAdjuster``1">
            Gets the first ksITimeAdjuster of the type T, or null if none is found.
            
            @return  T time adjuster.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.CreatePredictor(KS.Reactor.Client.ksBaseEntity)">
            Creates a predictor for an entity or player/room properties.
            
            @param   ksBaseEntity entity to get predictor for. Null if predicting player/room properties.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.AddTimeAdjuster(KS.Reactor.Client.ksITimeAdjuster)">
            Adds a ksITimeAdjuster to the room. This cannot be called on a connected room.
            
            @param   ksITimeAdjuster timeAdjuster to add.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.RemoveTimeAdjuster(KS.Reactor.Client.ksITimeAdjuster)">
            Removes a ksITimeAdjuster from the room. This cannot be called on a connected room.
            
            @param   ksITimeAdjuster timeAdjuster to remove.
            @return  bool true if the time adjuster was found and removed.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.RemoveTimeAdjuster``1">
            Removes the first ksITimeAdjuster of the type T. This cannot be called on a connected room.
            
            @return  bool true if a time adjuster of type T was found and removed.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ClearTimeAdjusters">
            Removes all time adjusters. This cannot be called on a connected room.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.CanModifyTimeAdjusters">
            Logs a warning and returns false if the room is connected.
            
            @return  bool true if the room is not connected.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SendInput(System.Boolean,System.Single)">
            Generates an input frame to send to the server, and calls InputUpdate on predictors for entities with player
            controllers.
            
            @param   forceUpdate - if false, will only send a new input frame to server if there were input changes
                     since the last frame.
            @param   float deltaTime - the time step to use when calling InputUpdate on predictors. If less than zero, the
                     time deltas are unchanged. Otherwise, they are set to the following:
                         Time.RealDelta = deltaTime
                         Time.Delta = deltaTime * Time.ServerTimeScale
                         Time.AdjustedDelta = Time.AdjustedDelta * (deltaTime / Time.RealDelta)
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.CleanUp">
            Destroys all entities and players in the room. Call this after disconnecting. If called
            while connected, does nothing.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksBaseRoom`2.Equals(KS.Reactor.Client.ksBaseRoom)" -->
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.CreatePlayer(System.UInt32)">
            Creates a player.
            
            @param   uint id of player.
            @return  Player
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.CreateEntity(System.UInt32,System.UInt32,System.Boolean)">
            Creates an entity.
            
            @param   uint id of entity.
            @param   uint type of entity.
            @param   bool isGhost - if true, we are creating an entity for a server ghost
            @return  Entity
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksBaseRoom`2.LoadPermanentEntities" -->
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.LoadPlayerScripts(`0)">
            Loads and attaches player scripts to a player.
            
            @param   Player player to attach scripts to.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.InitializeScripts">
            Initializes room scripts.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.UpdateScripts">
            Updates scripts.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.Connect(KS.Reactor.Client.ksPlayerControllerFactory,KS.Reactor.ksPlayerAPI.Session,KS.Reactor.ksMultiType[])">
            Connects to the server.
            
            @param   ksPlayerControllerFactory - factory for creating player controllers.
            @param   ksPlayerAPI.Session - player session
            @param   ksMultiType[] - authentication arguments
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.Disconnect(System.Boolean)">
            Disconnects from the server.
            
            @param   bool immediate - if false, waits for pending writes before disconnecting.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SocketErrorToConnectStatus(System.Net.Sockets.SocketError)">
            Convert a socket error to room connect error.
            
            @param   SocketError error
            @return   ConnectError
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.HandleConnect(KS.Reactor.Client.ksConnection,System.Net.Sockets.SocketError,System.Object)">
            Handle a connection completed event.
            
            @param   Connection - connection
            @param   SocketError - connection result (If the connection was successful this value will be SocketError.Success)
            @param   object - asynchronous state
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.HandleDisconnect(KS.Reactor.Client.ksConnection,System.Net.Sockets.SocketError)">
            Handle a connection disconnect event.
            
            @param   Connection - connection
            @param   SocketError - connection result
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SentPacket(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer)">
            Release the sent packet buffer.
            
            @param   Connection - connection that is calling the handler
            @param   ksStreamBuffer - buffer that was written to the connection.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ReceiveHandshake(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer)">
            Handle a handshake packet.
            Decodes a the handshake packet and writes a model validation packet to the connection.
            
            @param   Connection - connection that is calling the handler
            @param   ksStreamBuffer - buffer containing the packet header and body
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ReceiveValidateModel(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer)">
            Handle a modelvalidation packet.
            Decodes the validate model packet and writes an authentication packet to the connection.
            
            @param   Connection - connection that is calling the handler
            @param   ksStreamBuffer - buffer containing the packet header and body
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ReceiveAuthentication(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer)">
            Handle an authentication packet.
            Decodes the authentication packet and updates the connection state.
            
            @param   Connection - connection that is calling the handler
            @param   ksStreamBuffer - buffer containing the packet header and body
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ReceiveFrame(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer)">
             Handle a frame packet.
            
             @param   Connection - connection that is calling the handler
             @param   ksStreamBuffer - buffer containing the packet header and body
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ReceiveIdle(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer)">
             Handle an idle packet.
            
             @param   Connection - connection that is calling the handler
             @param   ksStreamBuffer - buffer containing the packet header and body
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ReceivePong(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer)">
             Handles the reception of a pong packet.
             Decodes the packet and updates the connection latency.
            
             @param   Connection - connection that is calling the handler
             @param   ksStreamBuffer - buffer containing the packet header and body
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SetConnectEvent(KS.Reactor.Client.ksBaseRoom.ConnectError,System.UInt32)">
            Creates a new connect event if one does not already exist.
            
            @param   ConnectError - Connection error state
            @param   uint - Custom status code defined by the game developer
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SetDisconnectEvent(KS.Reactor.Client.ksBaseRoom.DisconnectError)">
            Creates a new disconnect event if one does not already exist.
            
            @param   DisconnectError - Disconnection error state
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.HandleConnectionEvents">
            Calls the connect handler if the connection event is set.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.DiagnoseConnectionFailure">
            Diagnose Connection Failure to the server.
            
            @return String error message
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.Update(System.Single,System.Single)">
            Updates the room. Syncs properties from the server and updates scripts.
            
            @param   float deltaTime since the last update in seconds of game time.
            @param   float realDeltaTime since last update in seconds of real time.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ProcessServerFrame">
            Processes an update from the server.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.AcknowledgeInput(System.Int32)">
            Decrements the pending input acknowlegement counter.
            
            @param   int numAcknowlegements - amount to decrement by.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.CallRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Calls a function on the server. Does nothing if not connected to the server.
            
            @param   uint rpcId of function to call on server.
            @param   ksMultiType[] arguments to send to server.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.CallEntityRPC(System.UInt32,System.UInt32,KS.Reactor.ksMultiType[])">
            Calls an entity function on the server. Does nothing if not connected to the server.
            
            @param   uint entityId of entity to call rpc on.
            @param   uint rpcId of function to call on server.
            @param   ksMultiType[] arguments to send to server.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksBaseRoom`2.CallBatchRPC(System.Collections.Generic.IEnumerable{`1},System.UInt32,KS.Reactor.ksMultiType[])" -->
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.GetObject(System.UInt32)">
            Gets an object by id.
            
            @param   uint objectId
            @return  SyncObject
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.PushTime(System.UInt64,System.Single,System.UInt64)">
            Pushes a time update.
            
            @param   ulong serverTime - Total amount of simulated server time in microseconds.
            @param   ulong serverDeltaTime - Amount of simulated server time between sync frames in seconds.
            @param   ulong frame - server frame number.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.CanCallRPC">
            Checks if we can call an RPC by checking if we are connected and not disconnecting. Logs a warning if we
            cannot.
            
            @param   bool true if we can call an RPC.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SyncProperties">
            Syncs room properties with the server.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SyncTime(System.Single,System.Single)">
            Syncs time with the server.
            
            @param   float deltaTime since the last update in seconds of game time.
            @param   float realDeltaTime since last update in seconds of real time.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SpawnEntity(KS.Reactor.Client.SyncObject)">
            Spawns an entity.
            
            @param    SyncObject syncObject the entity is for.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SpawnServerGhost(KS.Reactor.Client.SyncObject)">
            Spawns a server ghost object.
            
            @param   SyncObject syncObject to create ghost for.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SpawnServerGhost(System.UInt32)">
            Spawns a server ghost object.
            
            @param   uint objectId of object to create ghost for.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.DestroyServerGhost(System.UInt32)">
            Destroys a server ghost object.
            
            @param   uint objectId of object to destroy ghost for.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.AddControlledEntity(KS.Reactor.Client.ksBaseEntity)">
            Adds an entity to the list of controlled entities.
            
            @param   Entity entity to add.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.RemoveControlledEntity(KS.Reactor.Client.ksBaseEntity)">
            Removes an entity from the list of controlled entities.
            
            @param   Entity entity to remove.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.FindOrCreatePlayer(System.UInt32,KS.Reactor.Client.ksBasePlayer@)">
            Find an existing ksBasePlayer or create a new one
            
            @param   uint player id
            @param   out ksBasePlayer
            @return  bool true if a new player was created
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.FindOrCreateSyncObject(System.UInt32,KS.Reactor.Client.SyncObject@,System.Boolean)">
            Find an existing SyncObject or create a new one
            
            @param   uint sync object id
            @param   out SyncObject
            @param   bool create a new sync object if an existing one was not found (Default = true)
            @return  bool true if a new sync object was created
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksBaseRoom`2.GetAllSyncObjects" -->
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ActivatePlayer(System.UInt32)">
            Move new player to the active player list, initialize properties and scripts.
            
            @param   uint player id
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.InvokePlayerJoin(System.UInt32)">
            Invokes the on player join event, and initializes scripts on the player.
            
            @param   uint player id of player to invoke event for.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ActivateSyncObject(KS.Reactor.Client.SyncObject)">
            Move new sync object to the active sync object list, initialize properties and fire an entity spawn event.
            
            @param   SyncObject syncobject
            @return  bool true if the sync object was activated succesfully.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.DestroyPlayer(System.UInt32)">
            Remove a player from the room and fire a player leave event.
            
            @param   uint player id
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.DestroySyncObject(System.UInt32)">
            Remove a sync object (and entity) from the room and fire a entity destroy event.
            
            @param   uint sync object id
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ExecuteRoomRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Execute an RPC on the room.
            
            @param   uint RPC id
            @param   ksMultiType[] RPC arguments
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ExecuteEntityRPC(System.UInt32,System.UInt32,KS.Reactor.ksMultiType[])">
            Execute an RPC on an entity.
            
            @param   uint entityId
            @param   uint RPC id
            @param   ksMultiType[] RPC arguments
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksBaseRoom`2.UpdateEntityProperties(System.UInt32,System.Collections.Generic.KeyValuePair{System.UInt32,KS.Reactor.ksMultiType}[],System.UInt64)" -->
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.RegisterRPC(System.UInt32,KS.Reactor.Client.ksBaseRoom.RPCHandler)">
            Register an RPC
            
            @param   uint RPC Id
            @param   ksServerEvents.RPCHandler RPC handler
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.UnregisterRPC(System.UInt32,KS.Reactor.Client.ksBaseRoom.RPCHandler)">
            Unregister an RPC
            
            @param   uint RPC Id
            @param   ksServerEvents.RPCHandler RPC handler
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SendPing(System.Single)">
            Send ping requests to the server.
            
            @param   float - Time between update frames.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.UpdateLatency(System.Byte,System.Int64,System.Int64[],System.Int32@,System.Int32@)">
            Update latency with new netowrk and RPC ping times.
            
            @param   byte - Ping type (0 = network, 1 = RPC)
            @param   long - ping send time
            @param   long[] - ping history
            @param   ref int - current ping index in the history array
            @param   ref int - latency value to update
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.SetPredictionBehaviour(System.UInt32,KS.Reactor.Client.ksPredictionBehaviour)">
            Set the prediction behaviour of a property.
            
            @param   uint property Id
            @param   ksPredictionBehaviour - Behaviour of the property when predicting and smoothing values.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.GetPredictionBehaviour(System.UInt32)">
            Gets prediction behaviour of a property.
            
            @param   uint property Id
            @return  ksPredictionBehaviour - Behaviour of the property when predicting and smoothing values.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.GetPropertyServerValue(System.UInt32)">
            Gets property server value. If a property id is not in the map, 
            a ksMultiType of type ksMultiType.Types.UNDEFINED is returned.
            
            @param   uint propertyId
            @return  ksMultiType
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.HandleIdle">
            When becoming idle we destroy all sync objects to avoid prediction extrapolation and because 
            the first frame after disabling idle will be a full sync frame which will create the objects.
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.IsIdle">
            Is the connection idle?
        </member>
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.IdleTime">
            Amount of time the player has been idle. Negative if the player is not idle.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksBaseRoom`2.RemoveSyncGroups(System.Collections.Generic.HashSet{System.UInt32})" -->
        <member name="P:KS.Reactor.Client.ksBaseRoom`2.Protocol">
            Get/Set the network protocol to use for connections.
        </member>
        <member name="M:KS.Reactor.Client.ksBaseRoom`2.ToString">
            Returns a string containing the room id, room type, and scene name.
            
            @return  string containing the room id, room type, and scene name.
        </member>
        <member name="T:KS.Reactor.Client.ksClientInputPredictor">
            <summary>Predicts movement and properties using only the player controller; server data is ignored.</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksClientInputPredictor.RequiresController">
            <summary>Always true; the client input predictor requires a player controller.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksClientInputPredictor.Create">
            <summary>Gets a client input predictor instance from the pool, or creates one if the pool is empty.</summary>
            <returns>Predictor instance</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksClientInputPredictor.#ctor">
            <summary>Private constructor. Forces use of object pooling via <see cref="M:KS.Reactor.Client.ksClientInputPredictor.Create"/>.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksClientInputPredictor.Initialize(KS.Reactor.Client.ksBaseRoom,KS.Reactor.Client.ksBaseEntity)">
            <summary>Initializes the predictor.</summary>
            <param name="room">The room object.</param>
            <param name="entity">
            Entity the predictor is smoothing. Null if the predictor is smoothing room or player properties.
            </param>
            <returns>False if the predictor could not be initialized and needs to be removed.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksClientInputPredictor.CleanUp">
            <summary>Resets member variables and return the LinearPredictor to an object pool.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksClientInputPredictor.AddProperty(System.UInt32,KS.Reactor.ksMultiType,KS.Reactor.Client.ksPredictionBehaviour)">
            <summary>Initializes smoothing for a property. Called once per property that will be smoothed.</summary>
            <param name="propertyId">Id of property that will be smoothed.</param>
            <param name="value">Property value.</param>
            <param name="smoothingData">Smoothing data for property prediction.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksClientInputPredictor.ServerUpdate(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType},System.Boolean,System.Boolean)">
            <summary>Called once per server frame.</summary>
            <param name="state">
            Server transform and velocity data. Velocity data is currently not synced and is always zero.
            </param>
            <param name="properties">
            Smoothed properties whose values changed since the last frame. Null if no properties have changed.
            </param>
            <param name="teleport">Did the entity teleport?</param>
            <param name="idle">True if there were no transform or property changes since the last frame.</param>
            <returns>
            If false and <paramref name="idle"/> is true, this function will not be called again until the server
            transform or a server property changes.
            </returns>
        </member>
        <member name="M:KS.Reactor.Client.ksClientInputPredictor.ClientUpdate(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType})">
            <summary>Updates the client transform and properties.</summary>
            <param name="state">Client transform and velocity to update with new values.</param>
            <param name="properties">
            Smoothed client properties to update with new values. Null if there are no smoothed properties.
            </param>
            <returns>
            If false, this function will not be called again until the server transform or a server property changes.
            </returns>
        </member>
        <member name="M:KS.Reactor.Client.ksClientInputPredictor.InputUpdate(KS.Reactor.ksInput)">
            <summary>
            Called when a new frame of input is generated. Only called for entities with player controllers.
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="T:KS.Reactor.Client.ksClientTime">
            Holds time data that is available on the client.
        </member>
        <member name="F:KS.Reactor.Client.ksClientTime.m_zero">
            Time with zero for all values.
        </member>
        <member name="P:KS.Reactor.Client.ksClientTime.AdjustedDelta">
            Local game time in seconds since the last update, adjusted by ksITimeAjusters to try stay in sync with the
            server.
        </member>
        <member name="P:KS.Reactor.Client.ksClientTime.ServerTime">
            Simulated server time in seconds.
        </member>
        <member name="P:KS.Reactor.Client.ksClientTime.ServerDelta">
            Amount of time simulated on the server since the previous server frame.
        </member>
        <member name="P:KS.Reactor.Client.ksClientTime.ServerTimeScale">
            Average time scaling applied over all server frames processed in the last room update.
        </member>
        <member name="T:KS.Reactor.Client.ksConnection">
            Base class for network connections.
        </member>
        <member name="T:KS.Reactor.Client.ksConnection.Protocols">
            Supported network protocols
        </member>
        <member name="T:KS.Reactor.Client.ksConnection.ConnectOperation">
            Track connect operations
        </member>
        <member name="M:KS.Reactor.Client.ksConnection.ConnectOperation.#ctor(KS.Reactor.Client.ksConnection.ConnectHandler,System.Object)">
            Constructor.
            
            @param   ConnectHandler - Callback to invoke when the connection attempt succeeds or fails
            @param   object - Aysnc state object
        </member>
        <member name="T:KS.Reactor.Client.ksConnection.IOOperation">
            Track read/write operations
        </member>
        <member name="M:KS.Reactor.Client.ksConnection.IOOperation.#ctor(System.Net.Sockets.SocketAsyncOperation,KS.Reactor.ksStreamBuffer.Segment,KS.Reactor.Client.ksConnection.IOHandler,System.Object)">
            Constructor.
            
            @param   SocketAsyncOperation - Type of socket operation
            @param   ksStreamBuffer.Segment - Stream buffer segment to operate on
            @param   IOHandler - Callback to invoke when the operation completes
            @param   object - Async state object
        </member>
        <member name="T:KS.Reactor.Client.ksConnection.Factory">
            Method to generate connections.
            
            @return  ksConnection
        </member>
        <member name="T:KS.Reactor.Client.ksConnection.ConnectHandler">
            Handler called when connection attempts complete.
            
            @param   ksConnection - connection that is calling the handler
            @param   SocketError - connection result (If the connection was successful this value will be SocketError.Success)
            @param   object - asynchronous state
        </member>
        <member name="T:KS.Reactor.Client.ksConnection.DisconnectHandler">
            Handler called when connection disconnects.
            
            @param   ksConnection - connection that is calling the handler
            @param   SocketError - connection result
        </member>
        <member name="T:KS.Reactor.Client.ksConnection.IOHandler">
            Handler called when a read/write operation completes.
            
            @param   ksConnection - connection that is calling the handler
            @param   ksStreamBuffer.Segment - buffer segment that was read from or written to
            @param   SocketError - operation result
            @param   object - asynchronous state
        </member>
        <member name="P:KS.Reactor.Client.ksConnection.Address">
            Return the host and port as a single address string.
            
            @return  string
        </member>
        <member name="P:KS.Reactor.Client.ksConnection.ReadProgress">
            Get the progress of the current read operation.
            
            @return  ksFrameInfo
        </member>
        <member name="P:KS.Reactor.Client.ksConnection.WriteProgress">
            Get the progress of the current write operation.
            
            @return  ksFrameInfo
        </member>
        <member name="P:KS.Reactor.Client.ksConnection.IsConnected">
            Check if a connection to the server is open.
            
            @return  bool
        </member>
        <member name="M:KS.Reactor.Client.ksConnection.Connect(System.String,System.UInt16,KS.Reactor.Client.ksConnection.ConnectHandler,System.Object)">
            Establish a connection to a server.
            
            @param   string - server host name
            @param   ushort - server port
            @param   ConnectHandler - callback to invoke when the connection attempt completes
            @param   object - asynchronous state
        </member>
        <member name="M:KS.Reactor.Client.ksConnection.Disconnect(System.Boolean)">
            Disconnect from the server.
            
            @param   bool - immediate. If this is false, then queued write operations will complete before disconnecting.
        </member>
        <member name="M:KS.Reactor.Client.ksConnection.Read(KS.Reactor.ksStreamBuffer.Segment,KS.Reactor.Client.ksConnection.IOHandler,System.Object)">
            Read data from the connection into a stream buffer segment.
            
            @param   ksStreamBuffer.Segment - segment of a larger stream buffer
            @param   IOHandler - callback to invoke when the read operation completes
            @param   object - asynchronous state
        </member>
        <member name="M:KS.Reactor.Client.ksConnection.Write(KS.Reactor.ksStreamBuffer.Segment,KS.Reactor.Client.ksConnection.IOHandler,System.Object)">
            Read data from the connection into a stream buffer segment.
            
            @param   ksStreamBuffer.Segment - segment of a larger stream buffer
            @param   IOHandler - callback to invoke when the write operation completes
            @param   object - asynchronous state
        </member>
        <member name="T:KS.Reactor.Client.ksConvergingInputPredictor">
            <summary>
            Predicts movement and properties based on user input using a player controller. Accelerations are slower than
            the server so the client and server will converge.
            </summary>
        </member>
        <member name="T:KS.Reactor.Client.ksConvergingInputPredictor.InputFrame">
            <summary>Client input frame. Contains input and delta time.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.InputFrame.Input">
            <summary>Input state for the frame.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.InputFrame.DeltaTime">
            <summary>Frame duration in seconds.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.InputFrame.#ctor(KS.Reactor.ksInput,System.Single)">
            <summary>Constructor</summary>
            <param name="input">Input state for the frame.</param>
            <param name="deltaTime">Frame duration in seconds.</param>
        </member>
        <member name="T:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData">
            <summary>Configuration parameters for the converging input predictor.</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.Default">
            <summary>Default configuration values. Values can be changed to change the defaults.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.VelocityToleranceCalculator">
            <summary>
            Calculates the velocity tolerance for an entity. Called when <see cref="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.VelocityTolerance"/> is set to
            <see cref="!:Auto"/>.
            </summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.AUTO">
            <summary>
            If <see cref="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.VelocityTolerance"/> is set to this, a velocity tolerance is automatically calculated for
            the entity by calling <see cref="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.VelocityToleranceCalculator"/> if it is not null, otherwise one is
            used as the velocity tolerance.
            </summary>
        </member>
        <member name="T:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.ResetPropertyCallback">
            <summary>
            Property reset callback, called when a property is reset to the server state before replaying inputs
            through the player controller.
            </summary>
            <param name="value">Server property value.</param>
            <param name="changeRate">Server property change rate per second.</param>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.ConvergeMultiplier">
            <summary>Lower values mean we try to converge more aggressively.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.MaxDeltaTime">
            <summary>
            Maximum time step for the client over a single frame. If a frame's time delta is larger than this, this
            is used as the time delta instead. The predictor behaves poorly with large time steps, and limiting the
            maximum time step can improve the behaviour when there are dips in frame rate.
            </summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.DefaultLatency">
            <summary>Latency in seconds to use before latency is determined.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.UseClientOnlyPosition">
            <summary>
            If true, converging prediction is not run on the position. Instead the player controller alone
            determines the client position. Changing this after <see cref="M:KS.Reactor.Client.ksConvergingInputPredictor.Initialize(KS.Reactor.Client.ksBaseRoom,KS.Reactor.Client.ksBaseEntity)"/> 
            is called does nothing.
            </summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.UseClientOnlyRotation">
            <summary>
            If true, converging prediction is not run on the rotation. Instead the player controller alone
            determines the client rotation. Changing this after <see cref="M:KS.Reactor.Client.ksConvergingInputPredictor.Initialize(KS.Reactor.Client.ksBaseRoom,KS.Reactor.Client.ksBaseEntity)"/> 
            is called does nothing.
            </summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.UseClientOnlyScale">
            <summary>
            If true, converging prediction is not run on the scale. Instead the player controller alone determines
            the client scale. Changing this after <see cref="M:KS.Reactor.Client.ksConvergingInputPredictor.Initialize(KS.Reactor.Client.ksBaseRoom,KS.Reactor.Client.ksBaseEntity)"/> is called does
            nothing.
            </summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.VelocityTolerance">
            <summary>
            Maximum difference between client and server velocity before inputs are replayed. Less than or equal to
            zero for no limit. If set to <see cref="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.AUTO"/>, a velocity tolerance is calculated for the entity by
            <see cref="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.VelocityToleranceCalculator"/> if it is not null, otherwise one is used.
            </summary>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.PositionResetCallback">
            <summary>Called before replaying inputs with new position and velocity values.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.AngularVelocityTolerance">
            <summary>
            Maximum difference between client and server angular velocity before inputs are replayed. Less than or
            equal to zero for no limit.
            </summary>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.RotationResetCallback">
            <summary>Called before replaying inputs with new rotation and angular velocity values.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.GetPropertyChangeTolerance(System.UInt32)">
            <summary>
            Gets the maximum difference between client and server change rates for a property before inputs are
            replayed. Zero for no limit.
            </summary>
            <param name="propertyId">Id of property to get change rate tolerance for.</param>
            <returns>Change rate tolerance for the property.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.SetPropertyChangeTolerance(System.UInt32,System.Single)">
            <summary>
            Sets the maximum difference between client and server change rates for a property before inputs are
            Replayed. Less than or equal to zero for no limit.
            - For ksVector2 properties using spherical smoothing, difference is defined as
              sqrt(deltaDegrees^2 + 90 * deltaMagnitude^2)
            - For ksVector3 properties using spherical smoothing, difference is defined as
              sqrt(deltaAngularDegrees.Magnitude()^2 + 90 * deltaMagnitude^2)
            </summary>
            <param name="propertyId">Id of property to set tolerance for.</param>
            <param name="tolerance">Tolerance to set. Less than or equal to zero for no limit.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.SetPropertyResetCallback(System.UInt32,KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.ResetPropertyCallback)">
            <summary>
            Sets the callback to call before replaying inputs with new value and change rate for a property.
            </summary>
            <param name="propertyId">Id of property to set callback for.</param>
            <param name="callback">Callback to set.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.Clone">
            <summary>Creates a copy of this <see cref="T:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData"/>.</summary>
            <returns>Copy of the config.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.CallResetPropertyCallback(System.UInt32,KS.Reactor.ksMultiType,KS.Reactor.ksMultiType)">
            <summary>Calls a reset property callback.</summary>
            <param name="propertyId">Id of property to call callback for.</param>
            <param name="value">Property value</param>
            <param name="changeRate">
            Property change rate.
             - For ksVector2 properties using spherical smoothing, this is a ksVector2 where X is delta radians
               and Y is delta magnitude.
             - For ksVector3 properties using spherical smoothing, this is a float array of size 4 where the
               first 3 elements are angular velocity X, Y, Z in radians, and the 4th is delta magnitude.
            </param>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.Config">
            <summary>
            Configurable data for customizing the the predictor. Returns null if the predictor is using the
            <see cref="P:KS.Reactor.Client.ksConvergingInputPredictor.ConfigData.Default"/>. Assign this if you want to override the defaults.
            </summary>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.RequiresController">
            <summary>Always true; the converging input predictor requires a player controller.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Create">
            <summary>
            Gets a converging input predictor instance from the pool, or creates one if the pool is empty.
            </summary>
            <returns>Predictor instance</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.#ctor">
            <summary>Private constructor. Forces use of object pooling via <see cref="M:KS.Reactor.Client.ksConvergingInputPredictor.Create"/>.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Initialize(KS.Reactor.Client.ksBaseRoom,KS.Reactor.Client.ksBaseEntity)">
            <summary>Initializes the predictor.</summary>
            <param name="room">The room object.</param>
            <param name="entity">
            Entity the predictor is smoothing. Null if the predictor is smoothing room or player properties.
            </param>
            <returns>False if the predictor could not be initialized and needs to be removed.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.CleanUp">
            <summary>Resets member variables and return the LinearPredictor to an object pool.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.AddProperty(System.UInt32,KS.Reactor.ksMultiType,KS.Reactor.Client.ksPredictionBehaviour)">
            <summary>Initializes smoothing for a property. Called once per property that will be smoothed.</summary>
            <param name="propertyId">Id of property that will be smoothed.</param>
            <param name="value">Property value.</param>
            <param name="smoothingData">Smoothing data for property prediction.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ServerUpdate(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType},System.Boolean,System.Boolean)">
            <summary>Called once per server frame.</summary>
            <param name="state">
            Server transform and velocity data. Velocity data is currently not synced and is always zero.
            </param>
            <param name="properties">
            Smoothed properties whose values changed since the last frame. Null if no properties have changed.
            </param>
            <param name="teleport">Did the entity teleport?</param>
            <param name="idle">True if there were no transform or property changes since the last frame.</param>
            <returns>
            If false and <paramref name="idle"/> is true, this function will not be called again until the server
            transform or a server property changes.
            </returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ClientUpdate(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType})">
            <summary>Updates the client transform and properties.</summary>
            <param name="state">Client transform and velocity to update with new values.</param>
            <param name="properties">
            Smoothed client properties to update with new values. Null if there are no smoothed properties.
            </param>
            <returns>
            If false, this function will not be called again until the server transform or a server property changes.
            </returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.InputUpdate(KS.Reactor.ksInput)">
            <summary>
            Called when a new frame of input is generated. Only called for entities with player controllers.
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ProcessInput(KS.Reactor.Client.ksConvergingInputPredictor.InputFrame)">
            <summary>
            Updates the controller with a frame of input. Extrapolates predictions based on the controller state.
            </summary>
            <param name="frame">Input frame</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.CompareChangeRates(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType})">
            <summary>
            Calculates property change rates from server values and compares them with client values. Does not
            calculate change rates for properties with no change tolerance.
            </summary>
            <param name="state">Server physics state.</param>
            <param name="properties">Server properties whose values changed since the last frame.</param>
            <returns>
            True if the difference in change rate between client and server values for a property exceeded
            the tolerance.
            </returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ReplayInputs(KS.Reactor.Client.ksPhysicsState)">
            <summary>
            Resets property state to server values and replays inputs through the player controller to get a new
            predicted state.
            </summary>
            <param name="state">Server state.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.IterateSmoothers">
            <summary>Iterates the smoothers.</summary>
            <returns>Iterator</returns>
        </member>
        <member name="T:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother">
            <summary>Interface for smoothly predicting a ksMultiType.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.CleanUp">
            <summary>Reset member variables and return the smoother to an object pool.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.Advance">
            <summary>Removes the oldest history frame.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.Advance(System.Single)">
            <summary>Advances through the history.</summary>
            <param name="t">Time to advance between 0 and 1 where 1 is the entirety of the oldest history frame.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.ClearHistory">
            <summary>Clears the history.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.GetServerChangeRate">
            <summary>Gets the server change rate.</summary>
            <returns>Server change rate.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.GetServerValue">
            <summary>Gets the server value.</summary>
            <returns>Server value.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.SetServerValue(KS.Reactor.ksMultiType)">
            <summary>Sets the server value.</summary>
            <param name="value">Server value.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.PredictServerValue">
            <summary>Predicts the server's current value by adding the deltas from history to the last known server value.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.GetPredictedServerValue">
            <returns>Predicted server value.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.Idle">
            <summary>Sets the server change rate to zero.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.CalculateChangeRate(KS.Reactor.ksMultiType,System.Single)">
            <summary>Calculates the server change rate.</summary>
            <param name="nextValue">Next server value.</param>
            <param name="deltaTime">Server delta time.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.CompareChangeRates">
            <summary>Gets the difference between the server and client change rates.</summary>
            <returns>Difference between server and client change rates.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.AddPrediction(KS.Reactor.ksMultiType,System.Single)">
            <summary>Sets the predicted server value and adds a prediction to the history.</summary>
            <param name="value">Predicted value.</param>
            <param name="deltaTime">Delta time in seconds.</param>
            @param   ksMultiType value - predicted value.
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.ExtrapolatePrediction(KS.Reactor.ksMultiType,KS.Reactor.ksMultiType,System.Single,System.Single,System.Single)">
            <summary>Updates and extrapolates the predicted server value.</summary>
            <param name="startValue">Value before the controller update.</param>
            <param name="controllerValue">Value after the controller update.</param>
            <param name="deltaTime">Delta time in seconds.</param>
            <param name="latency">Latency in seconds.</param>
            <param name="convergeMultiplier">Lower values mean we try to converge more aggressively.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.Interpolate(KS.Reactor.ksMultiType,System.Single,System.Single,System.Single)">
            <summary>Interpolates the client value towards a predicted future server value.</summary>
            <param name="clientValue">Client value to interpolate from.</param>
            <param name="deltaTime">Delta time in seconds.</param>
            <param name="latency">Latency in seconds.</param>
            <param name="convergeMultiplier">Lower values mean we try to converge more aggressively.</param>
            <returns>New client value.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.ISmoother.ZeroFillHistory(System.Int32)">
            <summary>Adds zero filled frames of given number to history.</summary>
            <param name="num">Number of zero filled frames that need to be added to history.</param>
            @param   int number of zero filled frames that need to be added to history.
        </member>
        <member name="T:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3">
            <summary>Predicts a templated type using a templated <see cref="T:KS.Reactor.Client.ISpace`2"/>.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Create">
            <summary>Creates or fetches a smoother from the object pool.</summary>
        </member>
        <member name="T:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Frame">
            <summary>Predicted frame</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Frame.Delta">
            <summary>Predicted delta</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Frame.ChangeRate">
            <summary>Predicted change rate</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Frame.#ctor(`1,`1)">
            <summary>Constructor</summary>
            <param name="delta">Predicted delta.</param>
            <param name="changeRate">Predicted change rate.</param>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.ServerValue">
            <summary>Last known server value</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.ServerChangeRate">
            <summary>Last known server change rate</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.ClientChangeRate">
            <summary>Client change rate</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.PredictedServerValue">
            <summary>Predicted server value</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.VectorSpace">
            <summary>Vector space instance</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.CleanUp">
            <summary>Resets member variables and return the smoother to an object pool.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Advance">
            <summary>Removes the oldest history frame.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Advance(System.Single)">
            <summary>Advances through the history.</summary>
            <param name="t">Time to advance between 0 and 1 where 1 is the entirety of the oldest history frame.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.ClearHistory">
            <summary>Clears the history.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.GetServerChangeRate">
            <summary>Gets the server change rate.</summary>
            <returns>Server change rate.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.GetServerValue">
            <summary>Gets the server value.</summary>
            <returns>Server value</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.SetServerValue(KS.Reactor.ksMultiType)">
            <summary>Sets the server value.</summary>
            <param name="value">Server value</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.PredictServerValue">
            <summary>Predicts the server's current value by adding the deltas from history to the last known server value.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.GetPredictedServerValue">
            <returns>ksMultiType predicted server value.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Idle">
            <summary>Sets the server change rate to zero.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.CalculateChangeRate(KS.Reactor.ksMultiType,System.Single)">
            <summary>Calculates the server change rate.</summary>
            <param name="nextValue">Next server value.</param>
            <param name="deltaTime">Server delta time.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.CalculateChangeRate(`0,System.Single)">
            <summary>Calculates the server change rate.</summary>
            <param name="nextValue">Next server value.</param>
            <param name="deltaTime">Server delta time.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.CompareChangeRates">
            <summary>Gets the difference between the server and client change rates.</summary>
            <returns>Difference between server and client change rates.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.AddPrediction(KS.Reactor.ksMultiType,System.Single)">
            <summary>Sets the predicted server value and adds a prediction to the history.</summary>
            <param name="value">Predicted value.</param>
            <param name="deltaTime">Delta time in seconds.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.AddPrediction(`0,System.Single)">
            <summary>Sets the predicted server value and adds a prediction to the history.</summary>
            <param name="value">Predicted value.</param>
            <param name="deltaTime">Delta time in seconds.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.ExtrapolatePrediction(KS.Reactor.ksMultiType,KS.Reactor.ksMultiType,System.Single,System.Single,System.Single)">
            <summary>Updates and extrapolates the predicted server value.</summary>
            <param name="startValue">Value before the controller update.</param>
            <param name="controllerValue">Value after the controller update.</param>
            <param name="deltaTime">Delta time in seconds.</param>
            <param name="latency">Latency in seconds.</param>
            <param name="convergeMultiplier">Lower values mean we try to converge more aggressively.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.ExtrapolatePrediction(`0,`0,System.Single,System.Single,System.Single)">
            <summary>Updates and extrapolates the predicted server value.</summary>
            <param name="startValue">Value before the controller update.</param>
            <param name="controllerValue">Value after the controller update.</param>
            <param name="deltaTime">Delta time in seconds.</param>
            <param name="latency">Latency in seconds.</param>
            <param name="convergeMultiplier">Lower values mean we try to converge more aggressively.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Interpolate(KS.Reactor.ksMultiType,System.Single,System.Single,System.Single)">
            <summary>Interpolates the client value towards a predicted future server value.</summary>
            <param name="clientValue">Client value to interpolate from.</param>
            <param name="deltaTime">Delta time in seconds.</param>
            <param name="latency">Latency in seconds.</param>
            <param name="convergeMultiplier">Lower values mean we try to converge more aggressively.</param>
            <returns>New client value.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.Interpolate(`0,System.Single,System.Single,System.Single)">
            <summary>Interpolates the client value towards a predicted future server value.</summary>
            <param name="clientValue">Client value to interpolate from.</param>
            <param name="deltaTime">Delta time in seconds.</param>
            <param name="latency">Latency in seconds.</param>
            <param name="convergeMultiplier">Lower values mean we try to converge more aggressively.</param>
            <returns>New client value.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksConvergingInputPredictor.Smoother`3.ZeroFillHistory(System.Int32)">
            <summary>Adds zero filled frames of given number to history.</summary>
            <param name="num">Number of zero filled frames that need to be added to history.</param>
        </member>
        <member name="T:KS.Reactor.Client.ksDelegates">
            Collection of delegates.
        </member>
        <member name="T:KS.Reactor.Client.ksDelegates.PropertyChangeHandler">
            Property change event handler.
            
            @param   ksMultiType oldValue of property.
            @param   ksMultiType newValue of property.
        </member>
        <member name="T:KS.Reactor.Client.ksDelegates.Factories">
            Factory delegates
        </member>
        <member name="T:KS.Reactor.Client.ksDelegates.Factories.Predictor">
            Predictor factory
            
            @param   ksBaseEntity entity to get predictor for. Null if predicting player/room properties.
            @return  ksIPredictor predictor
        </member>
        <member name="T:KS.Reactor.Client.ksFrameInfo">
            Size and download progress for a frame.
        </member>
        <member name="P:KS.Reactor.Client.ksFrameInfo.Size">
            Frame size in bytes.
        </member>
        <member name="P:KS.Reactor.Client.ksFrameInfo.AmountReceived">
            Number of bytes downloaded for the frame.
        </member>
        <member name="P:KS.Reactor.Client.ksFrameInfo.Progress">
            Amount of frame downloaded from 0 to 1.
        </member>
        <member name="M:KS.Reactor.Client.ksFrameInfo.#ctor(System.Int32,System.Int32)">
            Constructor
            
            @param   int size of frame in bytes.
            @param   int amountReceived in bytes.
        </member>
        <member name="T:KS.Reactor.Client.ksInputMarshaller">
            Sends updates to inputs and notifies registrars when inputs they have registered have changed by setting their
            StateDirty flag. Each room has its own input and registrar that is registered with the marshaller.
        </member>
        <member name="M:KS.Reactor.Client.ksInputMarshaller.#ctor">
            Constructor
        </member>
        <member name="M:KS.Reactor.Client.ksInputMarshaller.AddRegistrar(KS.Reactor.ksInputRegistrar,KS.Reactor.ksInput)">
            Adds a registrar to the list of registrars to notify about input updates.
            
            @param   ksInputRegistrar registrar to add.
            @param   ksInput input to add.
        </member>
        <member name="M:KS.Reactor.Client.ksInputMarshaller.RemoveRegistrar(KS.Reactor.ksInputRegistrar)">
            Removes a registrar from the list of registrars to notify about input updates.
            
            @param   ksInputRegistrar registrar to remove.
        </member>
        <member name="M:KS.Reactor.Client.ksInputMarshaller.SetButton(System.UInt32,System.Boolean)">
            Updates a button's state. If the state changed, sets StateDirty on all registrars with that button registered.
            
            @param   uint button to update.
            @param   bool down - true if the button is down.
        </member>
        <member name="M:KS.Reactor.Client.ksInputMarshaller.SetAxis(System.UInt32,System.Single)">
            Sets the value of an axis. If the value changed, sets StateDirty on all registrars with that axis registered.
            
            @param   uint axis to set value of.
            @param   float value to set.
        </member>
        <member name="T:KS.Reactor.Client.ksIPredictor">
            <summary>Predictor interface for smoothing/predicting entity movement and properties.</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksIPredictor.RequiresController">
            <summary>Does the predictor require a player controller?</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksIPredictor.Initialize(KS.Reactor.Client.ksBaseRoom,KS.Reactor.Client.ksBaseEntity)">
            <summary>Initializes the predictor.</summary>
            <param name="room">The room object.</param>
            <param name="entity">
            Entity the predictor is smoothing. Null if the predictor is smoothing room or player properties.
            </param>
            <returns>False if the predictor could not be initialized and needs to be removed.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksIPredictor.CleanUp">
            <summary>Performs clean up.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksIPredictor.AddProperty(System.UInt32,KS.Reactor.ksMultiType,KS.Reactor.Client.ksPredictionBehaviour)">
            <summary>Initializes smoothing for a property. Called once per property that will be smoothed.</summary>
            <param name="propertyId">Id of property that will be smoothed.</param>
            <param name="value">Property value.</param>
            <param name="smoothingData">Smoothing data for property prediction.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksIPredictor.ServerUpdate(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType},System.Boolean,System.Boolean)">
            <summary>Called once per server frame.</summary>
            <param name="state">
            Server transform and velocity data. Velocity data is currently not synced and is always zero. Null if not
            smoothing a transform.
            </param>
            <param name="properties">
            Smoothed properties whose values changed since the last frame. Null if no properties have changed.
            </param>
            <param name="teleport">Did the entity teleport?</param>
            <param name="idle">True if there were no transform or property changes since the last frame.</param>
            <returns>
            If false and <paramref name="idle"/> is true, this function will not be called again until the server
            transform or a server property changes.
            </returns>
        </member>
        <member name="M:KS.Reactor.Client.ksIPredictor.ClientUpdate(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType})">
            <summary>Updates the client transform and properties.</summary>
            <param name="state">
            Client transform and velocity to update with new values. Null if not smoothing a transform.
            </param>
            <param name="properties">
            Smoothed client properties to update with new values. Null if there are no smoothed properties.
            </param>
            <returns>
            If false, this function will not be called again until the server transform or a server property changes.
            </returns>
        </member>
        <member name="M:KS.Reactor.Client.ksIPredictor.InputUpdate(KS.Reactor.ksInput)">
            <summary>
            Called when a new frame of input is generated. Only called for entities with player controllers.
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="T:KS.Reactor.Client.ksITimeAdjuster">
            Interface for synchronizing time with the server.
        </member>
        <member name="M:KS.Reactor.Client.ksITimeAdjuster.Initialize">
            Initialization
        </member>
        <member name="M:KS.Reactor.Client.ksITimeAdjuster.OnServerUpdate(System.Single,System.Single,System.UInt64)">
            Called once per server update.
            
            @param   float deltaTime in seconds of server simulation time (scaled) since the last update.
            @param   float unscaledDeltaTime in seconds of server time since the last update.
            @param   ulong frameNum from the server.
        </member>
        <member name="M:KS.Reactor.Client.ksITimeAdjuster.OnClientUpdate(System.Single,System.Single)">
            Called once per frame to adjust deltaTime to stay in sync with the server.
            
            @param   float deltaTime in seconds of simulation time (scaled and adjusted by previous time adjusters) since
                     last frame.
            @param   float realDeltaTime in seconds of real time (unscaled) since last frame.
            @return  float adjusted delta time in seconds.
        </member>
        <member name="T:KS.Reactor.Client.ksLinearPredictor">
            <summary>Smooths/predicts movement using linear interpolation and extrapolation.</summary>
        </member>
        <member name="T:KS.Reactor.Client.ksLinearPredictor.ConfigData">
            <summary>
            Contains parameters for tuning transform and property smoothing. If a smoothed property does not have a
            correction rate set, <see cref="F:KS.Reactor.Client.ksLinearPredictor.ConfigData.PositionCorrectionRate"/> will be used if it is linearly interpolated, and
            <see cref="F:KS.Reactor.Client.ksLinearPredictor.ConfigData.RotationCorrectionRate"/> will be used if it is spherically interpolated. If the property uses
            wrap float interpolation and has no rate set, it will use the difference between the min and the max range
            values.
            </summary>
        </member>
        <member name="P:KS.Reactor.Client.ksLinearPredictor.ConfigData.Default">
            <summary>Default configuration values. Values can be changed to change the defaults.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksLinearPredictor.ConfigData.PositionCorrectionRate">
            <summary>Position-correction interpolation rate per second.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksLinearPredictor.ConfigData.RotationCorrectionRate">
            <summary>Rotation-correction interpolation rate in degrees per second.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksLinearPredictor.ConfigData.ScaleCorrectionRate">
            <summary>Scale-correction interpolation rate per second.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ConfigData.GetPropertyCorrectionRate(System.UInt32,System.Single)">
            <summary>Gets the correction interpolation rate for a property.</summary>
            <param name="propertyId">Id of property to get correction interpolation rate for.</param>
            <param name="defaultRate">Value to return if the property has no rate set.</param>
            <returns>Correction interpolation rate per second for the property.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ConfigData.SetPropertyCorrectionRate(System.UInt32,System.Single)">
            <summary>Sets the correction interpolation rate for a property.</summary>
            <param name="propertyId">Id of property to set correction interpolation rate for.</param>
            <param name="rate">Rate to set.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ConfigData.Clone">
            <summary>Creates a copy of this <see cref="T:KS.Reactor.Client.ksLinearPredictor.ConfigData"/>.</summary>
            <returns>Copy of the config.</returns>
        </member>
        <member name="P:KS.Reactor.Client.ksLinearPredictor.Config">
            <summary>
            Configurable data for customizing the the predictor. Returns null if the predictor is using the
            <see cref="P:KS.Reactor.Client.ksLinearPredictor.ConfigData.Default"/>. Assign this if you want to override the defaults.
            </summary>
        </member>
        <member name="P:KS.Reactor.Client.ksLinearPredictor.RequiresController">
            <summary>Always false; the linear predictor does not require a player controller.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Create">
            <summary>Gets a linear predictor instance from the pool, or creates one if the pool is empty.</summary>
            <returns>Predictor instance</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.#ctor">
            <summary>Private constructor. Forces use of object pooling via <see cref="M:KS.Reactor.Client.ksLinearPredictor.Create"/>.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Initialize(KS.Reactor.Client.ksBaseRoom,KS.Reactor.Client.ksBaseEntity)">
            <summary>Initializes the predictor.</summary>
            <param name="room">The room object.</param>
            <param name="entity">
            Entity the predictor is smoothing. Null if the predictor is smoothing room or player properties.
            </param>
            <returns>False if the predictor could not be initialized and needs to be removed.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.CleanUp">
            <summary>Resets member variables and return the LinearPredictor to an object pool.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.AddProperty(System.UInt32,KS.Reactor.ksMultiType,KS.Reactor.Client.ksPredictionBehaviour)">
            <summary>Initializes smoothing for a property. Called once per property that will be smoothed.</summary>
            <param name="propertyId">Id of property that will be smoothed.</param>
            <param name="value">Property value.</param>
            <param name="smoothingData">Smoothing data for property prediction.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ServerUpdate(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType},System.Boolean,System.Boolean)">
            <summary>Called once per server frame.</summary>
            <param name="state">
            Server transform and velocity data. Velocity data is currently not synced and is always zero. Null if not
            smoothing a transform.
            </param>
            <param name="properties">
            Smoothed properties whose values changed since the last frame. Null if no properties have changed.
            </param>
            <param name="teleport">Did the entity teleport?</param>
            <param name="idle">True if there were no transform or property changes since the last frame.</param>
            <returns>
            If false and <paramref name="idle"/> is true, this function will not be called again until the server
            transform or a server property changes.
            </returns>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ClientUpdate(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType})">
            <summary>Updates the client transform and properties.</summary>
            <param name="state">
            Client transform and velocity to update with new values. Null if not smoothing a transform.
            </param>
            <param name="properties">
            Smoothed client properties to update with new values. Null if there are no smoothed properties.
            </param>
            <returns>
            If false, this function will not be called again until the server transform or a server property changes.
            </returns>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.InputUpdate(KS.Reactor.ksInput)">
            <summary>
            Called when a new frame of input is generated. Only called for entities with player controllers.
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Advance(System.UInt64,System.Single)">
            <summary>Advances the client simultion.</summary>
            <param name="frameNum">
            Server frame number to advance to. ulong.Max if we are extrapolating passed the last frame.
            </param>
            <param name="time">Time in seconds to advance to in the frame.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.SetServerValues(KS.Reactor.Client.ksLinearPredictor.Frame)">
            <summary>Initializes the smoothers, checking if correction interpolation is needed.</summary>
            <param name="frame">Initial server frame.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.IterateSmoothers">
            <summary>Iterates the smoothers.</summary>
            <returns>Iterator</returns>
        </member>
        <member name="T:KS.Reactor.Client.ksLinearPredictor.Frame">
            <summary>Server frame data.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksLinearPredictor.Frame.State">
            <summary>Server transform and velocity state.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksLinearPredictor.Frame.Properties">
            <summary>Server properties that changed since the last frame.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksLinearPredictor.Frame.DeltaTime">
            <summary>Server delta time in seconds since the last frame.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksLinearPredictor.Frame.Num">
            <summary>Server frame number.</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksLinearPredictor.Frame.Teleport">
            <summary>Did the entity teleport this frame?</summary>
        </member>
        <member name="F:KS.Reactor.Client.ksLinearPredictor.Frame.Idle">
            <summary>True if there were no transform or property changes since the last frame.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Frame.#ctor(KS.Reactor.Client.ksPhysicsState,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType},System.Single,System.UInt64,System.Boolean,System.Boolean)">
            <summary>Constructor</summary>
            <param name="state">Server transform and velocity state.</param>
            <param name="properties">Server properties that changed since the last frame.</param>
            <param name="deltaTime">Server delta time in seconds since the last frame.</param>
            <param name="num">Server frame number.</param>
            <param name="teleport">Did the entity teleport this frame?</param>
            <param name="idle">True if there were no transform or property changes since the last frame.</param>
        </member>
        <member name="T:KS.Reactor.Client.ksLinearPredictor.ISmoother">
            <summary>Interface for smoothing a ksMultiType.</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksLinearPredictor.ISmoother.Correcting">
            <summary>Are we applying correcting interpolation?</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.CleanUp">
            <summary>Resets member variables and return the smoother to an object pool.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.GetValue">
            <returns>Smoothed value.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.SetClientValue(KS.Reactor.ksMultiType)">
            <summary>Sets the smoothed value.</summary>
            <param name="value">Value</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.StoreValue">
            <summary>Sets last value to the target.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.Interpolate(System.Single)">
            Interpolates towards the server value.
             <param name="t">Amount to interpolate between 0 and 1.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.FinishInterpolation">
            <summary>Moves to the server value.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.CheckCorrection">
            <summary>
            Checks if correction interpolation is needed by checking if the target value and the client value are
            different.
            </summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.ApplyCorrection(System.Single)">
            <summary>Applies correction interpolation.</summary>
            <param name="deltaTime">Time in seconds since the last update.</param>
            <returns>True if interpolation correction is still needed.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.Update(System.Single)">
            <summary>Updates the client value.</summary>
            <param name="deltaTime">Time in seconds since the last update.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.SetServerValue(KS.Reactor.ksMultiType)">
            <summary>Sets the initial server value and checks if correction interpolation is needed.</summary>
            <param name="serverValue">Value</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.SetNextValue(KS.Reactor.ksMultiType,System.Single,System.Boolean)">
            <summary>
            Sets the next server value to interpolate to and initializes interpolation. Calculates velocity.
            </summary>
            <param name="nextValue">Next value to interpolate to.</param>
            <param name="deltaTime">Time in seconds to reach the next value.</param>
            <param name="teleport">If true, will teleport to the value instead of interpolating.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.ISmoother.Idle">
            <summary>Stops moving the value.</summary>
        </member>
        <member name="T:KS.Reactor.Client.ksLinearPredictor.Smoother`3">
            <summary>Smooths a templated type using a templated <see cref="T:KS.Reactor.Client.ISpace`2"/>.</summary>
            <typeparam name="Vector">The type of value being smoothed.</typeparam>
            <typeparam name="Delta">
            The type returned when subtracting a <see cref="!:Vector"/> from another <see cref="!:Vector"/>.
            </typeparam>
            <typeparam name="Space">The <see cref="T:KS.Reactor.Client.ISpace`2"/> implementation type.</typeparam>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.Create(System.Single)">
            <summary>Reuses a smoother from the object pool or creates a new one if the pool is empty.</summary>
            <param name="correctionRate">Rate per second for correction interpolation.</param>
            <returns>Smoother</returns>
        </member>
        <member name="P:KS.Reactor.Client.ksLinearPredictor.Smoother`3.Correcting">
            <summary>Are we applying correction interpolation?</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.Initialize(System.Single)">
             <summary>Initializes the smoother with a correction rate.</summary>
            <param name="correctionRate">Rate per second for correction interpolation.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.CleanUp">
            <summary>Resets member variables and return the smoother to an object pool.</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksLinearPredictor.Smoother`3.ServerValue">
            <summary>Server value.</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksLinearPredictor.Smoother`3.Value">
            <summary>Smoothed value.</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksLinearPredictor.Smoother`3.Velocity">
            <summary>Extrapolated rate of change per second.</summary>
        </member>
        <member name="P:KS.Reactor.Client.ksLinearPredictor.Smoother`3.VectorSpace">
            <summary>Vector space instance.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.GetValue">
            <returns>Smoothed value.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.SetClientValue(KS.Reactor.ksMultiType)">
            <summary>Sets the smoothed value.</summary>
            <param name="value">Value</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.StoreValue">
            <summary>Sets last value to the target.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.Interpolate(System.Single)">
            <summary>Interpolates towards the server value.</summary>
            <param name="t">Amount to interpolate between 0 and 1.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.FinishInterpolation">
            <summary>Moves to the server value.</summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.CheckCorrection">
            <summary>
            Checks if correction interpolation is needed by checking if the target value and the client value are
            different.
            </summary>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.ApplyCorrection(System.Single)">
            <summary>Applies correction interpolation.</summary>
            <param name="deltaTime">Time in seconds since last update.</param>
            <returns>True if interpolation correction is still needed.</returns>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.Update(System.Single)">
            <summary>Updates the client value.</summary>
            <param name="deltaTime">Time in seconds since last update.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.SetServerValue(KS.Reactor.ksMultiType)">
            <summary>Sets the initial server value and checks if correction interpolation is needed.</summary>
            <param name="serverValue">Value</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.SetServerValue(`0)">
            <summary>Sets the initial server value and checks if correction interpolation is needed.</summary>
            <param name="serverValue">Value</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.SetNextValue(KS.Reactor.ksMultiType,System.Single,System.Boolean)">
            <summary>
            Sets the next server value to interpolate to and initializes interpolation. Calculates velocity.
            </summary>
            <param name="nextValue">Next value to interpolate to.</param>
            <param name="deltaTime">Time in seconds to reach the next value.</param>
            <param name="teleport">If true, will teleport to the value instead of interpolating.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.SetNextValue(`0,System.Single,System.Boolean)">
            <summary>
            Sets the next server value to interpolate to and initializes interpolation. Calculates velocity.
            </summary>
            <param name="nextValue">Next value to interpolate to.</param>
            <param name="deltaTime">Time in seconds to reach the next value.</param>
            <param name="teleport">If true, will teleport to the value instead of interpolating.</param>
        </member>
        <member name="M:KS.Reactor.Client.ksLinearPredictor.Smoother`3.Idle">
            <summary>Stops moving the value.</summary>
        </member>
        <member name="T:KS.Reactor.Client.ksNetCounters">
            Network counters
        </member>
        <member name="M:KS.Reactor.Client.ksNetCounters.Add(KS.Reactor.Client.ksNetCounters.CounterType,System.UInt64)">
            Add an amount to a specific counter
            
            @param   CounterType - Counter Type
            @param   ulong - Amount
        </member>
        <member name="M:KS.Reactor.Client.ksNetCounters.Get(KS.Reactor.Client.ksNetCounters.CounterType)">
            Get the amount of a specific counter
            
            @param   CounterType - Counter Type
            @return  ulong - Amount
        </member>
        <member name="M:KS.Reactor.Client.ksNetCounters.Clear">
            Reset all counters
        </member>
        <member name="T:KS.Reactor.Client.ksPhysicsState">
            Physics state
        </member>
        <member name="M:KS.Reactor.Client.ksPhysicsState.Clone">
            @return  PhysicsState a copy of this physics state.
        </member>
        <member name="T:KS.Reactor.Client.ksPlayerControllerFactory">
            Factory for creating player controllers from uint types.
        </member>
        <member name="M:KS.Reactor.Client.ksPlayerControllerFactory.RegisterFromAssembly(System.Reflection.Assembly)">
            Registers all player controllers in an assembly using reflection.
            
            @param   Assembly assembly to load from.
        </member>
        <member name="M:KS.Reactor.Client.ksPlayerControllerFactory.Register(System.Type)">
            Registers a ksPlayerController class so it can be created from it's uint type.
            
            @param   Type type of ksPlayerController to register.
            @return  bool true if the controller was registered successfully.
        </member>
        <member name="M:KS.Reactor.Client.ksPlayerControllerFactory.Create(System.UInt32)">
            Creates a player controller.
            
            @param   uint type of controller to create.
            @return  ksPlayerController created, or null if unsuccessful.
        </member>
        <member name="T:KS.Reactor.Client.ksPredictionBehaviour">
            Contains rules for how a property behaves during prediction
        </member>
        <member name="T:KS.Reactor.Client.ksPredictionBehaviour.Types">
            Prediction rules to use on the client.
            
            NONE                 Do not interpolate.
            LINEAR_FLOAT         Use linear interpolation on float.
            LINEAR_VECTOR2       Use linear interpolation on ksVector2.
            LINEAR_VECTOR3       Use linear interpolation on ksVector3.
            LINEAR_COLOR         Use linear interpolation on ksColor.
            WRAP_FLOAT           Use linear interpolation on float and wrap onto [min, max].
            SPHERICAL_VECTOR2    Use spherical interpolation on ksVector2.
            SPHERICAL_VECTOR3    Use spherical interpolation on ksVector3.
            QUATERNION           Use spherical interpolation on ksQuaternion.
            CLIENT               The client player controller has full control over the local property value. If the
                                 controller does not set the property value, the server value is used. The server is
                                 still authoritative; the client does not decide what other clients see.
        </member>
        <member name="F:KS.Reactor.Client.ksPredictionBehaviour.Min">
            Minimum property value.
        </member>
        <member name="F:KS.Reactor.Client.ksPredictionBehaviour.Max">
            Maximum property value.
        </member>
        <member name="F:KS.Reactor.Client.ksPredictionBehaviour.Type">
            Type of smoothing to use.
        </member>
        <member name="M:KS.Reactor.Client.ksPredictionBehaviour.#ctor(KS.Reactor.Client.ksPredictionBehaviour.Types,System.Single,System.Single)">
            Constructor
            
            @param   Types - Type of smoothing to use during prediction
            @param   float - Min value use for Types.WRAP_FLOAT
            @param   float - Max value use for Types.WRAP_FLOAT
        </member>
        <member name="T:KS.Reactor.Client.ksPredictorUtils">
            Client-side prediction utils.
        </member>
        <member name="T:KS.Reactor.Client.ksPredictorUtils.PhysicsFlags">
            Flags for controlling what physics to simulate.
        </member>
        <member name="M:KS.Reactor.Client.ksPredictorUtils.UpdateController(KS.Reactor.Client.ksBaseEntity,System.Single,KS.Reactor.ksInput,KS.Reactor.Client.ksPredictorUtils.PhysicsFlags)">
            Updates a transform based on a player controller update.
            
            @param   ksBaseEntity entity with player controller to update.
            @param   float deltaTime in seconds.
            @param   ksInput input for the controller. If null, the current input will be used.
            @param   PhysicsFlags flags to determine what physics to simulate.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksPredictorUtils.ApplyClientProperties(KS.Reactor.Client.ksBaseEntity,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType})" -->
        <member name="M:KS.Reactor.Client.ksPredictorUtils.SweepAndSlide(KS.Reactor.Client.ksBaseEntity,KS.Reactor.ksVector3,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion)">
            Attempts to move an entity from one position to another by performing a sweep. If it collides
            with something, it will slide perpendicular to the surface normal of the collision by calling
            this function recursively.
            
            @param   ksBaseEntity entity to sweep.
            @param   ksVector3 from - start position.
            @param   ksVector3 to - target position.
            @param   ksQuaternion rotation.
            @return  ksVector3 end position.
        </member>
        <member name="M:KS.Reactor.Client.ksPredictorUtils.SweepAndSlide(KS.Reactor.Client.ksBaseEntity,KS.Reactor.ksVector3,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksVector3,System.Int32)">
            Attempts to move the entity from one position to another by performing a sweep. If it collides
            with something, it will slide perpendicular to the surface normal of the collision by calling
            this function recursively.
            
            @param   ksBaseEntity entity to sweep.
            @param   ksVector3 from - start position.
            @param   ksVector3 to - target position.
            @param   ksQuaternion rotation.
            @param   ksVector3 originalDirection of movement before and sliding.
            @param   int maxIterations - number of times this can be called recursively.
            @return  ksVector3 end position.
        </member>
        <member name="T:KS.Reactor.Client.ksService">
            Main entry point to connect to the service.
        </member>
        <member name="P:KS.Reactor.Client.ksService.AppDataPath">
            Path to write app data to.
        </member>
        <member name="P:KS.Reactor.Client.ksService.KinematicSoupPath">
            Path to KinematicSoup folder.
        </member>
        <member name="P:KS.Reactor.Client.ksService.StaticModelPath">
            Path to static model.
        </member>
        <member name="P:KS.Reactor.Client.ksService.ModelChecksum">
            Model checksum
        </member>
        <member name="P:KS.Reactor.Client.ksService.ModelData">
            Model data
        </member>
        <member name="P:KS.Reactor.Client.ksService.Coroutines">
            Coroutine manager
        </member>
        <member name="P:KS.Reactor.Client.ksService.InputMarshaller">
            Input Marshaller
        </member>
        <member name="P:KS.Reactor.Client.ksService.PlayerControllerFactory">
            Player Controller Factory
        </member>
        <member name="P:KS.Reactor.Client.ksService.WebRequestFactory">
            Factory for providing custom ksIWebRequest implementations.
        </member>
        <member name="P:KS.Reactor.Client.ksService.PlayerAPI">
            Player account API
        </member>
        <member name="P:KS.Reactor.Client.ksService.Rooms">
            List of rooms we are connected or connecting to.
        </member>
        <member name="M:KS.Reactor.Client.ksService.#ctor">
            Constructor
        </member>
        <member name="M:KS.Reactor.Client.ksService.CoroutineWebRequestHandler(System.String,System.Net.WebHeaderCollection,System.String,KS.Reactor.ksJSON,KS.Reactor.ksWebResponse.Handler,System.Object)">
            This alternative web request handler manages the request with the coroutine manager therefore ensuring the
            completion handler is called on the main update thread.
            
            @param   string - URL
            @param   WebHeaderCollection - additional request headers
            @param   string - request method
            @param   ksJSON - post request data
            @param   ksWebResponse.Handler - request callback
            @param   object - state object returned in the callback
            @return  null
        </member>
        <member name="M:KS.Reactor.Client.ksService.Disconnect(System.Boolean)">
            Disconnects from all rooms.
            
            @param   bool immediate - if false, waits for pending writes before disconnecting.
        </member>
        <member name="M:KS.Reactor.Client.ksService.JoinRoom(KS.Reactor.Client.ksBaseRoom,KS.Reactor.ksPlayerAPI.Session,KS.Reactor.ksMultiType[])">
            Connects to a room.
            
            @param   ksBaseRoom room to join.
            @param   ksPlayerAPI.Session player session credentials.
            @param   params ksMultiType[] authentication arguments
            @return  bool false if a connection attempt was not made because of invalid parameters or because we're
                     already connected or connecting to the room.
        </member>
        <member name="M:KS.Reactor.Client.ksService.HasConnection(KS.Reactor.Client.ksBaseRoom)">
            Test if the service already has a connection to a room
            
            @param   ksBaseRoom room
            @return  bool
        </member>
        <member name="M:KS.Reactor.Client.ksService.LeaveRoom(KS.Reactor.Client.ksBaseRoom,System.Boolean)">
            Disconnects from a room.
            
            @param   ksBaseRoom room to leave.
            @param   bool immediate - if false, waits for pending writes before disconnecting.
        </member>
        <member name="M:KS.Reactor.Client.ksService.GetServers(System.String,System.String,KS.Reactor.Client.ksService.RoomListCallback)">
            Request a list of running server instances
            
            @param   string - url
            @param   string - image binding
            @param   RoomListCallback - callback
        </member>
        <member name="M:KS.Reactor.Client.ksService.Update(System.Single,System.Single)">
            Called each frame.
            
            @param   float deltaTime - game time in seconds since the last update.
            @param   float realDeltaTime - real time in seconds since the last update. If less than zero, will be
                     calculated.
        </member>
        <member name="M:KS.Reactor.Client.ksService.OnRoomStateChange(KS.Reactor.Client.ksBaseRoom,KS.Reactor.Client.ksBaseRoom.ConnectionStates)">
            Called when a room connection state changes
            
            @param   ksBaseRoom - room the connection attempt was for.
            @param   ksBaseRoom.ConnectionStates -  status of the connection.
        </member>
        <member name="M:KS.Reactor.Client.ksService.SetStaticModel(System.IO.Stream,System.Boolean)">
            Set static model.
            
            @param   Stream modelStream to read model from
            @param   bool saveToFile
        </member>
        <member name="T:KS.Reactor.Client.ksTCPConnection">
            Network stream connection using sockets and the TCP protocol.
        </member>
        <member name="T:KS.Reactor.Client.ksTCPConnection.ConfigSettings">
            Configuration options for TCP connections
        </member>
        <member name="P:KS.Reactor.Client.ksTCPConnection.Config">
            Configuration settings used for new TCP connections.
        </member>
        <member name="P:KS.Reactor.Client.ksTCPConnection.IsConnected">
            Check if a connection to the server is open.
            
            @return  bool
        </member>
        <member name="P:KS.Reactor.Client.ksTCPConnection.ReadProgress">
            Get the progress of the current read operation.
            
            @return  ksFrameInfo
        </member>
        <member name="P:KS.Reactor.Client.ksTCPConnection.WriteProgress">
            Get the progress of the current write operation.
            
            @return  ksFrameInfo
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.#ctor">
            Constructor
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.Connect(System.String,System.UInt16,KS.Reactor.Client.ksConnection.ConnectHandler,System.Object)">
            Establish a connection to a server.
            
            @param   string - server host name
            @param   ushort - server port
            @param   ConnectHandler - callback to invoke when the connection attempt completes
            @param   object - asynchronous state
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.Disconnect(System.Boolean)">
            Disconnect from the server.
            
            @param   bool - immediate. If this is false, then queued write operations will complete before disconnecting.
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.Read(KS.Reactor.ksStreamBuffer.Segment,KS.Reactor.Client.ksConnection.IOHandler,System.Object)">
            Read data from the connection into a stream buffer segment.
            
            @param   ksStreamBuffer.Segment - segment of a larger stream buffer
            @param   IOHandler - callback to invoke when the read operation completes
            @param   object - asynchronous state
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.Write(KS.Reactor.ksStreamBuffer.Segment,KS.Reactor.Client.ksConnection.IOHandler,System.Object)">
            Write data to the socket.
            
            @param   ksStreamBuffer.Segment - segment of a larger stream buffer
            @param   IOHandler - callback to invoke when the write operation completes
            @param   object - asynchronous state
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.HandleAsyncConnect(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            Handle a connect event from the TCP socket by calling the connect handler.
            
            @param   object - socket that attempted the connection
            @param   SocketAsyncEventArgs - async event argurments
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.IOExecute(KS.Reactor.Client.ksConnection.IOOperation)">
            Execute an asynchronous IO operation.
            
            @param   IOOperation - IO operation
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.IOContinue(System.Net.Sockets.SocketAsyncEventArgs)">
            Check the async event arguments and call the appropriate async action on the socket.
            
            @param   SocketAsyncEventArgs - async event argurments
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.IOComplete(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            Handle the completion of a socket action.
            
            @param   object - socket attempted the IO action
            @param   SocketAsyncEventArgs - async event argurments
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.Disconnect(System.Net.Sockets.SocketError)">
            Handle a disconnection error/completion event.
            
            @param   SocketError - Reason for disconnect
        </member>
        <member name="M:KS.Reactor.Client.ksTCPConnection.DiagnoseConnectionFailure(System.String,System.UInt16)">
            Diagnose Connection Failure to the server.
            
            @param   string - host
            @param   ushort - port
            @return  string - error (null if no connection errors could be determined)
        </member>
        <member name="T:KS.Reactor.Client.ksTimeKeeper">
            Smoothly adjusts client time deltas to keep in sync with the server. Controls time values that determine how far
            predictors should interpolate/extrapolate the server frame data. 
        </member>
        <member name="T:KS.Reactor.Client.ksTimeKeeper.Frame">
            Server frame timing data.
        </member>
        <member name="F:KS.Reactor.Client.ksTimeKeeper.Frame.DeltaTime">
            Delta time of frame in seconds.
        </member>
        <member name="F:KS.Reactor.Client.ksTimeKeeper.Frame.Num">
            Frame number
        </member>
        <member name="M:KS.Reactor.Client.ksTimeKeeper.Frame.#ctor(System.Single,System.UInt64)">
            Constructor
            
            @param   float deltaTime in seconds.
            @param   ulong num - frame number.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.Drift">
            How far ahead or behind in seconds we've drifted from the target latency. Each server frame received
            decreases this number.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.TargetLatency">
            How far behind each server frame we try to be when that server frame arrives. Increasing reduces the
            likelyhood of getting ahead of the latest server frame, which increases client simulation accuracy as we
            won't have to extrapolate object transforms as often, but it also increases latency. By default this is set
            to zero to favour the lowest latency possible.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.MinAdjustmentDuration">
            Minimum duration of time adjustment in seconds. Time adjustments are applied over multiple frames to make
            the adjustment smooth. The adjustment duration is the larger of this amount or twice the time being
            corrected, unless the time correction exceeds max drift, in which case we do a near-instant time adjustment.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.DriftThreshold">
            Drift theshold in seconds to try keep the drift within. Smaller values will trigger time adjustments more
            frequently.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.NumDriftExceeds">
            Number of consecuitive drift samples exceeding the threshold needed to trigger time correction.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.MaxDrift">
            Max drift behind the server in seconds before applying a near-instant time correction. The adjustment still
            takes multiple frames so if more server frames arrive before we finish the adjustment, we increase the time
            correction and time adjustment duration to include them rather than doing multiple instant adjustments.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.Extrapolating">
            Are we extrapolating passed the last frame?
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.FrameNum">
            Frame number for the server frame we are currently interpolating. ulong.MaxValue if we are extrapolating.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.TimeOffset">
            How long in seconds we are extrapolating or interpolating in the current frame.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.LastFrameNum">
            Frame number for the server frame we were interpolating last update.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.LastTimeOffset">
            How long in seconds we were extrapolating or interpolating last update.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeKeeper.TimeCorrection">
            Amount in seconds time is being corrected by.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeKeeper.Initialize">
            Initialization
        </member>
        <member name="M:KS.Reactor.Client.ksTimeKeeper.OnServerUpdate(System.Single,System.Single,System.UInt64)">
            Called once per server update. Updates drift and checks if we need to initiate a time correction.
            
            @param   float deltaTime in seconds of server simulation time (scaled) since the last update.
            @param   float unscaledDeltaTime in seconds of server time since the last update.
            @param   ulong frameNum from the server.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeKeeper.OnClientUpdate(System.Single,System.Single)">
            Called once per frame to adjust deltaTime to stay in sync with the server. Advances time offset and frame
            num for predictor interpolation/extrapolation.
            
            @param   float deltaTime in seconds of simulation time (scaled and adjusted by previous time adjusters) since
                     last frame.
            @param   float realDeltaTime in seconds of real time (unscaled) since last frame.
            @return  float adjusted delta time in seconds.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeKeeper.UpdateExceedCount">
            Updates exceed count (number of consecuitive drifts exceeded the threshold).
        </member>
        <member name="M:KS.Reactor.Client.ksTimeKeeper.Advance(System.Single)">
            Advances the current frame and interpolation/extrapolation time.
            
            @param   float deltaTime in seconds to advance by.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeKeeper.GetAdjustment(System.Single)">
            Calculates time adjusted for time correction.
            
            @param   float time - how long we have been adjusting time.
            @return  float amount to adjust time by.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeKeeper.AdjustDeltaTime(System.Single)">
            Adjusts deltaTime for time correction. Time is adjusted using a sine wave so the adjustment smoothly starts
            and stops.
            
            @param   float deltaTime to adjust.
            @return  float adjusted delta time.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeKeeper.InitTimeCorrection(System.Single)">
            Initializes time correction.
            
            @param   float timeCorrection in seconds.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ksTimeKeeper.CheckTimeCorrection(System.Int32)" -->
        <member name="T:KS.Reactor.Client.ksTimeRestrainer">
            Simple time synchronizer that slows down and eventually stops incrementing time after long periods with no
            updates from the server.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeRestrainer.SlowTime">
            Real time in seconds after which extrapolation rate slows down if no server updates are received.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeRestrainer.MaxTime">
            Real time in seconds after which extrapolation stops if no server updates are received.
        </member>
        <member name="P:KS.Reactor.Client.ksTimeRestrainer.ExtrapolationTime">
            How long we've been extrapolating without a server update in seconds.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeRestrainer.#ctor(System.Single,System.Single)">
            Constructor
            
            @param   slowTime - time in seconds after which extrapolation rate slows down if no server updates are received.
            @param   maxTime - time in seconds after which extrapolation stops if no server updates are received.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeRestrainer.#ctor">
            Constructor
        </member>
        <member name="M:KS.Reactor.Client.ksTimeRestrainer.Initialize">
            Initialization
        </member>
        <member name="M:KS.Reactor.Client.ksTimeRestrainer.OnServerUpdate(System.Single,System.Single,System.UInt64)">
            Called once per server update.
            
            @param   @param   float deltaTime in seconds of server simulation time (scaled) since the last update.
            @param   float unscaledDeltaTime in seconds of server time since the last update.
            @param   ulong frameNum from the server.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeRestrainer.OnClientUpdate(System.Single,System.Single)">
            Called once per frame to adjust deltaTime to stay in sync with the server.
            
            @param   float deltaTime in seconds of simulation time (scaled and adjusted by previous time adjusters) since
                     last frame.
            @param   float realDeltaTime in seconds of real time (unscaled) since last frame.
            @return  float adjusted delta time in seconds.
        </member>
        <member name="M:KS.Reactor.Client.ksTimeRestrainer.AdjustTime(System.Single)">
            Adjusts extrapolation time to slow down extrapolation rate when extrapolation runs longer than m_slowTime.
            
            @param   float time - duration of extrapolation.
            @return  float adjusted extrapolation time.
        </member>
        <member name="T:KS.Reactor.Client.ksVersion">
            Version number consistig of major, minor, revision, and build.
        </member>
        <member name="P:KS.Reactor.Client.ksVersion.Current">
            Current API version.
        </member>
        <member name="P:KS.Reactor.Client.ksVersion.Major">
            Major number
        </member>
        <member name="P:KS.Reactor.Client.ksVersion.Minor">
            Minor number
        </member>
        <member name="P:KS.Reactor.Client.ksVersion.Revision">
            Revision number
        </member>
        <member name="P:KS.Reactor.Client.ksVersion.Build">
            Build number
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            Constructor
            
            @param   uint major number
            @param   uint minor number
            @param   uint revision number
            @param   uint build number
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.FromString(System.String)">
            Constructs a ksVersion from a version string.
            
            @param   string versionString consisting of major, minor, revision, and build seperated by '.' or '-'.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.Parse(System.String)">
            Sets version numbers by parsing a version string.
            
            @param   string versionString to parse.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.CreateException(System.String)">
            Creates an ArgumentException.
            
            @param   string version string that triggered the exception.
            @return  ArgumentException
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.ToString">
            @return  string version string.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.op_Equality(KS.Reactor.Client.ksVersion,KS.Reactor.Client.ksVersion)">
            Checks if two versions are the same.
            
            @param   ksVersion lhs
            @param   ksVersion rhs
            @return  bool true if the versions are the same.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.op_Inequality(KS.Reactor.Client.ksVersion,KS.Reactor.Client.ksVersion)">
            Checks if two versions are different.
            
            @param   ksVersion lhs
            @param   ksVersion rhs
            @return  bool true if the versions are different.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.op_LessThan(KS.Reactor.Client.ksVersion,KS.Reactor.Client.ksVersion)">
            Checks if a version is older than another.
            
            @param   ksVersion lhs
            @param   ksVersion rhs
            @return  bool true if lhs is older than rhs.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.op_LessThanOrEqual(KS.Reactor.Client.ksVersion,KS.Reactor.Client.ksVersion)">
            Checks if a version is older or equal to another.
            
            @param   ksVersion lhs
            @param   ksVersion rhs
            @return  bool true if lhs is older or equal to rhs.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.op_GreaterThan(KS.Reactor.Client.ksVersion,KS.Reactor.Client.ksVersion)">
            Checks if a version is newer than another.
            
            @param   ksVersion lhs
            @param   ksVersion rhs
            @return  bool true if lhs is newer than rhs.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.op_GreaterThanOrEqual(KS.Reactor.Client.ksVersion,KS.Reactor.Client.ksVersion)">
            Checks if a version is newer or equal to another.
            
            @param   ksVersion lhs
            @param   ksVersion rhs
            @return  bool true if lhs is newer or equal to rhs.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.Equals(System.Object)">
            Checks if this version is equal to an object.
            
            @param   object obj to compare with.
            @return  bool true if this version is equal to the object.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.Equals(KS.Reactor.Client.ksVersion)">
            Checks if the version is the same as another.
            
            @param   ksVersion other to compare with.
            @return  bool true if the versions are the same.
        </member>
        <member name="M:KS.Reactor.Client.ksVersion.GetHashCode">
            @return  int hash code.
        </member>
        <member name="T:KS.Reactor.Client.PropertySync">
            Holds properties and provides methods for updating properties.
        </member>
        <member name="P:KS.Reactor.Client.PropertySync.ChangedValues">
            Smoothed property values from the server that have changed since the last server frame, indexed by property id.
        </member>
        <member name="P:KS.Reactor.Client.PropertySync.ClientValues">
            Smoothed property values, indexed by property id.
        </member>
        <member name="P:KS.Reactor.Client.PropertySync.ServerValues">
            Server property values for smoothed properties, indexed by property id.
        </member>
        <member name="P:KS.Reactor.Client.PropertySync.Predictor">
            Predictor for smoothing property values.
        </member>
        <member name="F:KS.Reactor.Client.PropertySync.m_propertyChangeEventMap">
            Invoked when a room property changes. Indexed by property id.
        </member>
        <member name="F:KS.Reactor.Client.PropertySync.m_propertyMap">
            Properties
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.GetPropertyServerValue(System.UInt32)">
            Gets property server value.
            
            @param   uint propertyId
            @return  ksMultiType
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.CloneWithServerValues">
            Creates a copy of this property sync that uses server values instead of smoothed values.
            
            @return  PropertySync copy of this property sync with server values.
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.MergeWith(KS.Reactor.Client.PropertySync)">
            Copies the property change event handlers and prediction behaviours from another property sync into this one.
            
            @param   PropertySync other to copy handlers and prediction behaviours from.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.PropertySync.CopyServerValues" -->
        <member name="M:KS.Reactor.Client.PropertySync.Push(System.UInt32,KS.Reactor.ksMultiType)">
            Queues a property update.
            
            @param   uint propertyId of property to update.
            @param   ksMultiType property value.
            @return  bool true if the property has smoothing enabled.
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.FinishFrame">
            Calls ServerUpdate on the predictor with properties whose values have changed since the last server frame.
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.SmoothUpdate">
            Updates smoothed properties using the predictor.
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.Update">
            Processes queued property updates.
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.Clear">
            Clears all properties
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.SetPredictionBehaviour(System.UInt32,KS.Reactor.Client.ksPredictionBehaviour)">
            Sets smoothing data for a property.
            
            @param   uint property Id
            @param   ksPredictionBehaviour - Behaviour of the property when predicting and smoothing values.
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.GetPredictionBehaviour(System.UInt32)">
            Gets smoothing data for a property.
            
            @param   uint property Id
            @return  ksPredictionBehaviour - Behaviour of the property when predicting and smoothing values.
        </member>
        <member name="M:KS.Reactor.Client.PropertySync.Set(System.UInt32,KS.Reactor.ksMultiType)">
            Sets a property value.
            
            @param   uint propertyId of property to set.
            @param   ksMultiType value to set property to.
        </member>
        <member name="T:KS.Reactor.Client.ServerFrame">
            Server frame.
        </member>
        <member name="M:KS.Reactor.Client.ServerFrame.#ctor">
            Default Constructor
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ServerFrame.Initialize(KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksVector3,System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType},System.Single,System.Boolean,System.UInt64)" -->
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Client.ServerFrame.Initialize(System.Collections.Generic.Dictionary{System.UInt32,KS.Reactor.ksMultiType},System.Single,System.UInt64)" -->
        <member name="M:KS.Reactor.Client.ServerFrame.Cleanup">
            Reset member variables and return the ServerFrame to an object pool.
        </member>
        <!-- Badly formed XML comment ignored for member "T:KS.Reactor.Client.SyncObject" -->
        <member name="P:KS.Reactor.Client.SyncObject.IsDestroyed">
            Have we recieved a destroy event for this sync object
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.LastUpdateFrame">
            Last frame we received a transform or smoothed property update from the server.
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.Id">
            Entity id
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.Type">
            Entity type
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.SyncGroup">
            Sync Group
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.ControllerType">
            Player controller type
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.ServerState">
            State from the server.
        </member>
        <!-- Badly formed XML comment ignored for member "P:KS.Reactor.Client.SyncObject.ClientState" -->
        <member name="P:KS.Reactor.Client.SyncObject.Entity">
            Entity
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.Teleported">
            Teleported
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.PropertySync">
            Property sync
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.CompressorUtility">
            CompressorUtility
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.IsIdle">
            Is this object idle? Idle objects aren't moving and aren't changing properties.
        </member>
        <member name="P:KS.Reactor.Client.SyncObject.ServerGhostEntity">
            Server ghost entity
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.Initialize(KS.Reactor.Client.ksPlayerControllerFactory,KS.Reactor.Client.ksDelegates.Factories.Predictor)">
            Initialization
            
            @param   ksPlayerControllerFactory playerControllerFactory for creating player controllers.
            @param   ksDelegates.Factories.Predictor predictorFactory for creating non-input predictor.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.ZeroVelocities">
            Zeros the client state velocities.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.SetServerPosition(System.Int32,System.Single)">
            Sets a server position value.
            
            @param   int index of value to set (0: X, 1: Y, 2: Z).
            @param   float value to set.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.SetServerScale(KS.Reactor.ksVector3)">
            Sets server scale.
            
            @param   ksQuaternion scale to set.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.SetServerRotation(KS.Reactor.ksQuaternion)">
            Sets server rotation.
            
            @param   ksQuaternion rotation to set.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.UpdateServerState(System.Single,System.UInt64)">
            Advances the server state values one frame.
            
            @param   float serverDeltaTime in seconds since last update.
            @param   ulong frameNum - server frame number.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.UpdateClientState(System.Single)">
            Updates client state.
            
            @param   deltaTime in seconds since last frame.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.UpdateClientTransform">
            Updates the client entity transform.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.PushProperty(System.UInt32,KS.Reactor.ksMultiType)">
            Queues a property update.
            
            @param   uint propertyId of property to update.
            @param   ksMultiType property value.
            @return  bool true if the property has smoothing enabled.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.PredictProperties">
            Predicts property values that use property smoothing.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.InitializeScripts">
            Initializes entity scripts.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.Destroy">
            Destroys the tracked entity then reset member variables before returning the SyncObject to an object pool.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.SyncController">
            Creates and sets a new player controller if the controller type changed.
        </member>
        <member name="M:KS.Reactor.Client.SyncObject.InitializePredictor">
            Initializes a predictor for smoothing motion and properties of this sync object.
        </member>
        <member name="T:KS.Reactor.Client.WebServerAPI">
            A static class for communicating with Reactor server managers
        </member>
        <member name="P:KS.Reactor.Client.WebServerAPI.WebRequestFactory">
            Factory for creating ksIWebRequests.
        </member>
        <member name="M:KS.Reactor.Client.WebServerAPI.GetServers(System.String,System.String,KS.Reactor.Client.ksService.RoomListCallback)">
            Coroutine for requesting a list of public instances
            
            @param   string - url of the publish service
            @param   string - image binding string [company id].[project id].[image id]
            @param   RoomListCallback callback
            @return  IEnumerator
        </member>
        <member name="M:KS.Reactor.Client.WebServerAPI.AsyncRequest(System.String,System.Net.WebHeaderCollection,System.String,KS.Reactor.ksJSON,KS.Reactor.ksWebResponse.Handler,System.Object)">
            Async request
            
            @param   string - URL
            @param   WebHeaderCollection - additional request headers
            @param   string - request method
            @param   ksJSON - post request data
            @param   ksWebResponse.Handler - request callback
            @param   object - state object returned in the callback
            @return  IEnumerator
        </member>
        <member name="M:KS.Reactor.Client.WebServerAPI.SyncRequest(System.String,System.Net.WebHeaderCollection,System.String,KS.Reactor.ksJSON,KS.Reactor.ksWebResponse.Handler,System.Object)">
            Synchronous request
            
            @param   string - URL
            @param   WebHeaderCollection - additional request headers
            @param   string - request method
            @param   ksJSON - post request data
            @param   ksWebResponse.Handler - request callback
            @param   object - state object returned in the callback
        </member>
        <member name="M:KS.Reactor.Client.WebServerAPI.AsyncUploadRequest(System.String,System.IO.FileInfo[],KS.Reactor.ksJSON,KS.Reactor.ksWebResponse.Handler)">
            Async file upload request
            
            @param   string - url
            @param   FileInfo[] - list of files to upload
            @param   ksJSON - request data
            @param   RequestCallback - response callback
            @return  IEnumerator
        </member>
        <!-- Badly formed XML comment ignored for member "T:KS.Reactor.Client.Adaptors.ksEntity" -->
        <member name="P:KS.Reactor.Client.Adaptors.ksEntity.Room">
            Room the entity is in.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksEntity.Scripts">
            List of scripts attached to the entity.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksEntity.AssetId">
            Asset Id for prefab
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntity.#ctor">
            Default constructor
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntity.Initialize(System.UInt32,System.UInt32)">
            Initialize an entity
            
            @param   uint - Entity ID
            @param   uint - Asset ID
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntity.InitializeScripts">
            Initializes entity scripts.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntity.Destroy">
            Detaches all scripts and cleans up the entity for reuse.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntity.ResolvePenetration(KS.Reactor.ksVector3,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion)">
            Resolves penetrations resulting from moving between two points. This is not implemented.
            
            @param   ksVector3 from - start position.
            @param   ksVector3 to - end position.
            @param   ksQuaternion rotation.
            @return  ksVector3 position between start and end points before penetration occurred, 
                     or end position if no penetration occurred.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntity.Sweep(KS.Reactor.ksVector3,KS.Reactor.ksVector3,KS.Reactor.ksQuaternion,KS.Reactor.ksVector3@,KS.Reactor.ksVector3@)">
            Checks if the entity will collide with anything when moving between two points. This is not implemented.
            
            @param   ksVector3 from - position to sweep from.
            @oaram   ksVector3 to - position to sweep to.
            @param   ksQuaternion rotation
            @param   out ksVector3 position of the entity at the end of the sweep. If a collision occurred, this is
                     the entity's position when it happened.
            @param   out ksVector3 normal of collision surface.
            @return  bool true if a collision occured.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntity.BecomeServerGhost">
            Indicate this is a server ghost. Server ghosts are duplicate entities used for debugging
            with no movement smoothing so they are always rendered at the last server position.
            This is not implemented.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntity.SetVisible(System.Boolean)">
            Hides or shows the entity.
            This is not implemented.
            
            @param   bool visible - true if the entity should be visible.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntity.InvokeRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Invoke managed RPCs on all entity scripts.
            
            @param   uint - RPC ID
            @param   ksMultiType[] - RPC arguments
        </member>
        <member name="T:KS.Reactor.Client.Adaptors.ksEntityScript">
            Base class for scripts that can be attached to entities.
        </member>
        <member name="F:KS.Reactor.Client.Adaptors.ksEntityScript.m_entity">
            Entity this script is attached to.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksEntityScript.Room">
            Room the entity is in.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksEntityScript.Time">
            Server time and local frame delta.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksEntityScript.Properties">
            Entity properties
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksEntityScript.SetParent(KS.Reactor.Client.Adaptors.ksEntity)">
            Sets the entity this script is attached to.
            
            @param   ksEntity entity the script is attached to.
        </member>
        <member name="T:KS.Reactor.Client.Adaptors.ksPlayer">
            Engine agnostic implementation of ksBasePlayer.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksPlayer.Room">
            Room the player is in.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksPlayer.Scripts">
            List of scripts attached to the player.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksPlayer.#ctor(System.UInt32)">
            Constructor
            
            @param   uint id of the player.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksPlayer.InitializeScripts">
            Initializes player scripts.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksPlayer.Destroy">
            Detaches all scripts.
        </member>
        <member name="T:KS.Reactor.Client.Adaptors.ksPlayerScript">
            Base class for scripts that can be attached to players.
        </member>
        <member name="F:KS.Reactor.Client.Adaptors.ksPlayerScript.m_player">
            Player this script is attached to.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksPlayerScript.Room">
            Room the player is in.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksPlayerScript.Time">
            Server time and local frame delta.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksPlayerScript.Properties">
            Player properties
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksPlayerScript.SetParent(KS.Reactor.Client.Adaptors.ksPlayer)">
            Sets the player this script is attached to.
            
            @param   ksPlayer player the script is attached to.
        </member>
        <member name="T:KS.Reactor.Client.Adaptors.ksRoom">
            Engine agnostic stub implementation of ksBaseRoom. Prefabs/types and physics are not implemented.
        </member>
        <member name="T:KS.Reactor.Client.Adaptors.ksRoom.UpdateHandler">
            Update event handler.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksRoom.Scripts">
            List of scripts attached to the room.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksRoom.Physics">
            This is not implemented and will be null.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksRoom.Gravity">
            Gravity
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksRoom.OnUpdate">
            Delegates are invoked every update in sorted order of indices.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksRoom.#ctor(KS.Reactor.ksRoomInfo)">
            Constructor
            
            @param   ksRoomInfo roomInfo determines where we connect.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksRoom.#ctor">
            Constructor
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksRoom.CreatePlayer(System.UInt32)">
            Creates a player.
            
            @param   uint id of player.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksRoom.CreateEntity(System.UInt32,System.UInt32,System.Boolean)">
            Creates an entity.
            
            @param   uint id of entity.
            @param   uint type of entity.
            @param   bool isGhost - if true, we are creating an entity for a server ghost
            @return  ksEntity
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksRoom.LoadPlayerScripts(KS.Reactor.Client.Adaptors.ksPlayer)">
            Loads and attaches player scripts to a player. This is not implemented.
            
            @param   ksPlayer player to attach scripts to.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksRoom.InitializeScripts">
            Initializes room scripts.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksRoom.UpdateScripts">
            Calls registered update handlers.
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksRoom.InvokeRPC(System.UInt32,KS.Reactor.ksMultiType[])">
            Invoke managed RPCs on all room scripts.
            
            @param   uint - RPC ID
            @param   ksMultiType[] - RPC arguments
        </member>
        <member name="T:KS.Reactor.Client.Adaptors.ksRoomScript">
            Base class for scripts that can be attached to rooms.
        </member>
        <member name="F:KS.Reactor.Client.Adaptors.ksRoomScript.m_room">
            Room the script is attached to.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksRoomScript.Time">
            Server time and local frame delta.
        </member>
        <member name="P:KS.Reactor.Client.Adaptors.ksRoomScript.Properties">
            Room properties
        </member>
        <member name="M:KS.Reactor.Client.Adaptors.ksRoomScript.SetParent(KS.Reactor.Client.Adaptors.ksRoom)">
            Sets the room this script is attached to.
            
            @param   ksRoom room the script is attached to.
        </member>
        <member name="T:KS.Reactor.Secret.BaseDecompressor">
            Base class for all decompressors
        </member>
        <member name="M:KS.Reactor.Secret.BaseDecompressor.DecompressData(System.Byte[],System.Int32,System.Int32,KS.Reactor.Secret.FrameSectionTypes,System.Int32@,System.Byte[]@)">
             Decompress data compressed by a compressor into a new byte array.
            
             @param   byte[] - buffer data
             @param   int - offset
             @param   int - object size
             @param   FrameSectionTypes frameSectionType
             @param   [out] int - object Count
             @param   [out] byte[] - decoded data
        </member>
        <member name="M:KS.Reactor.Secret.BaseDecompressor.DeserializeFullObjectModel(System.Byte[],System.Int32)">
             Deserialize the full object model
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="M:KS.Reactor.Secret.BaseDecompressor.DeserializeUpdateObjectModel(System.Byte[],System.Int32)">
             Deserialize the update object model
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="T:KS.Reactor.Secret.BaseFrameSectionDecoder">
            This class defines common constants and interface function required for all frame section decoders.
            Derived classes are responsible for parsing client, entity, controller information for a single
            frame of server data.
        </member>
        <member name="M:KS.Reactor.Secret.BaseFrameSectionDecoder.DecodePlayerController(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate)">
            Decode and attach player controllers to entities and process input acknowledgements
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.BaseFrameSectionDecoder.DecodeServerEvents(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode and apply server events such as RPCs and connect/disconnects
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="M:KS.Reactor.Secret.BaseFrameSectionDecoder.DecodeClientProperties(System.Byte[],System.Int32,System.UInt32,System.Boolean,KS.Reactor.Secret.RoomUpdate)">
            Decode and apply client property updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   bool is this a full client frame
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.BaseFrameSectionDecoder.DecodeEntityProperties(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate)">
            Decode and apply entity property updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.BaseFrameSectionDecoder.DecodeRoomProperties(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate)">
            Decode and apply room property updates and gravity changes
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.BaseFrameSectionDecoder.DecodeNewEntities(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode new entities
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number entities to decode
            @param   RoomUpdate frame Data
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="M:KS.Reactor.Secret.BaseFrameSectionDecoder.DecodeEntityUpdates(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.Boolean,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode entity transform updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number entities to decode
            @param   RoomUpdate frame Data
            @param   bool isSingleDelta
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="T:KS.Reactor.Secret.BFDecompressor">
            This class decodes data compressed by BinaryFlagCompressor.
        </member>
        <member name="M:KS.Reactor.Secret.BFDecompressor.SetStaticModelData(System.Byte[])">
            Parse and update the static model data.
            
            @param   byte[] - model data
        </member>
        <member name="M:KS.Reactor.Secret.BFDecompressor.DecompressData(System.Byte[],System.Int32,System.Int32,KS.Reactor.Secret.FrameSectionTypes,System.Int32@,System.Byte[]@)">
             Decompress data compressed by BinaryFlagCompressor into a new byte array.
            
             @param   byte[] - buffer data
             @param   int - offset
             @param   int - object size
             @param   FrameSectionTypes frameSectionType
             @param   [out] int - object Count
             @param   [out] byte[] - decoded data
        </member>
        <member name="M:KS.Reactor.Secret.BFDecompressor.DeserializeFullObjectModel(System.Byte[],System.Int32)">
             Deserialize the full object model
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="M:KS.Reactor.Secret.BFDecompressor.DeserializeUpdateObjectModel(System.Byte[],System.Int32)">
             Deserialize the update object model
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="T:KS.Reactor.Secret.BinaryFlagFrameSectionDecoder">
            Decodes frame data that was encoded using a binary flag compressor.
        </member>
        <member name="M:KS.Reactor.Secret.BinaryFlagFrameSectionDecoder.DecodeNewEntities(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode new entities
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number entities to decode
            @param   RoomUpdate frame Data
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="M:KS.Reactor.Secret.BinaryFlagFrameSectionDecoder.DecodeEntityUpdates(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.Boolean,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode entity transform updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number entities to decode
            @param   RoomUpdate frame Data
            @param   bool isSingle - if true, decode this update to single delta.
            @param   bool applyDelta
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="T:KS.Reactor.Secret.BitStreamDecoder">
            Decodes frame data that was encoded using a bit stream encoder.
        </member>
        <member name="M:KS.Reactor.Secret.BitStreamDecoder.DecodePlayerController(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate)">
            Decode and attach player controllers to entities and process input acknowledgements
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number controllers to decode
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.BitStreamDecoder.DecodeServerEvents(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode and apply server events such as RPCs and connect/disconnects
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number events to decode
            @param   RoomUpdate frame Data
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="M:KS.Reactor.Secret.BitStreamDecoder.DecodeClientProperties(System.Byte[],System.Int32,System.UInt32,System.Boolean,KS.Reactor.Secret.RoomUpdate)">
            Decode and apply client property updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   bool is this a full client frame
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.BitStreamDecoder.DecodeEntityProperties(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate)">
            Decode and apply entity property updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.BitStreamDecoder.DecodeRoomProperties(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate)">
            Decode and apply room property updates and gravity changes
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.BitStreamDecoder.DecodeNewEntities(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode new entities
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number entities to decode
            @param   RoomUpdate frame Data
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="M:KS.Reactor.Secret.BitStreamDecoder.DecodeEntityUpdates(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.Boolean,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode entity transform updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number entities to decode
            @param   RoomUpdate frame Data
            @param   bool isSingleDelta
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="M:KS.Reactor.Secret.BitStreamDecoder.DecodeRPC(KS.Reactor.ksBitIStream,System.UInt32@,KS.Reactor.ksMultiType[]@)">
            Decodes an RPC.
            
            @param   ksBitIStream srcData to process.
            @param   out uint rpcId.
            @param   out KSMultiType[] arguments.
        </member>
        <member name="T:KS.Reactor.Secret.EntityArrayManager">
            This class manages the entity indices. We send entity data in order to avoid sending entity ids.
            The EntityArrayManager will generate an index for a new entity and record it so we can get the entity id
            for an entity when its udpate data is decoded.
        </member>
        <member name="M:KS.Reactor.Secret.EntityArrayManager.GetNextIndex">
            Gets the next available index.
            
            @return  int
        </member>
        <member name="M:KS.Reactor.Secret.EntityArrayManager.ReserveIndex">
            Reserve the next highest encoding index for reuse in a later frame.
        </member>
        <member name="M:KS.Reactor.Secret.EntityArrayManager.AddEntityId(System.UInt32)">
            Puts the given entity id at the next available index.
            
            @param   uint entity id
        </member>
        <member name="M:KS.Reactor.Secret.EntityArrayManager.GetEntityId(System.Int32)">
            Gets the entity id at the given index.
            
            @param   int index
            @return  uint entity id - 0 means there is no entity at the given index
        </member>
        <member name="M:KS.Reactor.Secret.EntityArrayManager.RecoverIndexForEntity(System.UInt32)">
            Recovers the index of the given entity. Removes this entity id from the entity array.
            Adds this entity's index to the list of indices that we can assign to a new entity.
            
            @param   uint entityId
            @return  bool return true if the entity was found and the index was recovered
        </member>
        <member name="M:KS.Reactor.Secret.EntityArrayManager.RecoverIndex(System.Int32)">
            Recovers the given index. Adds this index to the list of indices that we can assign to a new entity.
            
            @param   int index
        </member>
        <member name="M:KS.Reactor.Secret.EntityArrayManager.RecycleIndices">
            Move recovered indices into the available indices list and sort it.
        </member>
        <member name="T:KS.Reactor.Secret.FixedLengthDecoder">
            Decodes frame data that was encoded using a fixed length compressor.
        </member>
        <member name="M:KS.Reactor.Secret.FixedLengthDecoder.DecodePlayerController(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate)">
            Decode and attach player controllers to entities and process input acknowledgements
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.FixedLengthDecoder.DecodeServerEvents(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode and apply server events such as RPCs and connect/disconnects
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="M:KS.Reactor.Secret.FixedLengthDecoder.DecodeClientProperties(System.Byte[],System.Int32,System.UInt32,System.Boolean,KS.Reactor.Secret.RoomUpdate)">
            Decode and apply client property updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   bool activate existing clients
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.FixedLengthDecoder.DecodeEntityProperties(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate)">
            Decode and apply entity property updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.FixedLengthDecoder.DecodeRoomProperties(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate)">
            Decode and apply room property updates and gravity changes
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number properties to decode
            @param   RoomUpdate frame Data
        </member>
        <member name="M:KS.Reactor.Secret.FixedLengthDecoder.DecodeNewEntities(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode new entities
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number entities to decode
            @param   RoomUpdate frame Data
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="M:KS.Reactor.Secret.FixedLengthDecoder.ApplyFixedPointObject(KS.Reactor.Secret.RoomUpdate,KS.Reactor.Secret.FixedPointObject@,System.UInt32)">
            Apply the given fixed point object to its sync object. Create a new sync object if none was found.
            
            @param   RoomUpdate frame Data
            @param   FixedPointObject fpEntity
            @param   uint Sync group
        </member>
        <member name="M:KS.Reactor.Secret.FixedLengthDecoder.DecodeEntityUpdates(System.Byte[],System.Int32,System.UInt32,KS.Reactor.Secret.RoomUpdate,System.Boolean,System.UInt32,KS.Reactor.Secret.EntityArrayManager)">
            Decode entity transform updates
            
            @param   byte[] source data
            @param   int data offset
            @param   uint number entities to decode
            @param   RoomUpdate frame Data
            @param   bool isSingle - if true, decode this update to single delta.
            @param   uint Sync group
            @param   EntityArrayManager Entity array manager
        </member>
        <member name="M:KS.Reactor.Secret.FixedLengthDecoder.ApplyFixedPointTransform(KS.Reactor.Secret.RoomUpdate,KS.Reactor.Secret.FixedPointTransform,System.Boolean,System.UInt32)">
            Apply the given fixed point transform to its sync object.
            
            @param   RoomUpdate frame Data
            @param   FixedPointTransform fpTransform
            @param   bool isSingle - if true, assign single delta. Otherwise, apply double delta onto the single delta.
            @param   bool applyDelta
            @param   uint Sync group
        </member>
        <member name="T:KS.Reactor.Secret.FLCompressor">
            Compresses unordered arrays of fixed-length data.
        </member>
        <member name="M:KS.Reactor.Secret.FLCompressor.Compress``1(``0[])">
            Compresses an ordered array of structs.
            
            @param   T[] values to compress.
            @return  byte[] compressed data.
        </member>
        <member name="M:KS.Reactor.Secret.FLCompressor.CompressData(System.Byte[],System.Int32,System.Int32)">
            Compresses a byte array of unordered fixed-length objects.
            
            @param   byte[] data to compress.
            @param   int objectSize
            @param   int objectCount
            @return  byte[] compressed data.
        </member>
        <member name="T:KS.Reactor.Secret.FLCompressorUtility">
            Utility class for FLCompressor. It is used last transform data and deltas in int arrays and the precisions.
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.Position">
            Position
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.Rotation">
            Rotation
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.Scale">
            Scale
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.DeltaPosition">
            DeltaPosition
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.DeltaRotation">
            DeltaRotation
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.DeltaScale">
            DeltaScale
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.HasReceivedUpdates">
            The compressor will have non-null delta positions, rotations, or scales if we have received an update.
            
            @return bool
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.PositionPrecision">
            Position Precision
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.RotationPrecision">
            Rotation Precision
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.ScalePrecision">
            Scale Precision
        </member>
        <member name="P:KS.Reactor.Secret.FLCompressorUtility.UseUpdateServerTransform">
            We don't need to call UpdateServerTransform.
        </member>
        <member name="M:KS.Reactor.Secret.FLCompressorUtility.UpdateServerTransform(KS.Reactor.Client.ksPhysicsState@,System.Single)">
            Called to advance the server transform one frame. Does nothing.
            
            @param   ref ksPhysicsState serverState
            @param   float serverDeltaTime
        </member>
        <member name="M:KS.Reactor.Secret.FLCompressorUtility.OnNewServerPositionUpdate(System.Int32)">
            Called when a new server position is received. Does nothing.
            
            @param   int index of position that changed (1, 2, or 3 for x, y, or z).
        </member>
        <member name="M:KS.Reactor.Secret.FLCompressorUtility.OnNewServerRotationUpdate">
            Called when a new server rotation is received. Does nothing.
        </member>
        <member name="T:KS.Reactor.Secret.FLDecompressor`1">
            This class decodes data compressed by FLCompressor. 
        </member>
        <member name="M:KS.Reactor.Secret.FLDecompressor`1.SetStaticModelData(System.Byte[])">
            Parse and update the static model data.
            
            @param   byte[] - mode data buffer
        </member>
        <member name="M:KS.Reactor.Secret.FLDecompressor`1.Decompress``1(System.Byte[],System.Int32)">
            Decompresses data from a byte array into an unordered array of structs.
            
            @param   byte[] data to decode.
            @param   int offset to begin decoding at.
            @return  T[] decoded struct array.
        </member>
        <member name="M:KS.Reactor.Secret.FLDecompressor`1.DecompressData(System.Byte[],System.Int32,System.Int32,KS.Reactor.Secret.FrameSectionTypes,System.Int32@,System.Byte[]@)">
             Decompress stream data from a byte array into a new byte array.
             
             Case: Full/Partial frame + model => decode using the provided model then discard it.
             Case: Full/Partial frame + no model => decode using the static model
             Case: Update frame + model => decode using the provided model then store it.
             Case: Update frame + no model + model delta => apply delta to the model, decode the frame, then reconstruct a new update model
             Case: Update frame + no model + no delta => decode using the current update model
            
             @param   byte[] - buffer data
             @param   int - offset
             @param   int - object size
             @param   FrameSectionTypes frameSectionType
             @param   [out] int - object Count
             @param   [out] byte[] - decoded data
        </member>
        <member name="M:KS.Reactor.Secret.FLDecompressor`1.DeserializeFullObjectModel(System.Byte[],System.Int32)">
             Decode the full object model.
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="M:KS.Reactor.Secret.FLDecompressor`1.DeserializeUpdateObjectModel(System.Byte[],System.Int32)">
             Decode the update object model.
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Secret.FLDecompressor`1.DecompressData(KS.Reactor.ksBitIStream,System.Int32,System.Byte[]@,System.Int32@)" -->
        <member name="T:KS.Reactor.Secret.FPObjectDecoder">
            This class is used to decode full object data compressed by FLCompressor.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Secret.FPObjectDecoder.DecodeFullObject(KS.Reactor.ksBitIStream,System.Collections.Generic.List{KS.Reactor.Secret.FixedPointObject}@,System.Single@)" -->
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Secret.FPObjectDecoder.GetOutputObjects(System.Byte[],System.Int32)" -->
        <member name="T:KS.Reactor.Secret.FPTransformDecoder">
            This class is used to decode delta transform data compressed by FLCompressor.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Secret.FPTransformDecoder.DecodeTransform(KS.Reactor.ksBitIStream,System.Collections.Generic.List{KS.Reactor.Secret.FixedPointTransform}@)" -->
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Secret.FPTransformDecoder.GetOutputTransforms(System.Byte[],System.Int32)" -->
        <member name="T:KS.Reactor.Secret.FrameDecoder">
            Decode a server frame and subsequently extracting and decoding frame sections data.
        </member>
        <member name="T:KS.Reactor.Secret.FrameDecoder.Config">
            Configuration settings for decoding frame data.
        </member>
        <member name="P:KS.Reactor.Secret.FrameDecoder.SyncRate">
            Number of frames synced per server update
        </member>
        <member name="P:KS.Reactor.Secret.FrameDecoder.SimulationRate">
            Unscale amount of time in microseconds that the server simulates per frame.
        </member>
        <member name="M:KS.Reactor.Secret.FrameDecoder.#ctor(KS.Reactor.Secret.FrameDecoder.Config)">
            Constructor
            
            @param   Config - configuration settings
        </member>
        <member name="M:KS.Reactor.Secret.FrameDecoder.CreateDecoder(KS.Reactor.Secret.EncoderTypes)">
            Construct a base frame section decoder for an encoding type
            
            @param   EncoderTypes
            @return  BaseFrameSectionDecoder
        </member>
        <member name="M:KS.Reactor.Secret.FrameDecoder.SetStaticModelData(System.Byte[])">
            Set new static model used by the decompressor
            
            @param   byte[] - mode data buffer
        </member>
        <member name="M:KS.Reactor.Secret.FrameDecoder.DecodeFrame(KS.Reactor.ksStreamBuffer,KS.Reactor.Client.ksBaseRoom)">
            Read the frame and parse out frame section headers and data
            
            @param   ksStreamBuffer - buffer containing a frame packet header and body
            @param   ksBaseRoom room
        </member>
        <member name="M:KS.Reactor.Secret.FrameDecoder.DecodeFrameSectionHeader(System.Byte[],System.Int32@,KS.Reactor.Secret.RoomUpdate,System.UInt32,KS.Reactor.Secret.BaseDecompressor,KS.Reactor.Secret.EntityArrayManager)">
            Decode the frame section header and data
            
            @param   byte[] encoded data
            @param   int data offset
            @param   uint length of encoded data
            @param   RoomUpdate frame data
        </member>
        <member name="T:KS.Reactor.Secret.FrameSectionTypes">
            Frame Section Types
        </member>
        <member name="T:KS.Reactor.Secret.EncoderTypes">
            Frame Section Types
        </member>
        <member name="T:KS.Reactor.Secret.CompressorTypes">
            Frame Section Types
        </member>
        <member name="T:KS.Reactor.Secret.SyncGroupHeader">
            Sync group header structure
        </member>
        <member name="M:KS.Reactor.Secret.SyncGroupHeader.ToString">
            Return a string summarizing this object.
            
            @return string
        </member>
        <member name="M:KS.Reactor.Secret.SyncGroupHeader.Deserialize(System.Byte[],System.Int32@)">
            Read header data from a byte array and increment the offset.
            
            @param   byte[] - data
            @param   ref int - offset
        </member>
        <member name="M:KS.Reactor.Secret.SyncGroupHeader.Serialize(System.Byte[],System.Int32@)">
            Write header data to a byte array and increment the offset.
            
            @param   byte[] - data
            @param   ref int - offset
        </member>
        <member name="T:KS.Reactor.Secret.SectionHeader">
            Section header structure
        </member>
        <member name="M:KS.Reactor.Secret.SectionHeader.ToString">
            Return a string summarizing this object.
            
            @return string
        </member>
        <member name="M:KS.Reactor.Secret.SectionHeader.Deserialize(System.Byte[],System.Int32@)">
            Read header data from a byte array and increment the offset.
            
            @param   byte[] - data
            @param   ref int - offset
        </member>
        <member name="M:KS.Reactor.Secret.SectionHeader.Serialize(System.Byte[],System.Int32@)">
            Write header data to a byte array and increment the offset.
            
            @param   byte[] - data
            @param   ref int - offset
        </member>
        <member name="T:KS.Reactor.Secret.ICompressorUtility">
            Compressor utility class interface.
        </member>
        <member name="P:KS.Reactor.Secret.ICompressorUtility.UseUpdateServerTransform">
            Do we need to call UpdateServerTransform every server frame?
        </member>
        <member name="M:KS.Reactor.Secret.ICompressorUtility.UpdateServerTransform(KS.Reactor.Client.ksPhysicsState@,System.Single)">
            Advances the server transform one frame.
            
            @param   ref ksPhysicsState serverState
            @param   float serverDeltaTime
        </member>
        <member name="M:KS.Reactor.Secret.ICompressorUtility.OnNewServerPositionUpdate(System.Int32)">
            Called when a new server position is received.
            
            @param   int index of position that changed (1, 2, or 3 for x, y, or z).
        </member>
        <member name="M:KS.Reactor.Secret.ICompressorUtility.OnNewServerRotationUpdate">
            Called when a new server rotation is received.
        </member>
        <member name="T:KS.Reactor.Secret.ImpulseCompressorUtility">
            Utility class of the ImpulseCompressor, which send the delta transform without compression. 
            DiffCompressorUtility is used to smooth object movement on the client side.
            
            THIS IS CURRENTLY UNUSED
        </member>
        <member name="F:KS.Reactor.Secret.ImpulseCompressorUtility.Impulse">
            Impulse
        </member>
        <member name="F:KS.Reactor.Secret.ImpulseCompressorUtility.AngularImpulse">
            Angular Impulse
        </member>
        <member name="P:KS.Reactor.Secret.ImpulseCompressorUtility.UseUpdateServerTransform">
            We need to call UpdateServerTransform every frame.
        </member>
        <member name="M:KS.Reactor.Secret.ImpulseCompressorUtility.UpdateServerTransform(KS.Reactor.Client.ksPhysicsState@,System.Single)">
            Advances the server transform one frame.
            
            @param   ref ksPhysicsState serverState
            @param   float serverDeltaTime
        </member>
        <member name="M:KS.Reactor.Secret.ImpulseCompressorUtility.OnNewServerPositionUpdate(System.Int32)">
            Set skip position update flag on position of index to true
            
            @param   int index of position
        </member>
        <member name="M:KS.Reactor.Secret.ImpulseCompressorUtility.OnNewServerRotationUpdate">
            Set skip rotation update flag on rotation to true
        </member>
        <member name="T:KS.Reactor.Secret.PacketDecoder">
            Handles the decoding of packet data from stream buffers.
        </member>
        <member name="T:KS.Reactor.Secret.PacketDecoder.AuthenticationResult">
            Authentication response packet data
        </member>
        <member name="T:KS.Reactor.Secret.PacketDecoder.PingResult">
            Ping response packet data
        </member>
        <member name="M:KS.Reactor.Secret.PacketDecoder.DecodeFrameDecoderConfigs(KS.Reactor.ksStreamBuffer)">
            Decode frame decoder configs from a streambuffer
            
            @param   ksStreamBuffer - buffer
            @return  FrameDecoder.Config
        </member>
        <member name="M:KS.Reactor.Secret.PacketDecoder.DecodeStaticModelData(KS.Reactor.ksStreamBuffer)">
            Decode static model data from a streambuffer
            
            @param   ksStreamBuffer - buffer
            @return  byte[]
        </member>
        <member name="M:KS.Reactor.Secret.PacketDecoder.DecodeAuthenticationResponse(KS.Reactor.ksStreamBuffer)">
            Decode an authentication result from a stream buffer. 
            If the authentication succeeded, the result will contain the local player ID.
            If the authentication failed, the result will contain a connect status value and a custom status value.
            
            @param   ksStreamBuffer - buffer
            @return  AuthenticationResult
        </member>
        <member name="M:KS.Reactor.Secret.PacketDecoder.DecodePong(KS.Reactor.ksStreamBuffer)">
            Decode a ping response (pong) from a stream buffer.
            Pong messages contain a type and the tick count of when the ping was sent.
            
            @param   ksStreamBuffer - buffer
            @return  PingResult
        </member>
        <member name="T:KS.Reactor.Secret.PacketEncoder">
            Handles the encoding of data and the writing of packet headers and bodies to stream buffers.
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.GetVersion">
            Get the version information for this encoder.
            
            @return  VersionInfo
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodeRouting(System.UInt32,KS.Reactor.ksStreamBuffer)">
            Write a routing packet to a stream buffer.
            
            @param   uint - roomId
            @param   ksStreamBuffer - buffer
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodeValidateModel(System.Byte[],KS.Reactor.ksStreamBuffer)">
            Write a model validation packet to a stream buffer.
            
            @param   byte[] - Checksum data for the current frame decoder model.
            @param   ksStreamBuffer - buffer
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodeAuthentication(KS.Reactor.ksPlayerAPI.Session,KS.Reactor.ksMultiType[],KS.Reactor.ksStreamBuffer)">
            Write an authentication packet to a stream buffer.
            
            @param   ksPlayerAPI.Session - Player session
            @param   ksMultiType[] - Authentication arguments
            @param   ksStreamBuffer - buffer
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodeRoomRPC(System.UInt32,KS.Reactor.ksMultiType[],KS.Reactor.ksStreamBuffer)">
            Write a room rpc packet to a stream buffer.
            
            @param   uint - RPC ID
            @param   ksMultiType[] - RPC arguments
            @param   ksStreamBuffer - buffer
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodeEntityRPC(System.UInt32,System.UInt32,KS.Reactor.ksMultiType[],KS.Reactor.ksStreamBuffer)">
            Write an entity rpc packet to a stream buffer.
            
            @param   uint - Entity ID
            @param   uint - RPC ID
            @param   ksMultiType[] - RPC arguments
            @param   ksStreamBuffer - buffer
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Secret.PacketEncoder.EncodeEntityBatchRPC(System.Collections.Generic.IEnumerable{KS.Reactor.ksIEntity},System.UInt32,KS.Reactor.ksMultiType[],KS.Reactor.ksStreamBuffer)" -->
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodeRPC(System.UInt32,KS.Reactor.ksMultiType[],KS.Reactor.ksBitOStream)">
            Write an RPC message to a bit stream.
            
            @param   uint - RPC ID
            @param   ksMultiType[] - RPC arguments
            @param   ksBitOStream - Bit stream
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodeFullInput(KS.Reactor.ksInputRegistrar,KS.Reactor.ksInput,KS.Reactor.ksStreamBuffer)">
            Write a full input packet to a stream buffer.
            
            @param   ksInputRegistrar - Input registrar
            @param   ksInput - Input state
            @param   ksStreamBuffer - buffer
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodeInput(KS.Reactor.ksInputRegistrar,KS.Reactor.ksInput,KS.Reactor.ksStreamBuffer)">
            Write an input packet to a stream buffer.
            
            @param   ksInputRegistrar - Input registrar
            @param   ksInput - Input state
            @param   ksStreamBuffer - buffer
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodePing(KS.Reactor.ksStreamBuffer,System.Boolean)">
            Write a ping packet to a stream buffer.
            
            @param   ksStreamBuffer - buffer
            @param   bool - True if this is an RPC ping.
        </member>
        <member name="M:KS.Reactor.Secret.PacketEncoder.EncodeIdle(KS.Reactor.ksStreamBuffer)">
            Write a idle packet to a stream buffer.
            
            @param   ksStreamBuffer - buffer
        </member>
        <member name="T:KS.Reactor.Secret.PacketHeader">
            Structure that contains data and enums for the Reactor packet protocol.
        </member>
        <member name="T:KS.Reactor.Secret.PacketIO">
            Reads and writes Reactor packets to a connection object. Manages routing of read packets to appropriate packet handlers.
        </member>
        <member name="T:KS.Reactor.Secret.PacketIO.WriteHandler">
            Handler to be invoked when a packet is written to a connection.
            
            @param   ksConnection - Connection that was written to.
            @param   ksStreamBuffer - Buffer that will be written to the connection.
            @param   SocketError - Write errors
        </member>
        <member name="T:KS.Reactor.Secret.PacketIO.ReadHandler">
            Handler to be invoked when a packet (header+body) is read from a connection.
            
            @param   ksConnection - Connection that was read from.
            @param   ksStreamBuffer - Buffer containing the packet header and body.
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.WriteOperation.#ctor(KS.Reactor.ksStreamBuffer,KS.Reactor.Secret.PacketIO.WriteHandler)">
            Constructor.
            
            @param   ksStreamBuffer - Stream buffer operated on.
            @param   WriteHandler - Callback to invoke when the write operation completes.
        </member>
        <member name="P:KS.Reactor.Secret.PacketIO.IsReading">
            Return true if the packet reader is actively reading from a connection.
            
            @return  bool
        </member>
        <member name="P:KS.Reactor.Secret.PacketIO.Connection">
            Bound connection
            
            @return  ksConnection
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.#ctor(KS.Reactor.Client.ksConnection)">
            Constructor.
            
            @param   ksConnection - Connection that the packet reader will operate on.
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.AddHandler(KS.Reactor.Secret.PacketHeader.Types,KS.Reactor.Secret.PacketIO.ReadHandler)">
            Add a handler for a type of packet
            
            @param   PacketHeader.Types - Packet type
            @param   ReadHandler - Callback to invoke when the specified packet is read from a connection.
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.RemoveHandler(KS.Reactor.Secret.PacketHeader.Types)">
            Remove a handler for a type of packet
            
            @param   PacketHeader.Types - Packet type
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.BeginRead">
            Begin reading packets from the connection.
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.StopRead">
            Stop reading packets from the connection.
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.ReadNext">
            Read the next packet from the connection.
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.Write(KS.Reactor.ksStreamBuffer,KS.Reactor.Secret.PacketIO.WriteHandler)">
            Write buffer data containing packet data to the bound connection.
            
            @param   ksStreamBuffer - Buffer containing a packet header and body.
            @param   WriteHandler - Callback to invoke once the write completes.
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.HandleReceiveHeader(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer.Segment,System.Net.Sockets.SocketError,System.Object)">
            Handle recevied packet headers.
            Check the header for the amount of body data expected and begin a new read operation for that data.
            If the body length is 0, then pass the data to the body handler.
            
            @param   ksConnection - Connection that was read from.
            @param   ksStreamBuffer.Segment - Buffer segment that contains the header data.
            @param   SocketError - Read error.
            @param   object - Async state object.
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.HandleReceiveBody(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer.Segment,System.Net.Sockets.SocketError,System.Object)">
             Handle recevied packet body.
             Read the header data and look for an appropriate packet handler. 
            
             @param   ksConnection - Connection that was read from.
             @param   ksStreamBuffer.Segment - Buffer segment that contains the header data.
             @param   SocketError - Read error.
             @param   object - Async state object.
        </member>
        <member name="M:KS.Reactor.Secret.PacketIO.HandleSend(KS.Reactor.Client.ksConnection,KS.Reactor.ksStreamBuffer.Segment,System.Net.Sockets.SocketError,System.Object)">
             Handle the completion of a write operation to a connection.
            
             @param   ksConnection - Connection that was read from.
             @param   ksStreamBuffer.Segment - Buffer segment that contains the header data.
             @param   SocketError - Read error.
             @param   object - Async state object.
        </member>
        <member name="T:KS.Reactor.Secret.QuantizationUtility">
            This class contains utility methods for quantization and dequantization.
        </member>
        <member name="M:KS.Reactor.Secret.QuantizationUtility.IntArrayToVector3(System.Int32[],System.Single)">
            Dequantize int array to a ksVector3.
            
            @param   int[] array
            @param   float precision
            @return  ksVector3
        </member>
        <member name="M:KS.Reactor.Secret.QuantizationUtility.DecodeQuaternion(System.Int32[],System.Int32)">
            Decode a quaternion from quantized smallest three and the index of the biggest element.
            
            @param   int[] qInt - smallest three of the quaternion
            @param   int maxValue - max possible value
            @return  ksQuaternion
        </member>
        <member name="M:KS.Reactor.Secret.QuantizationUtility.DecodeQuaternion(System.Int32[],KS.Reactor.ksQuaternion@,System.Int32)">
            Decode a quaternion from quantized smallest three and the index of the biggest element.
            
            @param   int[] qInt - smallest three of the quaternion and the index of the biggest element
            @param   out ksQuaternion q - smallest three of the quaternion
            @param   int maxValue - max possible value
        </member>
        <member name="M:KS.Reactor.Secret.QuantizationUtility.ToIntArray(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Int32[])">
            Form an int array from uints and their signs.
            
            @param   uint X
            @param   uint Y
            @param   uint Z
            @param   bool negX
            @param   bool negY
            @param   bool negZ
            @param   int[] intArray
        </member>
        <member name="M:KS.Reactor.Secret.QuantizationUtility.ReinterpretVector(System.UInt32,System.UInt32,System.UInt32)">
            Convert the uint x, y, z values into floats via bit reinterpretation
            
            @param   uint X value
            @param   uint Y value
            @param   uint Z value
            @return  ksVector3
        </member>
        <member name="M:KS.Reactor.Secret.QuantizationUtility.ReinterpretVector(System.Int32[])">
            Reinterpret an int array's first three values to floats then put them in a ksVector3 and return.
            
            @param   int[] int array
            @return  ksVector3
        </member>
        <member name="M:KS.Reactor.Secret.QuantizationUtility.ReinterpretToIntArray(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            Reinterpret three uints to ints and put them in the given int array.
            
            @param   uint X value
            @param   uint Y value
            @param   uint Z value
            @param   int[] int array
        </member>
        <member name="M:KS.Reactor.Secret.QuantizationUtility.IntAddition(System.Int32[],System.Int32[],System.Single)">
            Apply delta array on to last value array and convert the result to a ksVector3.
            
            @param   int[] last
            @param   int[] delta
            @param   float precision
            @return  ksVector3
        </member>
        <member name="M:KS.Reactor.Secret.QuantizationUtility.ApplyDelta(System.Int32[],System.Int32[])">
            Apply delta.
            
            @param   int[] last
            @param   int[] delta
        </member>
        <member name="T:KS.Reactor.Secret.RoomUpdate">
            RoomUpdate stores decoded frame data and applies updates during the ksBaseRoom update
        </member>
        <member name="T:KS.Reactor.Secret.RoomUpdate.SyncObjectUpdateType">
            Type of SyncObjectUpdate.
        </member>
        <member name="T:KS.Reactor.Secret.RoomUpdate.SyncObjectUpdate">
            Frame data for updating an entity's transform.
        </member>
        <member name="F:KS.Reactor.Secret.RoomUpdate.SyncObjectUpdate.Type">
            Type.
        </member>
        <member name="F:KS.Reactor.Secret.RoomUpdate.SyncObjectUpdate.NewValue">
            New value.
        </member>
        <member name="F:KS.Reactor.Secret.RoomUpdate.SyncObjectUpdate.Teleported">
            Was the entity teleported?
        </member>
        <member name="P:KS.Reactor.Secret.RoomUpdate.Room">
            Room.
        </member>
        <member name="P:KS.Reactor.Secret.RoomUpdate.Frame">
            Frame number.
        </member>
        <member name="P:KS.Reactor.Secret.RoomUpdate.ServerTime">
            Total amount of time simulated on the server.
        </member>
        <member name="P:KS.Reactor.Secret.RoomUpdate.ServerDeltaTime">
            Amount of time simulated on the server since the last frame.
        </member>
        <member name="F:KS.Reactor.Secret.RoomUpdate.ApplyDeltaEveryUpdate">
            Apply delta for every room update?
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.#ctor(KS.Reactor.Client.ksBaseRoom)">
            Constructor 
            
            @param   ksBaseRoom
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.AddInputAck(System.Int32)">
            Store input acknowledgements for this frame
            
            @param   int input acknowledgements
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.FindOrCreateSyncObject(System.UInt32,System.Boolean)">
            Find or create a new sync object.  If the sync object is new then store it in the new sync object list.
            
            @param   uint entity id
            @return  SyncObject
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.FindOrCreatePlayer(System.UInt32)">
            Find or create a new player.  If the player is new then store the player id in the new player id list.
            
            @param   uint player id
            @return  ksBasePlayer
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Secret.RoomUpdate.SetRoomProperties(System.Collections.Generic.KeyValuePair{System.UInt32,KS.Reactor.ksMultiType}[])" -->
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Secret.RoomUpdate.SetEntityProperties(System.UInt32,System.Collections.Generic.KeyValuePair{System.UInt32,KS.Reactor.ksMultiType}[])" -->
        <!-- Badly formed XML comment ignored for member "M:KS.Reactor.Secret.RoomUpdate.SetPlayerProperties(KS.Reactor.Client.ksBasePlayer,System.Collections.Generic.KeyValuePair{System.UInt32,KS.Reactor.ksMultiType}[])" -->
        <member name="M:KS.Reactor.Secret.RoomUpdate.SetGravity(KS.Reactor.ksVector3)">
            Store a new gravity value for the room and trip the update gravity flag.
            
            @param   ksVector3 gravity
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.AddEvent(KS.Reactor.Secret.BaseServerEvent)">
            Store a server event.
            
            @param   BaseServerEvent serverEvent
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.SortEvents">
            Sort the server events.
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.AddSyncObjectUpdate">
            Store a transform update for every sync object.
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.AddSyncObjectUpdate(KS.Reactor.Client.SyncObject,KS.Reactor.Secret.RoomUpdate.SyncObjectUpdateType,System.Int32[],System.Boolean)">
            Store a sync object transform update.
            
            @param   SyncObject syncObj
            @param   SyncObjectupdateType updateType
            @param   int[] newValue
            @param   bool teleported
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.AddControllerUpdate(KS.Reactor.Client.SyncObject,System.UInt32)">
            Stores an update to change the controller on a sync object.
            
            @param   syncObject syncObj to change controller on.
            @param   uint controllerType - type of new controller.
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.Process">
            Apply all stored updates to the room.
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.ApplySyncObjectUpdates">
            Apply the transform updates to the sync objects.
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.FirstThreeAreZeros(System.Int32[])">
            Returns true if first three elements in the given array are zeros.
            
            @param   int[] array to check
            @return  bool
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.RemoveSyncGroup(System.UInt32)">
            Add a sync group to the set of all sync groups the user no longer belongs to.
            
            @param   uint Sync group
        </member>
        <member name="M:KS.Reactor.Secret.RoomUpdate.RemoveSyncGroupEntity(System.UInt32,System.UInt32)">
            Add an entity ID to set of all entities removed from a sync group.
            
            @param   uint Sync group
            @param   uint Entity ID
        </member>
        <member name="T:KS.Reactor.Secret.ServerEventList">
            Build and process lists of server events.
        </member>
        <member name="M:KS.Reactor.Secret.ServerEventList.#ctor(KS.Reactor.Client.ksBaseRoom)">
            Constructor
            
            @param   ksBaseRoom room
        </member>
        <member name="M:KS.Reactor.Secret.ServerEventList.AddEvent(KS.Reactor.Secret.BaseServerEvent)">
            Add a server event to the list
            
            @param   BaseServerEvent serverEvent
        </member>
        <member name="M:KS.Reactor.Secret.ServerEventList.ProcessEvents">
            Processes the event queue.
        </member>
        <member name="T:KS.Reactor.Secret.BaseServerEvent">
            Base event.  Events are sorted by their ID and are executed based on type
        </member>
        <member name="T:KS.Reactor.Secret.RoomRPCServerEvent">
            Room RPC Event
        </member>
        <member name="T:KS.Reactor.Secret.EntityRPCServerEvent">
            Entity RPC Event
        </member>
        <member name="T:KS.Reactor.Secret.BatchRPCServerEvent">
            Batch RPC Event
        </member>
        <member name="T:KS.Reactor.Secret.DestroyEntityServerEvent">
            Destroy Entity Event
        </member>
        <member name="T:KS.Reactor.Secret.ClientConnectServerEvent">
            Client Connect Event
        </member>
        <member name="T:KS.Reactor.Secret.ClientDisconnectServerEvent">
            Client Disconnect Event
        </member>
        <member name="T:KS.Unity.ksPathFinderAttribute">
            File and directory path finder attribute tag
        </member>
        <member name="M:KS.Unity.ksPathFinderAttribute.#ctor(System.Boolean,System.String,System.Boolean)">
            Constructor
            
            @param   bool dirOnly - only allow selecting directories.
            @param   string title for the file browser.
            @param   string relative - if true and the path is in the project, will make the path relative to the
                     project.
        </member>
        <member name="T:KS.Compression.BaseEncoderModel">
            Base class for all encoder models.
        </member>
        <member name="M:KS.Compression.BaseEncoderModel.CompressorId">
             Returns a byte id of the compressor that uses this model.
            
             @return   byte id unique to the compressor
        </member>
        <member name="M:KS.Compression.BaseEncoderModel.Version">
             Returns the version of the compressor
            
             @return   ushort version of the compressor
        </member>
        <member name="M:KS.Compression.BaseEncoderModel.Serialize(System.IO.BinaryWriter)">
             Serializes the model.
            
             @param   BinaryWriter writer
        </member>
        <member name="M:KS.Compression.BaseEncoderModel.Deserialize(System.Byte[])">
             Deserializes the model.
             The model data must starts with 7 byte header data:
             byte compressor Id
             uin16_t version
             uint length
            
             @param   byte[] modelData
             @return  bool - true if the model is set successfully
        </member>
        <member name="T:KS.Compression.BFEncoderModel">
            This class contains the probabilities used in the binary flag encoder/decoder.
            It also tracks the stats to generate the dynamic model.
        </member>
        <member name="M:KS.Compression.BFEncoderModel.#ctor">
            Constructor
        </member>
        <member name="M:KS.Compression.BFEncoderModel.#ctor(KS.Compression.BFEncoderModel)">
             Copy constructor
            
             @param   BFEncoderModel model to copy from
        </member>
        <member name="M:KS.Compression.BFEncoderModel.Finalize">
            Destructor.
        </member>
        <member name="M:KS.Compression.BFEncoderModel.CompressorId">
             Returns a byte id of the compressor that uses this model.
            
             @return   byte id unique to the compressor
        </member>
        <member name="M:KS.Compression.BFEncoderModel.Version">
             Returns the version of the compressor
            
             @return   ushort version of the compressor
        </member>
        <member name="M:KS.Compression.BFEncoderModel.Serialize(System.IO.BinaryWriter)">
             Serializes the model.
            
             @return  BinaryWriter writer
        </member>
        <member name="M:KS.Compression.BFEncoderModel.Deserialize(System.Byte[])">
             Deserializes the model.
             The model data byte array contains:
             8 probabilities for the full object flag bits
             58 probabilities for the update object flag bits
             2 probabilities for the object flag bit
             24 probabilities for the sign bits
             Each probability is stored as a uint. Therefore the model data should contains 368 bytes.
            
             @param   byte[] modelData
             @return  bool - true if the model is set successfully
        </member>
        <member name="M:KS.Compression.BFEncoderModel.DeserializeFullObjectModel(System.Byte[],System.Int32@)">
             Decode the full object model
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="M:KS.Compression.BFEncoderModel.DeserializeUpdateObjectModel(System.Byte[],System.Int32@)">
             Decode the update object model
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="M:KS.Compression.BFEncoderModel.ComputeProbabilities(System.Boolean)">
             Computes probabilities from the stats.
            
             @param   bool isFullObject
        </member>
        <member name="M:KS.Compression.BFEncoderModel.ComputeProbability(System.Int64,System.Int64)">
             Computes a probability from the given total bit count and one bit count.
            
             @param   long totalBitCount
             @param   long oneBitCount
             @return  uint probability
        </member>
        <member name="M:KS.Compression.BFEncoderModel.AddFullStats(KS.Compression.BFModelStats)">
             Adds the given full object stats.
            
             @param   BFModelStats fullFlagStats
        </member>
        <member name="M:KS.Compression.BFEncoderModel.AddUpdateStats(KS.Compression.BFModelStats,KS.Compression.BFModelStats)">
             Adds the given update object stats.
            
             @param   BFModelStats updateFlagStats
             @param   BFModelStats signBitsStats
        </member>
        <member name="T:KS.Compression.BFModelStats">
            Tracks the stats that are used to generate the binary flag model.
        </member>
        <member name="M:KS.Compression.BFModelStats.#ctor(System.UInt32)">
             Constructor
            
             @param   uint size of stats array
        </member>
        <member name="M:KS.Compression.BFModelStats.ClearStats">
            Clears the stats.
        </member>
        <member name="M:KS.Compression.BFModelStats.Add(KS.Compression.BFModelStats)">
             Adds the given stats to these stats.
            
             @param   BFModelStats stats
        </member>
        <member name="M:KS.Compression.BFModelStats.Subtract(KS.Compression.BFModelStats)">
             Subtracts the given stats from these stats.
             If the values in the given stats is bigger than these stats', set the values to 0.
            
             @param   BFModelStats stats
        </member>
        <member name="M:KS.Compression.BFModelStats.Deserialize(System.Byte[],System.Int32@)">
             Decode the stats.
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="T:KS.Compression.BinArithCoder">
            Binary arithmetic coder base class.
            Common methods, constants and data as used for encoding and decoding of binary
            arithmetic stream.
        </member>
        <member name="M:KS.Compression.BinArithCoder.ClampProb(System.UInt32)">
             Returns a clamped value that is greater than zero and less than kProbMax.
            
             @param   uint prob
             @return  uint
        </member>
        <member name="T:KS.Compression.BinArithDecoder">
            Binary arithmetic decoder (Ilya Muravyov's variant).
            Decodes a string of binary (0/1) events with probabilities that are not 1/2.
            This code is written for clarity, not performance.
        </member>
        <member name="M:KS.Compression.BinArithDecoder.GetByte">
             Gets the next byte of data to decode.
            
             @return  byte
        </member>
        <member name="M:KS.Compression.BinArithDecoder.#ctor">
            Constructor
        </member>
        <member name="M:KS.Compression.BinArithDecoder.Initialize(System.IO.BinaryReader)">
             Initialize
            
             @param   BinaryReader source - data to decode
        </member>
        <member name="M:KS.Compression.BinArithDecoder.Decode(System.UInt32)">
             Decodes a binary symbol with the probability of a 1 being "prob".
            
             @param   uint prob to decode the next bit with
             @return  int - decoded bit
        </member>
        <member name="M:KS.Compression.BinArithDecoder.DecodeWithBitSwitchProb(System.Int32,System.UInt32)">
             Decodes with the given bit as the context. If the context bit is zero,
             use the given probability. Otherwise, use kProbMax - prob.
            
             @param   int context bit
             @param   uint prob
             @return  int - decoded bit
        </member>
        <member name="T:KS.Compression.BinArithEncoder">
            Binary arithmetic encoder (Ilya Muravyov's variant).
            Encodes a string of binary (0/1) events with probabilities that are not 1/2.
            This code is written for clarity, not performance.
        </member>
        <member name="M:KS.Compression.BinArithEncoder.#ctor">
            Constructor
        </member>
        <member name="M:KS.Compression.BinArithEncoder.Initialize(System.IO.BinaryWriter)">
             Initialize
            
             @param    BinaryWriter  target - buffer to encode data to
        </member>
        <member name="M:KS.Compression.BinArithEncoder.Written">
            Get the number of written bytes
            
            @return  int  bytes written
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Compression.BinArithEncoder.Encode(System.Int32,System.UInt32)" -->
        <member name="M:KS.Compression.BinArithEncoder.EncodeWithBitSwitchProb(System.Int32,System.Int32,System.UInt32)">
             Encodes the given bit with another bit as the context. If the context bit is zero,
             use the given probability. Otherwise, use kProbMax - prob.
            
             @param   int bit to encode
             @param   int context bit
             @param   uint prob
        </member>
        <member name="M:KS.Compression.BinArithEncoder.Flush">
            Finish encoding. Flushes remaining codeword.
        </member>
        <member name="T:KS.Compression.BinaryFlagDecoder">
            Decoder for data encoded by BinaryFlagEncoder.
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.SetStaticModel(System.Byte[])">
            Sets the static model.
            
            @param   byte[] modelData
            @return  bool true if the static model was set successfully
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.SetUseStaticModel(System.Boolean,System.Boolean)">
            Toggles using static model for decoding full objects and update objects.
            
            @param   bool useForFullObject
            @param   bool useForUpdateObject
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.#ctor">
            Constructor
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.Initialize(KS.Compression.EncodedData,System.Boolean)">
            Initializes the data structures required to decode data
            
            @param   EncodedData encodedData
            @param   bool useDefaultModel
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.Decode">
            Decodes encoded data.
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.DecodeObject(System.Int32,System.UInt32[0:,0:])">
             Decodes the object at the given index.
            
             @param   int objectIndex
             @param   uint[,] signBitProbsWithContext
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.DecodeFullObjectFlags">
            Decode full object flags.
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.DecodeFieldBitSizes">
            Decode field sizes.
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.DecodeUpdateObjectFlags">
            Decode update object flags.
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.DecodeUpdateObjectFieldFlags(System.Int32@,System.Boolean,System.UInt32[])">
             Decodes update object field flags.
            
             @param   ref int flagBitIndex
             @param   bool skipFieldBit - if true, skip decoding of the bit for the field
             @param   uint[] updateObjectFlagBitProbs
             @return  byte flag
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.DeserializeFullObjectModel(System.Byte[],System.Int32@)">
             Deserializes the full object model
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="M:KS.Compression.BinaryFlagDecoder.DeserializeUpdateObjectModel(System.Byte[],System.Int32@)">
             Deserializes the update object model
            
             @param   byte[] data
             @param   ref int offset
        </member>
        <member name="T:KS.Compression.BinaryFlagEncoder">
            This encoder generates flags for fields to indicate if they are zero, then uses binary arithmetic encoding to
            encode the objects by columns with the probabilities of bit switching for each column.
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.SetStaticModel(System.Byte[])">
            Sets the static model.
            
            @param   byte[] modelData
            @return  bool true if the static model was set successfully
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.SetUseStaticModel(System.Boolean,System.Boolean)">
            Toggles using static model for encoding full objects and update objects.
            
            @param   bool useForFullObject
            @param   bool useForUpdateObject
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.#ctor">
            Constructor
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.Initialize(KS.Compression.EncodedData,System.Boolean)">
             Initializes
            
             @param   EncodedData encodedData
             @param   bool useDefaultModel
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.GenerateFlags">
            Generates flags.
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.Encode">
            Encodes raw data.
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.EncodeObject(System.Int32,System.UInt32[0:,0:])">
             Encodes the object at the given index.
            
             @param   int objectIndex
             @param   uint[,] signBitProbsWithContext
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.EncodeFullObjectFlags">
            Encodes full object flags.
            Full object flag uses 8 bits:
            1 bit for the position. 1 bit for each position element.
            1 bit for the rotation. 1 bit for each rotation element.
            If the position or rotation bit is 0, then we don't encode the bits for the position or rotation elements,
            otherwise at least one element bit has to be 1.
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.EncodeFieldBitSizes">
            Encodes field sizes. It uses 6 bits to store the maximum bit size of the biggest value of a field.
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.EncodeUpdateObjectFlags">
            Encodes update object flags.
            Update object's flag uses 58 bits: 1 bit for the object.
            For each transform vector(position, rotation and scale):
            1 bit for the vector, 1 bit for each vector element, 5 bits for the field size.
            If the object bit is 0, then we just encode this 0 bit.
            Otherwise, if the vector bit is 0, then we encode the vector bit but not the element bits.
            If the vector bit is 1, then at least one vector element bit has to be 1.
            If the vector element bit is 0, then we don't encode the field size.
        </member>
        <member name="M:KS.Compression.BinaryFlagEncoder.EncodeUpdateObjectFieldFlags(System.Byte,System.Int32@,System.Boolean,System.UInt32[])">
             Encodes update object field flags.
             Encodes the bit for the field first. If it is not 0, encodes the field size.
            
             @param   byte flag
             @param   ref int flagBitIndex
             @param   bool skipFieldBit - if true, don't encode the bit for the field
             @param   uint[] updateObjectFlagBitProbs
             @return  bool - true if the field bit is 0
        </member>
        <member name="T:KS.Compression.EncodedData">
            Class used for tracking encoded data
        </member>
        <member name="M:KS.Compression.EncodedData.#ctor">
            Constructor
        </member>
        <member name="T:KS.Compression.FieldFlag">
            This class generates and encodes/decodes flags indicating if each field(position, rotation, scale) is zero.
        </member>
        <member name="M:KS.Compression.FieldFlag.#ctor">
            Constructor
        </member>
        <member name="M:KS.Compression.FieldFlag.Initialize(System.Int32,System.Int32)">
             Initialize
            
             @param   int objSize
             @param   int objCount
        </member>
        <member name="M:KS.Compression.FieldFlag.IsZeroField(System.Int32,System.Int32)">
             Checks if the field starts at the given byte is zero.
            
             @param   int objIndex
             @param   int byteIndex
             @return  true if the field is zero
        </member>
        <member name="M:KS.Compression.FieldFlag.GetFieldSize(System.Int32,System.Int32)">
             Gets field size.
            
             @param   int objIndex
             @param   int byteIndex
             @return  byte field size
        </member>
        <member name="M:KS.Compression.FieldFlag.SkipUpdateObject(System.Int32)">
             Checks if we can skip the given update object for encoding.
            
             @param   int objIndex
             @return  true if we can skip this object
        </member>
        <member name="T:KS.Compression.FieldFlagGenerator">
            This class generates the field flags indicating if each field(position, rotation, scale) is zero.
        </member>
        <member name="M:KS.Compression.FieldFlagGenerator.GenerateFullObjectFlags(KS.Compression.FieldFlag,System.IO.BinaryReader)">
             Generates field bit sizes and fields flags for the full object data.
            
             @param   FieldFlag fieldFlag
             @param   BinaryReader srcData
        </member>
        <member name="M:KS.Compression.FieldFlagGenerator.GenerateUpdateObjectFlags(KS.Compression.FieldFlag,System.IO.BinaryReader)">
             Generates field bit sizes and fields flags for the update object data.
            
             @param   FieldFlag fieldFlag
             @param   BinaryReader srcData
        </member>
        <member name="M:KS.Compression.FieldFlagGenerator.GenerateTransformFlags(KS.Compression.FieldFlag,System.Int32,System.IO.BinaryReader)">
             Generates flags for the position or the rotation or the scale.
            
             @param   FieldFlag fieldFlag
             @param   int flagIndex
             @param   BinaryReader data
             @param   ref int position
        </member>
        <member name="M:KS.Compression.FieldFlagGenerator.GenerateFieldFlags(KS.Compression.FieldFlag,System.Int32,System.IO.BinaryReader)">
             Generates flag for the given field data.
             We use 1 bit for the field not being zero and 5 bits for the field bit size.
            
             @param   FieldFlag fieldFlag
             @param   int flagIndex
             @param   BinaryReader data
             @param   int position
        </member>
        <member name="M:KS.Compression.FieldFlagGenerator.GetMostSignificantBitIndex(System.UInt32)">
             Gets the index of the most significant bit of a uint.
            
             @param   uint value
             @return  byte index
        </member>
        <member name="M:KS.Compression.FLBinaryTreeDecoder.ReverseDiff">
            Perform a reverse diff(replace different bits) from the encoded array to the data array
        </member>
        <member name="M:KS.Compression.FLByteDiffDecoder.ReverseDiff">
            Perform a reverse diff(replace different bytes) from the encoded array to the data array
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Compression.FLDecoder.Initialize(System.Byte[],System.Collections.Generic.List{System.UInt32},System.Int32,System.Int32,System.Byte[]@)" -->
        <member name="M:KS.Compression.FLDecoder.ReverseDiff">
            Perform a reverse diff(sequential additions) from the encoded array to the data array
        </member>
        <member name="M:KS.Compression.FLDecoder.DecompressDelta(System.Int32,System.Byte[])">
             Compress and copy the delta and its length (max 255 bytes) to the destination
            
             @param   int index offset in bytes to the header for the next expected delta
             @param	byte[] delta data
             @return	int index to the next delta location
        </member>
        <member name="M:KS.Compression.FLDecoder.ReverseApplyModel(System.Int32)">
             Copy remapped bits from the source object to the destination object
            
             @param   int index of the start byte of the target object to remap
        </member>
        <member name="M:KS.Compression.FLDecoder.GetDecoderTasks(System.Int32)">
            Generate a queue of concurrent tasks for decoding.
            
            @param   int taskCount number of tasks to generate
            @return  DecoderTask[] list of tasks that can be executed concurrently
        </member>
        <member name="M:KS.Compression.FLDecoder.InitializeBitCounts">
            Initialize bit counts.
        </member>
        <member name="M:KS.Compression.FLDecoder.GetBitCounts">
            Return bit counts
            
            @return  uint[]
        </member>
        <member name="P:KS.Compression.FLEncoder.Deltas">
            Encoded deltas
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Compression.FLEncoder.Initialize(System.Collections.Generic.List{System.UInt32},System.Int32,System.Int32,System.Byte[])" -->
        <member name="M:KS.Compression.FLEncoder.ApplyModel(System.Int32)">
             Copy remapped bits from the source object to the destination object
            
             @param	int index of the target object for bit remapping
        </member>
        <member name="M:KS.Compression.FLEncoder.GetEncoderTasks(System.Int32)">
            Generate a queue of concurrent tasks for encoding.
            
            @param taskCount number of tasks tp generate
        </member>
        <member name="M:KS.Compression.FLEncoder.Sort">
            Sort the object indices
        </member>
        <member name="M:KS.Compression.FLEncoder.Diff">
            Calculate and store the difference between each sorted object
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Compression.FLEncoder.Subtract(System.Int32,System.Int32,System.Byte[])" -->
        <member name="M:KS.Compression.FLEncoder.CompressDelta(System.Byte[])">
             Compress and copy the delta and its length (max 255 bytes) to the destination
            
             @param	byte[] delta
             @return	int number of bytes the delta was written as (includes size byte)
        </member>
        <member name="T:KS.Compression.FLEncoderModel">
            Generates the model for fixed-length object encoder.
            The model is a remapping of bits, where the bits are 
            remapped from most significant to least significant
            (little-endian), ordered by lowest variance to highest, 
            then by lowest mean to highest
        </member>
        <member name="T:KS.Compression.FLEncoderModel.BitStats">
            Structure that stores bit statistics
        </member>
        <member name="P:KS.Compression.FLEncoderModel.SerializedModel">
            Get/Set the serialized model data
        </member>
        <member name="M:KS.Compression.FLEncoderModel.#ctor">
            Construct a new FLEncoderModel and assign the default model.
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Compression.FLEncoderModel.SetModelData(System.Collections.Generic.List{System.UInt32})" -->
        <member name="M:KS.Compression.FLEncoderModel.Initialize(System.Byte[],System.Int32,System.Int32)">
            Initializes the model. 
            
            @param   byte[] sourceData byte array containing source data?
            @param   int objSize the size of the objects to analyze
            @param   int objCount the number of objects to analyze
        </member>
        <member name="M:KS.Compression.FLEncoderModel.GetModelTasks(System.Int32)">
            Create a list of tasks that can be run concurrently
            
            @param   int taskCount number of tasks to generate.
        </member>
        <member name="M:KS.Compression.FLEncoderModel.CountBits(System.Int32)">
             Add the bits from an object to the bit count totals
            
             @param	int byteOffset offset of the object data to analyze
        </member>
        <member name="M:KS.Compression.FLEncoderModel.CountBitsByNibble(System.Byte,System.Int32)">
             Examine the 4 lowest bits of a byte and add them to the bit count total
            
             @param	byte nibble data to analyze
             @param	int bitOffset location of bit counter
        </member>
        <member name="M:KS.Compression.FLEncoderModel.BuildModel">
            Construct a model from the bit counts
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Compression.FLEncoderModel.GetModel" -->
        <member name="M:KS.Compression.FLEncoderModel.SerializeModel">
            Serializes the model.
        </member>
        <member name="M:KS.Compression.FLEncoderModel.DeserializeModel(System.Boolean)">
            Deserialize the model.
        </member>
        <member name="M:KS.Compression.FLEncoderModel.DeserializeModelData(System.Byte[],System.Int32@)">
            Deserialize model data from a source buffer.
            
            @param   byte[] - model data buffer
            @para    ref int - offset
        </member>
        <member name="M:KS.Compression.FLEncoderModel.ParseModelData(System.Byte[])">
            Parse and construct a model object from a byte buffer
            
            @param   byte[] - model data buffer
        </member>
        <!-- Badly formed XML comment ignored for member "M:KS.Compression.FLEncoderModel.InsertBitposToFront(System.Collections.Generic.List{System.UInt32})" -->
        <member name="M:KS.Compression.FLEncoderModel.SetBitCounts(System.UInt32[])">
            Set bit counts.
            
            @param   uint[] bitCounts
        </member>
        <member name="M:KS.Compression.FLEncoderModel.ReadUInt32(System.Byte[],System.Int32@,System.UInt32)">
            Read uint from src starting from index with length
            @param	byte[] src - source byte array
            @param	ref int index of starting position
            @param	uint length of data to read
            @return  uint value read out
        </member>
        <member name="M:KS.Compression.FLEncoderModel.WriteBytes(System.Byte[],System.UInt32,System.UInt32,System.Int32@)">
            Writes up to 4 bytes into a byte array.
            
            @param   byte[] dest to write to.
            @param   uint value to write.
            @param   uint numBytes to write.
            @param   ref int index to write to. Will be increased by the number of bytes written.
        </member>
        <member name="T:KS.Compression.Object2dArrayDecoder">
            Decodes object diffs with probabilities generated from the last row.
            Returns the decoded data as a byte vector.
        </member>
        <member name="T:KS.Compression.Object2dArrayDecoder.ReverseDiffFunction">
             Object reverse diff callback.
            
             @param   BinaryReader x - reader of the object diff data
             @param   BinaryReader y - reader of the object to apply diff data
             @param   BinaryWriter dest - writer of the result object
             @param   int objectSize
        </member>
        <member name="T:KS.Compression.Object2dArrayDecoder.DecodeFunction">
             Object decoding callback.
            
             @param   BinArithDecoder decoder
             @param   uint[] probs
             @param   int[] bitSwitchCount
             @param   BinaryReader context
             @param   BinaryReader decoded
             @param   int length
        </member>
        <member name="T:KS.Compression.Object2dArrayDecoder.DecodeParams">
            Class of the decoding parameters.
        </member>
        <member name="M:KS.Compression.Object2dArrayDecoder.DecodeParams.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
             Constructor
            
             @param   byte[] encoded
             @param   int rowCount
             @param   int columnCount
             @param   int objectSize
        </member>
        <member name="M:KS.Compression.Object2dArrayDecoder.DecodeParams.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,KS.Compression.Object2dArrayDecoder.ReverseDiffFunction,KS.Compression.Object2dArrayDecoder.DecodeFunction)">
             Constructor
            
             @param   byte[] encoded
             @param   int rowCount
             @param   int columnCount
             @param   int objectSize
             @param   int diffObjectSize
             @param   int bitNumberToDecodePerObject
             @param   ReverseDiffFunction reverseDiffFunction
             @param   DecodeFunction decodeFunction
        </member>
        <member name="M:KS.Compression.Object2dArrayDecoder.Decode(KS.Compression.Object2dArrayDecoder.DecodeParams)">
             Decodes data with the given params.
            
             @param   DecodeParams decodeParams
             @return  byte[] - decoded data
        </member>
        <member name="M:KS.Compression.Object2dArrayDecoder.ReverseDiff(KS.Compression.Object2dArrayDecoder.DecodeParams,System.Byte[])">
             Iterate through all object diffs and call decodParams.ReverseDiff on them to get the original object data.
            
             @param   DecodeParams decodeParams
             @param   byte[] decodedData
        </member>
        <member name="T:KS.Compression.ReverseDiffFunctions">
            This class contains the reverse diff functions for different data structures.
        </member>
        <member name="M:KS.Compression.ReverseDiffFunctions.Xor(System.IO.BinaryReader,System.IO.BinaryReader,System.IO.BinaryWriter,System.Int32)">
             Performs an XOR of all bytes on object x with object y and store the results in object dest.
            
             @param   BinaryReader x - reader of the object diff data
             @param   BinaryReader y - reader of the object to apply diff data
             @param   BinaryWriter dest - writer of the result object
             @param   int objectSize
        </member>
        <member name="M:KS.Compression.ReverseDiffFunctions.ReverseDiffSingleFloatComponents(System.IO.BinaryReader,System.IO.BinaryReader,System.IO.BinaryWriter,System.Int32)">
             Combines the mantissa, exponent, and sign components of all floats in object x with object y
             and store the results in object dest.
            
             @param   BinaryReader x - reader of the object diff data
             @param   BinaryReader y - reader of the object to apply diff data
             @param   BinaryWriter dest - writer of the result object
             @param   int objectSize
        </member>
        <member name="T:KS.Compression.DecodeFunctions">
            This class contains the decode functions for different data structures.
        </member>
        <member name="M:KS.Compression.DecodeFunctions.DecodeAllBits(KS.Compression.BinArithDecoder,System.UInt32[],System.Int32[],System.IO.BinaryReader,System.IO.BinaryWriter,System.Int32)">
             Decodes the given length of data bit by bit.
            
             @param   BinArithDecoder decoder to decode the encoded bits
             @param   uint[] probs - probabilities to decode bits
             @param   int[] bitSwitchCount - record bit switch count to compute probabilities
             @param   BinaryReader context - context data used to switch probabilities
             @param   BinaryWriter decoded - output writer for the decoded data
             @param   int length
        </member>
        <member name="M:KS.Compression.DecodeFunctions.DecodeSingleFloatComponents(KS.Compression.BinArithDecoder,System.UInt32[],System.Int32[],System.IO.BinaryReader,System.IO.BinaryWriter,System.Int32)">
             Decodes mantissa diff, exponent diff and sign diff.
            
             @param   BinArithDecoder decoder to decode the encoded bits
             @param   uint[] probs - probabilities to decode bits
             @param   int[] bitSwitchCount - record bit switch count to compute probabilities
             @param   BinaryReader context - context data used to switch probabilities
             @param   BinaryWriter decoded - output writer for the decoded data
             @param   int length
        </member>
        <member name="T:KS.Compression.Object2dArrayEncoder">
             This encoder encodes with the given EncodeParams.
             - EncodeParams.Source and EncodeParams.SourceLength defines the byte array of the source data.
             - With the EncodeParams.RowCount, EncodeParams.ColumnCount and EncodeParams.ObjectSize, the encoder can
               interpret the source data as a 2d object array.
             - The Diff function computes the diff between two objects and output a diff object of DiffObjectSize.
             - The Encode function encodes the diff data.
            
             The encoder encodes the objects in two steps:
             1. Diff. It diffs each object in the first column with the object in the last row, each object in the remaining
             columns with the object in the last column.
             2. Encode. It encodes each object with the probabilities generated from the last row. There is one probability
                for every bit need to encode for an object. It is the probability of the bit in the current object being
                different from the bit of the object in the last row or column. The very first object is encoded as it is
                since it has no object to diff with.
             The encoded data will be returned as a byte vector.
        </member>
        <member name="T:KS.Compression.Object2dArrayEncoder.DiffFunction">
             Object diff callback.
            
             @param   BinaryReader x - reader of the object to diff
             @param   BinaryReader y - reader of the object to diff with
             @param   BinaryWriter dest - writer of the diff data
             @param   int objectSize
        </member>
        <member name="T:KS.Compression.Object2dArrayEncoder.EncodeFunction">
             Object encoding callback.
            
             @param   BinArithEncoder encoder
             @param   uint[] probs
             @param   int[] bitSwitchCount
             @param   BinaryReader source
             @param   BinaryReader context
             @param   int length
        </member>
        <member name="T:KS.Compression.Object2dArrayEncoder.EncodeParams">
            Class of the encoding parameters.
        </member>
        <member name="M:KS.Compression.Object2dArrayEncoder.EncodeParams.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
             Constructor
            
             @param   byte[] source
             @param   int rowCount
             @param   int columnCount
             @param   int objectSize
        </member>
        <member name="M:KS.Compression.Object2dArrayEncoder.EncodeParams.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,KS.Compression.Object2dArrayEncoder.DiffFunction,KS.Compression.Object2dArrayEncoder.EncodeFunction)">
             Constructor
            
             @param   byte[] source
             @param   int rowCount
             @param   int columnCount
             @param   int objectSize
             @param   int diffObjectSize
             @param   int bitNumberToEncodePerObject
             @param   DiffFunction diffFunction
             @param   EncodeFunction encodeFunction
        </member>
        <member name="M:KS.Compression.Object2dArrayEncoder.Encode(KS.Compression.Object2dArrayEncoder.EncodeParams)">
             Encodes data with the given params.
            
             @param   EncodeParams encodeParams
             @return  byte[] - encoded data
        </member>
        <member name="M:KS.Compression.Object2dArrayEncoder.Diff(KS.Compression.Object2dArrayEncoder.EncodeParams)">
             For the first column, diff the object with the one in the last row.
             For other columns, diff the object with the one in the last column.
            
             @param   EncodeParams encodeParams
        </member>
        <member name="T:KS.Compression.DiffFunctions">
            This class contains the diff functions for different data structures.
        </member>
        <member name="M:KS.Compression.DiffFunctions.Xor(System.IO.BinaryReader,System.IO.BinaryReader,System.IO.BinaryWriter,System.Int32)">
             Performs an XOR of all bytes on object x with object y and store the results in object dest.
            
             @param   BinaryReader x - reader of the object to diff
             @param   BinaryReader y - reader of the object to diff with
             @param   BinaryWriter dest - writer of the diff data
             @param   int objectSize
        </member>
        <member name="M:KS.Compression.DiffFunctions.DiffSingleFloatComponent(System.IO.BinaryReader,System.IO.BinaryReader,System.IO.BinaryWriter,System.Int32)">
             Generates a difference of the mantissa, exponent, and sign components of all floats in object x with
             object y and store the results in object dest.
            
             @param   BinaryReader x - reader of the object to diff
             @param   BinaryReader y - reader of the object to diff with
             @param   BinaryWriter dest - writer of the diff data
             @param   int objectSize
        </member>
        <member name="T:KS.Compression.EncodeFunctions">
            This class contains the encode functions for different data structures.
        </member>
        <member name="M:KS.Compression.EncodeFunctions.EncodeAllBits(KS.Compression.BinArithEncoder,System.UInt32[],System.Int32[],System.IO.BinaryReader,System.IO.BinaryReader,System.Int32)">
             Encodes the given data bit by bit.
            
             @param   BinArithEncoder encoder
             @param   uint[] probs
             @param   int[] bitSwitchCount
             @param   BinaryReader source
             @param   BinaryReader context
             @param   int length
        </member>
        <member name="M:KS.Compression.EncodeFunctions.EncodeSingleFloatComponents(KS.Compression.BinArithEncoder,System.UInt32[],System.Int32[],System.IO.BinaryReader,System.IO.BinaryReader,System.Int32)">
             Encodes mantissa diff, exponent diff and sign diff data.
            
             @param   BinArithEncoder encoder
             @param   uint[] probs
             @param   int[] bitSwitchCount
             @param   BinaryReader source
             @param   BinaryReader context
             @param   int length
        </member>
        <member name="T:KS.LZMA.ksICompressionTask">
            Public compression task interface
        </member>
        <member name="T:KS.LZMA.CompressionTask">
            Compression task created by LZMA Compress and Decompress requests.
        </member>
        <member name="P:KS.LZMA.CompressionTask.Progress">
            @return  float value between 0.0 and 1.0 representing the task progress.
        </member>
        <member name="P:KS.LZMA.CompressionTask.IsComplete">
            @return  bool true if the task is complete
        </member>
        <member name="P:KS.LZMA.CompressionTask.Exception">
            @return  Exception the last exception encountered
        </member>
        <member name="P:KS.LZMA.CompressionTask.IsCompression">
            @return  bool true if this is a compression task
        </member>
        <member name="P:KS.LZMA.CompressionTask.IsDecompression">
            @return  bool true if this is a decompression task
        </member>
        <member name="P:KS.LZMA.CompressionTask.RawSize">
            @return  long raw data size. Return -1 if is decompression and it is not done yet.
        </member>
        <member name="P:KS.LZMA.CompressionTask.EncodedSize">
            @return  long encoded data size. Return -1 if is compression and it is not done yet.
        </member>
        <member name="M:KS.LZMA.CompressionTask.#ctor(System.Byte[],KS.LZMA.ksLZMA.OnCompleteHandler,System.Boolean)">
            Byte array constructor
            
            @param   byte[] input data
            @param   OnCompleteHandler completion callback
        </member>
        <member name="M:KS.LZMA.CompressionTask.#ctor(System.IO.Stream,System.IO.Stream,KS.LZMA.ksLZMA.OnCompleteHandler,System.Boolean)">
            Input/Output stream constructor
            
            @param   Stream - input stream
            @param   Stream - output stream
            @param   OnCompleteHandler completion callback
            @param   bool - compress
        </member>
        <member name="M:KS.LZMA.CompressionTask.Start">
            Start the compression / decompression task
        </member>
        <member name="M:KS.LZMA.CompressionTask.SetProgress(System.Int64,System.Int64)">
            Update the compress/decompression progress
            LZMA Interface method.
            
            @param   long number of input bytes processed.
            @param   long number of output bytes processed.
        </member>
        <member name="M:KS.LZMA.CompressionTask.Compress">
            Compression
        </member>
        <member name="M:KS.LZMA.CompressionTask.Decompress">
            Decompression
        </member>
        <member name="M:KS.LZMA.CompressionTask.TryGetEncodedData(System.Byte[]@)">
            Try to get the encoded data.  If this is a compression task and the task is not complete then this function 
            will return false and initialize encodedData to null.
            
            @param   byte[] out encoded data
            @return  bool true if the encodedData was updated.
        </member>
        <member name="M:KS.LZMA.CompressionTask.TryGetRawData(System.Byte[]@)">
            Try to get the raw data.  If this is a decompression task and the task is not complete then this function 
            will return false and initialize rawData to null.
            
            @param   byte[] out encoded data
            @return  bool true if the encodedData was updated.
        </member>
        <member name="T:KS.LZMA.ksLZMA">
            Wrapper class of LZMA.
        </member>
        <member name="M:KS.LZMA.ksLZMA.GetCompressTask(System.Byte[],KS.LZMA.ksLZMA.OnCompleteHandler)">
            Compress given data with LZMA on a seperate thread and return the compression task.
            Call the given callback method after the compression task is completed.
            
            @param   byte[] data to be compressed
            @param   OnCompleteHandler callback
            @return  ksICompressionTask
        </member>
        <member name="M:KS.LZMA.ksLZMA.GetCompressTask(System.IO.Stream,System.IO.Stream,KS.LZMA.ksLZMA.OnCompleteHandler)">
            Compress given data with LZMA on a seperate thread and return the compression task.
            Call the given callback method after the compression task is completed.
            
            @param   Stream - input stream
            @param   Stream - output stream
            @param   OnCompleteHandler - callback
            @return  ksICompressionTask
        </member>
        <member name="M:KS.LZMA.ksLZMA.GetDecompressTask(System.Byte[],KS.LZMA.ksLZMA.OnCompleteHandler)">
            Decompress given data with LZMA on a seperate thread and return the compression task.
            Call the given callback method after the decompression task is completed.
            
            @param   byte[] data to be decompressed
            @param   OnCompleteHandler callback
            @return  ksICompressionTask
        </member>
        <member name="M:KS.LZMA.ksLZMA.GetDecompressTask(System.IO.Stream,System.IO.Stream,KS.LZMA.ksLZMA.OnCompleteHandler)">
            Decompress given data with LZMA on a seperate thread and return the compression task.
            Call the given callback method after the compression task is completed.
            
            @param   Stream - input stream
            @param   Stream - output stream
            @param   OnCompleteHandler - callback
            @return  ksICompressionTask
        </member>
        <member name="M:KS.LZMA.ksLZMA.Compress(System.Byte[])">
            Compress given data with LZMA.
            
            @param   byte[] rawData to be compressed.
            @return  byte[] compressed data
        </member>
        <member name="M:KS.LZMA.ksLZMA.Compress(System.IO.Stream,System.IO.Stream)">
            Compress given data with LZMA.
            
            @param   Stream - rawStream to be compressed.
            @param   Stream - encoded stream
        </member>
        <member name="M:KS.LZMA.ksLZMA.Compress(System.IO.Stream,System.IO.Stream,System.Int64@,System.Int64@)">
            Compress given data with LZMA.
            
            @param   Stream - raw stream to read from
            @param   Stream - encoded stream to write to
            @param   out long - raw size
            @param   out long - encoded size
        </member>
        <member name="M:KS.LZMA.ksLZMA.Compress(System.IO.Stream,System.IO.Stream,SevenZip.ICodeProgress,System.Int64@,System.Int64@)">
            Compress given data with LZMA.
            
            @param   Stream - raw stream to read from
            @param   Stream - encoded stream to write to
            @param   ICodeProgress progress - will receive progress callbacks. May be null.
            @param   out long - raw size
            @param   out long - encoded size
        </member>
        <member name="M:KS.LZMA.ksLZMA.Decompress(System.Byte[])">
            Decompress given data with LZMA.
            
            @param   byte[] encodedData to be decompressed.
            @return  byte[] decompressed data
        </member>
        <member name="M:KS.LZMA.ksLZMA.Decompress(System.IO.Stream,System.IO.Stream,System.Int64@,System.Int64@)">
            Decompress given data with LZMA.
            
            @param   Stream - raw stream to write to
            @param   Stream - encoded stream to read from
            @param   out long - encoded size
            @param   out long - raw size
        </member>
        <member name="M:KS.LZMA.ksLZMA.Decompress(System.IO.Stream,System.IO.Stream,SevenZip.ICodeProgress,System.Int64@,System.Int64@)">
            Decompress given data with LZMA.
            
            @param   Stream - raw stream to write to
            @param   Stream - encoded stream to read from
            @param   ICodeProgress progress - will receive progress callbacks. May be null.
            @param   out long - encoded size
            @param   out long - raw size
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.PosStateBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitContextBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitPosBits" -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
    </members>
</doc>
